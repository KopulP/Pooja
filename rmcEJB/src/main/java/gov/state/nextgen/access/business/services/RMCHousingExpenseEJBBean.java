package gov.state.nextgen.access.business.services;

import java.net.MalformedURLException;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;

import org.apache.commons.lang.StringUtils;

import gov.state.nextgen.access.business.customEntities.HOUSING_EXPENSE_CUST_Cargo;
import gov.state.nextgen.access.business.customEntities.INDIVIDUAL_Custom_Cargo;
import gov.state.nextgen.access.business.customEntities.INDIVIDUAL_Custom_Collection;
import gov.state.nextgen.access.business.customEntities.RMC_RESPONSE_Custom_Cargo;
import gov.state.nextgen.access.business.customEntities.RMC_RESPONSE_Custom_Collection;
import gov.state.nextgen.access.business.customEntities.webservice.ChallengeQuestion;
import gov.state.nextgen.access.business.customEntities.webservice.IDProofingRequest;
import gov.state.nextgen.access.business.customEntities.webservice.IDProofingResponse;
import gov.state.nextgen.access.business.entities.APP_INDV_Cargo;
import gov.state.nextgen.access.business.entities.APP_INDV_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_DC_E_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_DC_E_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_HOU_BILLS_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_HOU_BILLS_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_IRWE_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_IRWE_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_JNT_OWN_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_JNT_OWN_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_MEDCR_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_MEDCR_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_MED_BILLS_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_MED_BILLS_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_RM_BRD_EXP_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_RM_BRD_EXP_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_ROOM_BRD_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_ROOM_BRD_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_SHLTC_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_SHLTC_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_SPRT_OBLG_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_SPRT_OBLG_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_UTILC_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_UTILC_Collection;
import gov.state.nextgen.access.business.entities.CP_ABCHS_Cargo;
import gov.state.nextgen.access.business.entities.CP_ABCHS_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_AUTH_REP_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_AUTH_REP_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_ESGIN_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_ESGIN_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_BEF_TAX_DED_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_BEF_TAX_DED_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_INCOME_TAX_DED_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_INCOME_TAX_DED_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_IRWE_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_IRWE_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_MED_BILLS_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_MED_BILLS_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_SNAP_EXP_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_SNAP_EXP_Collection;
import gov.state.nextgen.access.business.entities.Cp_App_In_Deduction_Cargo;
import gov.state.nextgen.access.business.entities.Cp_App_In_Deduction_Collection;
import gov.state.nextgen.access.business.entities.NO_ONE_Collection;
import gov.state.nextgen.access.business.entities.RMB_RQST_Cargo;
import gov.state.nextgen.access.business.entities.RMB_RQST_Collection;
import gov.state.nextgen.access.business.entities.RMC_IN_PRFL_Cargo;
import gov.state.nextgen.access.business.entities.RMC_IN_PRFL_Collection;
import gov.state.nextgen.access.business.rules.ABAuthorizedRepresentativeBO;
import gov.state.nextgen.access.business.rules.ABBeforeTaxDeductionBO;
import gov.state.nextgen.access.business.rules.ABChildSupportBO;
import gov.state.nextgen.access.business.rules.ABDependentCareBO;
import gov.state.nextgen.access.business.rules.ABHouseHoldMemberBO;
import gov.state.nextgen.access.business.rules.ABHouseholdInformationSummaryBO;
import gov.state.nextgen.access.business.rules.ABHouseholdMembersSummaryBO;
import gov.state.nextgen.access.business.rules.ABHousingBillsBO;
import gov.state.nextgen.access.business.rules.ABIdentityProofingtBO;
import gov.state.nextgen.access.business.rules.ABIncomeTaxDeductionBO;
import gov.state.nextgen.access.business.rules.ABMedicalTypeBO;
import gov.state.nextgen.access.business.rules.ABOtherExpensesDetailsBO;
import gov.state.nextgen.access.business.rules.ABOtherExpensesQuestionsBO;
import gov.state.nextgen.access.business.rules.ABOtherExpensesSummaryBO;
import gov.state.nextgen.access.business.rules.ARPreSubmitBO;
import gov.state.nextgen.access.business.rules.BeforeTaxDeductionBO;
import gov.state.nextgen.access.business.rules.assets.AssetBO;
import gov.state.nextgen.access.business.rules.assets.LifeInsuranceBO;
import gov.state.nextgen.access.business.rules.assets.RealPropertyBO;
import gov.state.nextgen.access.business.rules.expenses.ARExpenseIntermediateGatepostQuestionsBO;
import gov.state.nextgen.access.business.rules.expenses.ARHousingBillDetailsBO;
import gov.state.nextgen.access.business.rules.expenses.ARMedicalBillDetailsBO;
import gov.state.nextgen.access.business.rules.expenses.DependentCareExpensesBO;
import gov.state.nextgen.access.business.rules.expenses.HouseBillsBO;
import gov.state.nextgen.access.business.rules.expenses.HousingExpenseBO;
import gov.state.nextgen.access.business.rules.expenses.ImpairmentRelatedWorkExpensesBO;
import gov.state.nextgen.access.business.rules.expenses.RoomAndBoardExpensesBO;
import gov.state.nextgen.access.business.rules.expenses.SupportPaymentsAndObligationsBO;
import gov.state.nextgen.access.business.rules.expenses.UtilityBillsBO;
import gov.state.nextgen.access.business.rules.expenses.UtilityCostsBO;
import gov.state.nextgen.access.business.rules.household.MedicareBO;
import gov.state.nextgen.access.business.utility.AgeUtil;
import gov.state.nextgen.access.business.validation.ChangingValidation;
import gov.state.nextgen.access.business.validation.rmc.details.ARBTDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARDCDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARHMDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARITDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARIWEValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARMBDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARRBEValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARSODValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARXHDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARXUDValidator;
import gov.state.nextgen.access.business.validation.rmc.types.ARXHIValidator;
import gov.state.nextgen.access.management.applications.CategorySequenceDetail;
import gov.state.nextgen.access.management.applications.ICategorySelectionProfileManager;
import gov.state.nextgen.access.management.applications.IRMCResponseProfileManager;
import gov.state.nextgen.access.management.applications.QuestionsExtractionHandler;
import gov.state.nextgen.access.management.applications.RMBRequestManager;
import gov.state.nextgen.access.management.constants.AppConstants;
import gov.state.nextgen.access.management.individuals.PeopleHandler;
import gov.state.nextgen.access.management.programs.FwProgramManager;
import gov.state.nextgen.access.management.programs.IProgramManager;
import gov.state.nextgen.access.management.rules.RulesBO;
import gov.state.nextgen.access.management.util.IndivTypeSeqBean;
import gov.state.nextgen.access.management.util.IndividualAge;
import gov.state.nextgen.access.presentation.entities.listview.AROtherBillsBeforeTaxDeductionSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.AROtherBillsChildCareBillSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.AROtherBillsChildObligationSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.AROtherBillsIncomeTaxDeductionSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.AROtherBillsMedicalBillsTypeSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.ARPreSubmitSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBAuthorizedRepresentativeListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBBeforeTaxDeductionSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBChildCareChangeSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBChildSupportObligationSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBDependentCareGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBHouseBillsIndvSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBHousingBillsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBIncomeTaxDeductionSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBMedicalBillsSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBUtilityBillsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBUtilityBillsIndvSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCHouseUtiltySummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCUtiltyHouseSummaryListView;
import gov.state.nextgen.framework.business.entities.FwTransaction;
import gov.state.nextgen.framework.driver.IDriver;
import gov.state.nextgen.framework.exceptions.FwException;
import gov.state.nextgen.framework.exceptions.FwExceptionManager;
import gov.state.nextgen.framework.exceptions.FwWrappedException;
import gov.state.nextgen.framework.exceptions.IException;
import gov.state.nextgen.framework.factories.FwServiceFactory;
import gov.state.nextgen.framework.management.configuration.FwConfigurationManager;
import gov.state.nextgen.framework.management.constants.FwConstants;
import gov.state.nextgen.framework.management.logging.ILog;
import gov.state.nextgen.framework.management.messages.FwMessageList;
import gov.state.nextgen.framework.management.references.IReferenceTableData;
import gov.state.nextgen.framework.management.references.IReferenceTableManager;
import gov.state.nextgen.framework.management.references.ReferenceTableManager;

/**
 * RMCHousingExpenseEJBBean - SessionFacade Object skeleton auto generated -
 * Architecture Team.
 *
 * Creation Date :Tue Feb 06 13:47:45 CST 2007 Modified By: Modified on:
 */

/* ************************************************************************************
 * ***************** SONAR FIXES MADE IN THIS CODE
 * ************************************** ISSUE DESCRIPTION NATURE OF FIX DATE
 * **** ================== ============= **** **** Avoid commented code Deleted
 * Commented code 09/1/2015 ** Lage Blocks of commented code *** are converted
 * to javadoc *** **
 * *************************************************************
 * *************************
 */

@javax.ejb.Stateless
@javax.ejb.LocalBean
@javax.ejb.TransactionManagement(javax.ejb.TransactionManagementType.CONTAINER)
public class RMCHousingExpenseEJBBean extends RMCSessionBean {

	@EJB
	private RMCHousingExpenseEJBBean rmcHousingExpenseEJBBean;
	/**
	 * Constructor.
	 */
	public RMCHousingExpenseEJBBean() {
	}

	/**
	 * sets the session context for transacion handling.
	 * @param sessionContext the session context
	 */

	
	public void setSessionContext(SessionContext sessionContext){
		ctx=sessionContext;
	}
	public void loadDependentCareExpensesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadDependentCareExpensesDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadDependentCareExpensesDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;

			// you'll get the value for Seq
			APP_IN_DC_E_Collection rmcDCEColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile,
							getDependentCareExpTypes())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.DEPENDENT_CARE_EXPENSES);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile,
							getDependentCareExpTypes())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.DEPENDENT_CARE_EXPENSES);
			}

			final ABDependentCareBO dependentCareExpBo = new ABDependentCareBO();
			final short[] responseType = new short[] { IRMCResponseProfileManager.DEPENDENT_CARE };
			SortedSet dependentCareExpProfile = null;
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			if (!pageId.equals(previousPageId)) {
				dependentCareExpProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl, responseType);

				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					APP_IN_DC_E_Collection newDCEColl = dependentCareExpBo
							.loadDependentCareDetails(appNumber);
					newDCEColl = dependentCareExpBo.splitDCExpColl(newDCEColl,
							AppConstants.RMC_NEW_RECORD_IND);
					if (newDCEColl != null && !newDCEColl.isEmpty()) {
						APP_IN_DC_E_Cargo rmcDCECargo = null;
						final int newHouseCollSize = newDCEColl.size();
						for (int i = 0; i < newHouseCollSize; i++) {
							rmcDCECargo = newDCEColl.getResult(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									dependentCareExpProfile,
									null,
									null,
									Short.parseShort(rmcDCECargo
											.getIndv_seq_num()),
											Short.parseShort(rmcDCECargo
													.getSeq_num()),
													AppConstants.DEPENDENT_CARE_EXPENSES);
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(dependentCareExpProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(dependentCareExpProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				dependentCareExpProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("DependentCareExp_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								dependentCareExpProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());

				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(dependentCareExpProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}

					categorySelectionProfileManager.makeSequenceDetailRequired(
							dependentCareExpProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						rmcResponseProfileManager.makeAddNew(
								IRMCResponseProfileManager.DEPENDENT_CARE,
								rmcInPrflCargo, true);
						// Not needed for Room and Board
						categorySelectionProfileManager
						.insertSequenceDetail(dependentCareExpProfile,
								null, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(dependentCareExpProfile,
								null,
								AppConstants.MEDICARE_INFORMATION,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								dependentCareExpProfile, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.DEPENDENT_CARE_EXPENSES,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}

				session.put("DependentCareExp_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					dependentCareExpProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(dependentCareExpProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(dependentCareExpProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			pageCollection.put("END_PAGE_IND",
					String.valueOf(categorySeqDetail.getUserEndSelectionInd()));

			rmcDCEColl = dependentCareExpBo.loadIndividualDependentCareDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection
			.put("DEPENDENT_CARE_EXPENSES_Collection", rmcDCEColl);

			APP_IN_DC_E_Cargo cwwDCECargo = dependentCareExpBo.splitDCExplColl(
					rmcDCEColl, AppConstants.CWW_RECORD_IND);

			if (cwwDCECargo == null) {
				cwwDCECargo = new APP_IN_DC_E_Cargo();
			}

			pageCollection.put("SEC_DCEXP",
					dependentCareExpBo.settingDefaultValues(cwwDCECargo));

			APP_IN_DC_E_Cargo rmcDCECargo = dependentCareExpBo.splitDCExplColl(
					rmcDCEColl, AppConstants.RMC_NEW_RECORD_IND);

			if (rmcDCECargo != null) {
				pageCollection.put("FST_DCEXP",
						dependentCareExpBo.settingDefaultValues(rmcDCECargo));
			} else {
				rmcDCECargo = dependentCareExpBo.splitDCExplColl(rmcDCEColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcDCECargo != null) {
					pageCollection.put("FST_DCEXP", dependentCareExpBo
							.settingDefaultValues(rmcDCECargo));
				} else {
					rmcDCECargo = dependentCareExpBo.splitDCExplColl(
							rmcDCEColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcDCECargo != null) {
						pageCollection.put("FST_DCEXP", dependentCareExpBo
								.settingDefaultValues(rmcDCECargo));
					} else {
						pageCollection.put("FST_DCEXP", dependentCareExpBo
								.settingDefaultValues(cwwDCECargo));

					}
				}
			}
			if (rmcDCEColl != null && !rmcDCEColl.isEmpty()) {
				final APP_IN_DC_E_Cargo appInDCExpCargo = rmcDCEColl
						.getResult(0);
				srcAppInd = appInDCExpCargo.getSrc_app_ind();
			}

			if (rmcDCEColl != null && !rmcDCEColl.isEmpty()) {
				final APP_IN_DC_E_Cargo appInSelfeCargo = rmcDCEColl
						.getResult(0);
				srcAppInd = appInSelfeCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}

			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("DEPENDENT_CARE", categoryType);

			// set first name to page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			final INDIVIDUAL_Custom_Collection indvCustCollection = peopleHandler
					.getInHomeIndividuals();
			final INDIVIDUAL_Custom_Cargo[] indvArray = indvCustCollection
					.getResults();

			Arrays.sort(indvArray, new Comparator() {
				@Override
				public int compare(final Object o1, final Object o2) {
					final INDIVIDUAL_Custom_Cargo c1 = (INDIVIDUAL_Custom_Cargo) o1;
					final INDIVIDUAL_Custom_Cargo c2 = (INDIVIDUAL_Custom_Cargo) o2;
					final Double score1 = new Double(c1.getIndv_seq_num());
					final Double score2 = new Double(c2.getIndv_seq_num());
					return score1.compareTo(score2);
				}
			});

			indvCustCollection.setResults(indvArray);
			pageCollection.put(AppConstants.INDIVIDUAL_CUSTOM_COLL,
					indvCustCollection);
			final INDIVIDUAL_Custom_Collection indvColl = new INDIVIDUAL_Custom_Collection();
			final int collSize = indvCustCollection != null ? indvCustCollection
					.size() : 0;
					for (int i = 0; i < collSize; i++) {
						final INDIVIDUAL_Custom_Cargo cargo = indvCustCollection
								.getResult(i);
						if (!cargo.getIndv_seq_num().equals(
								String.valueOf(categorySeqDetail
										.getIndividualSequence()))) {
							indvColl.addCargo(cargo);
						}
					}

					String showLoopingQuestionFlag = FwConstants.YES;

					char typeStatus = 'N';
					typeStatus = categorySeqDetail.getStatus();
					if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
							|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
						showLoopingQuestionFlag = FwConstants.NO;

					}

					pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
					pageCollection.put("INDV_COLL", indvColl);

					// run component manager
					componentManager.getComponents("ARDCD", txnBean);

					pageCollection.put("APP_IN_DC_E_Collection", rmcDCEColl);
					// Add the page collection to before collection
					session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

					log(ILog.INFO,
							"RMCHousingExpenseEJBBean::loadDependentCareExpensesDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadDependentCareExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadDependentCareExpensesDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadDependentCareExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadDependentCareExpensesDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadDependentCareExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * PCR# 40362 RMB Changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException             subramu : This method stores Dependent Care expense page
	 *             details
	 */

	public void storeDependentCareExpensesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeDependentCareExpensesDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeDependentCareExpensesDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");
			session.remove("DependentCareExp_IndSeqBean");
			final SortedSet inDCExpProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);

			final APP_IN_DC_E_Collection rmcInDCExpCollection = (APP_IN_DC_E_Collection) pageCollection
					.get("APP_IN_DC_E_Collection");
			APP_IN_DC_E_Cargo rmcInDCExpCargo = rmcInDCExpCollection
					.getResult(0);

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(inDCExpProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final ABDependentCareBO inDCExpenseBO = new ABDependentCareBO();

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {
				inDCExpenseBO.validateARDCDPageContents(rmcInDCExpCargo,
						userEndInd, pageMode);
			}

			if (checkBackToMyAccessSelected(request)
					|| inDCExpenseBO.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							inDCExpenseBO.getMessageList());
				}
				if (rmcInDCExpCargo.getPrvd_in_seq_num() == null
						|| rmcInDCExpCargo.getPrvd_in_seq_num().equals(
								AppConstants.SELECT_DEFAULT_OPTION)) {

					rmcInDCExpCargo.setPrvd_in_seq_num(FwConstants.ZERO);
				}

				pageCollection.put("DEPENDENT_CARE",
						beforeColl.get("DEPENDENT_CARE"));
				pageCollection.put("DEPENDENT_CARE_EXPENSES_Collection",
						rmcInDCExpCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));

				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_DCEXP")) {
					pageCollection
					.put("SEC_DCEXP", beforeColl.get("SEC_DCEXP"));
				}

				if (beforeColl.containsKey("INDV_COLL")) {
					pageCollection
					.put("INDV_COLL", beforeColl.get("INDV_COLL"));
				}

				pageCollection.put("FST_DCEXP", rmcInDCExpCargo);
				return;
			}

			final APP_IN_DC_E_Collection beforeCollRmcInDCExpColl = (APP_IN_DC_E_Collection) beforeColl
					.get("APP_IN_DC_E_Collection");
			APP_IN_DC_E_Cargo beforeInDCExpCargo = null;

			rmcInDCExpCargo.setApp_num(appNumber);

			if (rmcInDCExpCargo.getChg_eff_dt() == null
					|| rmcInDCExpCargo.getChg_eff_dt().trim().length() == 0) {
				rmcInDCExpCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {
				rmcInDCExpCargo.setChg_eff_dt(displayFormatter
						.getYYYYMMDDDate(rmcInDCExpCargo.getChg_eff_dt()));
			}

			if (rmcInDCExpCargo.getSeq_num() == null) {

				rmcInDCExpCargo.setSeq_num(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setSeq_num(rmcInDCExpCargo.getSeq_num());
			}

			if (rmcInDCExpCargo.getDpnd_care_exp_ind() == null
					|| rmcInDCExpCargo.getDpnd_care_exp_ind().trim().length() == 0) {
				if (rmcInDCExpCargo.getDpnd_care_exp_amt() == null
						|| rmcInDCExpCargo.getDpnd_care_exp_amt().trim()
						.length() == 0) {
					rmcInDCExpCargo.setDpnd_care_exp_amt("0.00");
					rmcInDCExpCargo.setDpnd_care_exp_ind("2");
				} else {
					rmcInDCExpCargo.setDpnd_care_exp_ind(FwConstants.ZERO);
				}
			} else {
				if (rmcInDCExpCargo.getDpnd_care_exp_amt() == null
						|| rmcInDCExpCargo.getDpnd_care_exp_amt().trim()
						.length() == 0) {
					rmcInDCExpCargo.setDpnd_care_exp_amt("0.00");
				} else {
					pageCollection.put("ExpAmtAndIndChecked", FwConstants.ONE);
				}
			}

			if (rmcInDCExpCargo.getDpnd_exp_paid_ind() == null
					|| rmcInDCExpCargo.getDpnd_exp_paid_ind().trim().length() == 0) {

				if (rmcInDCExpCargo.getDpnd_exp_paid_amt() == null
						|| rmcInDCExpCargo.getDpnd_exp_paid_amt().trim()
						.length() == 0) {
					rmcInDCExpCargo.setDpnd_exp_paid_amt("0.00");
					rmcInDCExpCargo.setDpnd_exp_paid_ind("2");
				} else {
					rmcInDCExpCargo.setDpnd_exp_paid_ind(FwConstants.ZERO);
				}
			} else {
				if (rmcInDCExpCargo.getDpnd_exp_paid_amt() == null
						|| rmcInDCExpCargo.getDpnd_exp_paid_amt().trim()
						.length() == 0) {
					rmcInDCExpCargo.setDpnd_exp_paid_amt("0.00");
				} else {
					pageCollection.put("PaidAmtAndIndChecked", FwConstants.ONE);
				}
			}

			if (rmcInDCExpCargo.getPaid_in_seq_num() == null) {

				rmcInDCExpCargo.setPaid_in_seq_num(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setPaid_in_seq_num(rmcInDCExpCargo
						.getPaid_in_seq_num());
			}

			if (rmcInDCExpCargo.getPrvd_fst_nam() == null) {

				rmcInDCExpCargo.setPrvd_fst_nam(FwConstants.SPACE);
			} else {
				rmcInDCExpCargo.setPrvd_fst_nam(rmcInDCExpCargo
						.getPrvd_fst_nam());
			}

			if (rmcInDCExpCargo.getPrvd_last_nam() == null) {

				rmcInDCExpCargo.setPrvd_last_nam(FwConstants.SPACE);
			} else {
				rmcInDCExpCargo.setPrvd_last_nam(rmcInDCExpCargo
						.getPrvd_last_nam());
			}

			if (rmcInDCExpCargo.getPrvd_in_seq_num() == null
					|| rmcInDCExpCargo.getPrvd_in_seq_num().equals(
							AppConstants.SELECT_DEFAULT_OPTION)) {

				rmcInDCExpCargo.setPrvd_in_seq_num(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setPrvd_in_seq_num(rmcInDCExpCargo
						.getPrvd_in_seq_num());
			}

			if (rmcInDCExpCargo.getPrvd_nam_ind() == null) {

				rmcInDCExpCargo.setPrvd_nam_ind(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setPrvd_nam_ind(rmcInDCExpCargo
						.getPrvd_nam_ind());
			}

			if (rmcInDCExpCargo.getPrvd_nam_org_ind() == null) {

				rmcInDCExpCargo.setPrvd_nam_org_ind(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setPrvd_nam_org_ind(rmcInDCExpCargo
						.getPrvd_nam_org_ind());
			}

			if (rmcInDCExpCargo.getPrvd_org_nam() == null) {

				rmcInDCExpCargo.setPrvd_org_nam(FwConstants.SPACE);
			} else {
				rmcInDCExpCargo.setPrvd_org_nam(rmcInDCExpCargo
						.getPrvd_org_nam());
			}

			if (rmcInDCExpCargo.getPrvd_typ() == null) {

				rmcInDCExpCargo.setPrvd_typ(FwConstants.SPACE);
			} else {
				rmcInDCExpCargo.setPrvd_typ(rmcInDCExpCargo.getPrvd_typ());
			}

			if (rmcInDCExpCargo.getRec_cplt_ind() == null) {

				rmcInDCExpCargo.setRec_cplt_ind(FwConstants.ZERO);
			} else {
				rmcInDCExpCargo.setRec_cplt_ind(rmcInDCExpCargo
						.getRec_cplt_ind());
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			long seqNum = 0;
			boolean inDCExpDetailsUpdate = false;

			if (beforeCollRmcInDCExpColl != null
					&& !beforeCollRmcInDCExpColl.isEmpty()) {

				final int size = beforeCollRmcInDCExpColl.size();
				seqNum = categorySeqDetailBean.getCategorySequence();

				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeInDCExpCargo = inDCExpenseBO.splitDCExplColl(
						beforeCollRmcInDCExpColl, sourceAppIndicator);
				if (beforeInDCExpCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeInDCExpCargo = inDCExpenseBO.splitDCExplColl(
							beforeCollRmcInDCExpColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeInDCExpCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeInDCExpCargo != null) {
					rmcInDCExpCargo.setSrc_app_ind(beforeInDCExpCargo
							.getSrc_app_ind());
					rmcInDCExpCargo.setIndv_seq_num(beforeInDCExpCargo
							.getIndv_seq_num());
					rmcInDCExpCargo.setSeq_num(beforeInDCExpCargo.getSeq_num());
					rmcInDCExpCargo.setRec_cplt_ind(beforeInDCExpCargo
							.getRec_cplt_ind());

					if (rmcInDCExpCargo.getDpnd_exp_paid_amt() == null) {
						rmcInDCExpCargo.setDpnd_exp_paid_amt(beforeInDCExpCargo
								.getDpnd_exp_paid_amt());
					}

					if (rmcInDCExpCargo.getPaid_in_seq_num() == null
							|| rmcInDCExpCargo.getPaid_in_seq_num().equals(
									FwConstants.ZERO)
									&& !rmcInDCExpCargo.getPaid_in_seq_num().equals(
											beforeInDCExpCargo.getPaid_in_seq_num())) {

						rmcInDCExpCargo.setPaid_in_seq_num(beforeInDCExpCargo
								.getPaid_in_seq_num());
					}

					if (rmcInDCExpCargo.getPrvd_fst_nam() == null
							|| rmcInDCExpCargo.getPrvd_fst_nam().equals(
									FwConstants.SPACE)) {

						rmcInDCExpCargo.setPrvd_fst_nam(beforeInDCExpCargo
								.getPrvd_fst_nam());
					}

					if (rmcInDCExpCargo.getPrvd_last_nam() == null
							|| rmcInDCExpCargo.getPrvd_last_nam().equals(
									FwConstants.SPACE)) {

						rmcInDCExpCargo.setPrvd_last_nam(beforeInDCExpCargo
								.getPrvd_last_nam());
					}

					if (!rmcInDCExpCargo.getPrvd_nam_ind().equals(
							FwConstants.ZERO)
							&& !beforeInDCExpCargo.getPrvd_nam_ind().equals(
									FwConstants.ZERO)) {

						rmcInDCExpCargo.setPrvd_nam_ind(beforeInDCExpCargo
								.getPrvd_nam_ind());
					}

					if (!rmcInDCExpCargo.getPrvd_nam_org_ind().equals(
							FwConstants.ZERO)
							&& !beforeInDCExpCargo.getPrvd_nam_org_ind()
							.equals(FwConstants.ZERO)) {

						rmcInDCExpCargo.setPrvd_nam_org_ind(beforeInDCExpCargo
								.getPrvd_nam_org_ind());
					}

					if (rmcInDCExpCargo.getPrvd_org_nam() == null
							|| rmcInDCExpCargo.getPrvd_org_nam().equals(
									FwConstants.SPACE)) {
						rmcInDCExpCargo.setPrvd_org_nam(beforeInDCExpCargo
								.getPrvd_org_nam());
					}

					if (rmcInDCExpCargo.getPrvd_typ() == null
							|| rmcInDCExpCargo.getPrvd_typ().equals(
									FwConstants.SPACE)) {

						rmcInDCExpCargo.setPrvd_typ(beforeInDCExpCargo
								.getPrvd_typ());
					}

				}

				if ("E".equalsIgnoreCase(pageMode)) {
					rmcInDCExpCargo.setDpnd_care_exp_amt(beforeInDCExpCargo
							.getDpnd_care_exp_amt());
					rmcInDCExpCargo.setDpnd_care_exp_ind(beforeInDCExpCargo
							.getDpnd_care_exp_ind());
					rmcInDCExpCargo.setDpnd_exp_paid_amt(beforeInDCExpCargo
							.getDpnd_exp_paid_amt());
					rmcInDCExpCargo.setDpnd_exp_paid_ind(beforeInDCExpCargo
							.getDpnd_exp_paid_ind());
					rmcInDCExpCargo.setPrvd_in_seq_num(beforeInDCExpCargo
							.getPrvd_in_seq_num());
				}

				final String changeEffDate = rmcInDCExpCargo.getChg_eff_dt();
				if (true && rmcInDCExpCargo.getChg_eff_dt().trim().length() == 0) {
					rmcInDCExpCargo.setChg_eff_dt(beforeInDCExpCargo
							.getChg_eff_dt());
				}

				// check dirty
				rmcInDCExpCargo = (APP_IN_DC_E_Cargo) isChanged(
						beforeInDCExpCargo, rmcInDCExpCargo);
				rmcInDCExpCargo.setChg_eff_dt(changeEffDate);
				rmcInDCExpCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInDCExpCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInDCExpCargo.setRowAction(recordInd);
				if (rmcInDCExpCargo.isDirty()) {
					if ("C".equalsIgnoreCase(pageMode)) {
						inDCExpenseBO.validateChangeEffectiveDate(
								changeEffDate, pageMode);

						if (inDCExpenseBO.hasMessages()) {
							request.put(FwConstants.MESSAGE_LIST,
									inDCExpenseBO.getMessageList());
							pageCollection.put("DEPENDENT_CARE",
									beforeColl.get("DEPENDENT_CARE"));
							pageCollection.put(
									"DEPENDENT_CARE_EXPENSES_Collection",
									rmcInDCExpCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));

							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection.put("showLoopingQuestion",
									beforeColl.get("showLoopingQuestion"));
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));

							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_DCEXP")) {
								pageCollection.put("SEC_DCEXP",
										beforeColl.get("SEC_DCEXP"));
							}

							if (beforeColl.containsKey("INDV_COLL")) {
								pageCollection.put("INDV_COLL",
										beforeColl.get("INDV_COLL"));
							}

							pageCollection.put("FST_DCEXP", rmcInDCExpCargo);
							return;

						}
					}
					inDCExpDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInDCExpCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));

				// get the MAX seq number from data base
				seqNum = inDCExpenseBO
						.getMaxDCESeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcInDCExpCargo.setSeq_num(String.valueOf(seqNum));
				rmcInDCExpCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInDCExpCargo.setRowAction(recordInd);
				inDCExpDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(inDCExpProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());

			}

			// now we need to check the flags
			if (inDCExpDetailsUpdate) {

				// check for the change effective date
				// if they did't fill this one raise validation
				if (!sourceAppIndicator.equals(AppConstants.RMC_NEW_RECORD_IND)
						&& rmcInDCExpCargo.getChg_eff_dt().equals(
								AppConstants.HIGH_DATE)) {
					inDCExpenseBO.validateChangeEffectiveDate(
							rmcInDCExpCargo.getChg_eff_dt(), pageMode);
					if (inDCExpenseBO.hasMessages()) {
						final String reqWarningMsgs = (String) request
								.get(FwConstants.WARNING_MSG_DETAILS);
						if (!checkForWarningMesgs(reqWarningMsgs,
								inDCExpenseBO.getMessageList())) {
							request.put(FwConstants.MESSAGE_LIST,
									inDCExpenseBO.getMessageList());
							pageCollection.put("DEPENDENT_CARE",
									beforeColl.get("DEPENDENT_CARE"));
							pageCollection.put(
									"DEPENDENT_CARE_EXPENSES_Collection",
									rmcInDCExpCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));

							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));

							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));

							if (beforeColl.containsKey("SEC_DCEXP")) {
								pageCollection.put("SEC_DCEXP",
										beforeColl.get("SEC_DCEXP"));
							}

							if (beforeColl.containsKey("INDV_COLL")) {
								pageCollection.put("INDV_COLL",
										beforeColl.get("INDV_COLL"));
							}

							pageCollection.put("FST_DCEXP", rmcInDCExpCargo);
							return;
						}
					}
				}
			}

			if (inDCExpDetailsUpdate) {
				if (rmcInDCExpCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					inDCExpenseBO.insertDpndCExpDetails(rmcInDCExpCollection);
				} else {
					inDCExpenseBO.storeDpndCExpDetails(rmcInDCExpCollection);
				}
			}

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						inDCExpProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARDCD",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.DEPENDENT_CARE,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					inDCExpProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(inDCExpProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(inDCExpProfile);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeDependentCareExpensesDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeDependentCareExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeDependentCareExpensesDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeDependentCareExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeDependentCareExpensesDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeDependentCareExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To load Expense change selection page.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadHousingUtilIndvSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilIndvSelection() - START");
		try {
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();

			final INDIVIDUAL_Custom_Collection filteredIndvCustomColl = new INDIVIDUAL_Custom_Collection();
			final int size = indvColl.size();
			for (int i = 0; i < size; i++) {
				final INDIVIDUAL_Custom_Cargo indivCustomCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);

				filteredIndvCustomColl.add(indivCustomCargo);
			}

			// Getting language from http session
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);
			final String jsEnabled = (String) httpSessionMap
					.get(FwConstants.JS_ENABLED);

			final String aAppNum = (String) session
					.get(AppConstants.APP_NUMBER);

			final String applicationType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final char appType = applicationType.charAt(0);
			final ABHousingBillsBO houseBillsBO = new ABHousingBillsBO();
			final UtilityCostsBO utilityBillsBO = new UtilityCostsBO();
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			final INDIVIDUAL_Custom_Collection indvSortedCustColl = null;
			// Extraction Changes Starts

			final APP_IN_HOU_BILLS_Collection shltcColl = houseBillsBO
					.loadShelterDetails(aAppNum);
			// Utility Listview
			final APP_IN_UTILC_Collection utilcColl = utilityBillsBO
					.getListViewData(aAppNum);

			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 4 lines Commented Code in
			 * this block
			 */

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean loadCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is housing/utility
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& ((AppConstants.RMC_CAT_HO_EXP_PRFL).equalsIgnoreCase(catSeqDetail.getChangeSelectionCategoryCd()) 
							        || (AppConstants.RMC_CAT_UT_EXP_PRFL).equalsIgnoreCase(catSeqDetail.getChangeSelectionCategoryCd()))) {
						loadCatSelProfile = false;
					} else {
						loadCatSelProfile = true;
					}
				}
			}
			// now loading the cat selection profile form the data base
			if (loadCatSelProfile) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_HO_EXP_PRFL + "'" + "," + "'"
						+ AppConstants.RMC_CAT_UT_EXP_PRFL + "'";

				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								aAppNum, categoryCodes);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						selectionProfile);
			}

			// Getting RMC_IN_PROFILE from session

			final int indvSize = indvColl.size();
			INDIVIDUAL_Custom_Cargo headOfHouse = new INDIVIDUAL_Custom_Cargo();
			final INDIVIDUAL_Custom_Collection hsInd = new INDIVIDUAL_Custom_Collection();
			for (int i = 0; i < indvSize; i++) {
				if (FwConstants.ONE.equals(((INDIVIDUAL_Custom_Cargo) indvColl
						.get(i)).getIndv_seq_num())) {
					headOfHouse = (INDIVIDUAL_Custom_Cargo) indvColl.get(i);
					hsInd.add(headOfHouse);
					break;
				}
			}
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final List houseDataList = new ArrayList(7);
			houseDataList.add(shltcColl);
			houseDataList.add(filteredIndvCustomColl);
			houseDataList.add(selectionProfile);
			houseDataList.add(rmcInPrflColl);
			houseDataList.add(indvNameMap);
			houseDataList.add(driverStatus);

			final RMBHouseBillsIndvSelectionListView rmbHouseBillsIndvSelectionListView = new RMBHouseBillsIndvSelectionListView();
			rmbHouseBillsIndvSelectionListView.setLanguage(language);
			rmbHouseBillsIndvSelectionListView.setJsEnabled(jsEnabled);
			rmbHouseBillsIndvSelectionListView
			.setCollection(indvSortedCustColl);
			rmbHouseBillsIndvSelectionListView.setAppType(appType);
			rmbHouseBillsIndvSelectionListView.setDisplayData(houseDataList);
			rmbHouseBillsIndvSelectionListView.setPageSize(1000);
			pageCollection
			.put("HOUSEBILLS", rmbHouseBillsIndvSelectionListView);
			pageCollection.put("HOUSING_BILL", shltcColl);

			final List utilityDataList = new ArrayList(14);
			utilityDataList.add(utilcColl);
			utilityDataList.add(filteredIndvCustomColl);
			utilityDataList.add(selectionProfile);
			utilityDataList.add(rmcInPrflColl);
			utilityDataList.add(indvNameMap);
			utilityDataList.add(driverStatus);
			utilityDataList.add(hsInd);

			final RMBUtilityBillsIndvSelectionListView rmbUtilityBillsIndvSelectionListView = new RMBUtilityBillsIndvSelectionListView();
			rmbUtilityBillsIndvSelectionListView.setLanguage(language);
			rmbUtilityBillsIndvSelectionListView.setJsEnabled(jsEnabled);
			rmbUtilityBillsIndvSelectionListView
			.setCollection(indvSortedCustColl);
			rmbUtilityBillsIndvSelectionListView.setAppType(appType);
			rmbUtilityBillsIndvSelectionListView
			.setDisplayData(utilityDataList);
			rmbUtilityBillsIndvSelectionListView.setPageSize(1000);
			pageCollection.put("UTILITYBILLS",
					rmbUtilityBillsIndvSelectionListView);
			pageCollection.put("UTILITY_BILL", utilcColl);

			pageCollection.put("INDIVIDUAL_BILL", indvNameMap);
			
			final ABHousingBillsBO housingBillsDetailsBO = new ABHousingBillsBO();
			final APP_IN_UTILC_Collection heatSrcColl = housingBillsDetailsBO.loadUtilityDetails(
					(String) session.get(AppConstants.APP_NUMBER));
			
			APP_IN_UTILC_Cargo heatCoolCargo = null;
			if(heatSrcColl.size()>1){
				for (Object heatCoolCargoObj : heatSrcColl) {
					APP_IN_UTILC_Cargo heatCargo = (APP_IN_UTILC_Cargo) heatCoolCargoObj;
					if(heatCargo.getSrc_app_ind().equals(AppConstants.CWW_RECORD_IND)){
						heatCoolCargo = heatCargo;
					}
				}
			} else if(heatSrcColl.size() == 1){
				heatCoolCargo = heatSrcColl.getCargo(0);
			} else {
				heatCoolCargo = new APP_IN_UTILC_Cargo();
			}
			
			
			short[] utilResponseArray = new short[]{
					IRMCResponseProfileManager.HEAT_COOL_SRC
			};
			if(null != heatCoolCargo.getHeat_cool_src()){
				String[] utilValueArray = new String[] {heatCoolCargo.getHeat_cool_src()};
				for(int i=0; i<rmcInPrflColl.size(); i++){
					if(AppConstants.ONE.equals(rmcInPrflColl.getCargo(i).getIndv_seq_num())){
						rmcInPrflColl.getCargo(i).setHeat_cool_src(heatCoolCargo.getHeat_cool_src());
					}
				}
				
				rmcResponseProfileManager.persist(aAppNum, AppConstants.ONE, utilResponseArray, utilValueArray);
			}
									
			RMC_IN_PRFL_Cargo aCargo = null;
			RMC_IN_PRFL_Collection aColl = new RMC_IN_PRFL_Collection();
			for(int i =0; i<rmcInPrflColl.size(); i++){
				aCargo = rmcInPrflColl.getCargo(i);
				if(AppConstants.ONE.equals(aCargo.getIndv_seq_num())){
					aColl.addCargo(aCargo);
				}
			}
			
			pageCollection.put("RMC_IN_PRFL_Collection", aColl);

			txnBean.setPageCollection(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHousingUtilIndvSelection");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilIndvSelection");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHousingUtilIndvSelection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilIndvSelection");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilIndvSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHousingUtilIndvSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilIndvSelection() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 2 lines Commented Code in
			 * this block
			 */
			/*final APP_IN_UTILC_Collection appInUtilColl = (APP_IN_UTILC_Collection) pageCollection.get("APP_IN_UTILC_Collection");
			final APP_IN_UTILC_Cargo appInUtilCargo = appInUtilColl.getCargo(0);*/
			// Request Form Values
			final RMC_RESPONSE_Custom_Collection respColl = (RMC_RESPONSE_Custom_Collection) pageCollection
					.get("RMC_RESPONSE_Custom_Collection");
			final RMC_IN_PRFL_Collection  rmcInPrflPageUtilColl = (RMC_IN_PRFL_Collection) pageCollection.get("RMC_IN_PRFL_Collection");
			final RMC_IN_PRFL_Cargo rmcInPrflPageUtilCargo = rmcInPrflPageUtilColl.getCargo(0);

			final AssetBO assetBO = new AssetBO();
			assetBO.formatAssetResponse(respColl);

			short[] responseArray = null;
			responseArray = new short[] {
					IRMCResponseProfileManager.PAY_HOUSING_BILL,
					IRMCResponseProfileManager.UTILITY_EXPENSE };
			short[] utilResponseArray = new short[]{
					IRMCResponseProfileManager.HEAT_COOL_SRC
			};

			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final ABHousingBillsBO houseBillsBO = new ABHousingBillsBO();

			// Response Size
			int size = respColl.size();
			RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
			RMC_IN_PRFL_Collection rmcPrflPageColl = null;
			RMC_IN_PRFL_Cargo rmcPrflSessCargo = null;
			RMC_IN_PRFL_Cargo rmcPrflPageCargo = null;
			String seqNum = null;
			String catType = null;
			String indvSeqNum = null;
			boolean houseChangeSelected = false;
			boolean utilityChangeSelected = false;
			String newTypeIndicatorResp = null;
			boolean houseBillTypeSelected = false;

			// for housing and utility logic
			if (respColl != null && !respColl.isEmpty()) {
				for (int i = 0; i < respColl.size(); i++) {
					final RMC_RESPONSE_Custom_Cargo cargo = respColl
							.getCargo(i);
					if (cargo != null && cargo.getCategoryType() != null) {
						final Map housingMap = getHousingTypes();
						final Map utilityMap = getUtilityTypes();
						getMedicalTypes();
						housingMap.put(AppConstants.RMC_CAT_HO_EXP_PRFL,
								AppConstants.RMC_CAT_HO_EXP_PRFL);
						utilityMap.put(AppConstants.RMC_CAT_UT_EXP_PRFL,
								AppConstants.RMC_CAT_UT_EXP_PRFL);
						if (housingMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								houseChangeSelected = true;
							}

						}
						if (utilityMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								utilityChangeSelected = true;
							}

						}
					}
				}
			}

			final Map assetCollMap = new HashMap();
			assetCollMap.put("APP_IN_HOU_BILLS_Collection",
					beforeColl.get("HOUSING_BILL"));
			assetCollMap.put("APP_IN_UTILC_Collection",
					beforeColl.get("UTILITY_BILL"));
			assetCollMap.put("INDV_COLL", beforeColl.get("INDIVIDUAL_BILL"));

			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			rmcInPrflSessColl = rmcResponseProfileManager.updateSessionProfile(
					respColl, rmcInPrflSessColl, responseArray);

			// Response Size: For every response check if the response is add
			// new
			for (int i = 0; i < size; i++) {

				rmcCustomCargo = respColl.getCargo(i);
				seqNum = rmcCustomCargo.getSeqNum();
				catType = rmcCustomCargo.getCategoryType();
				indvSeqNum = rmcCustomCargo.getIndvSeqNum();
				newTypeIndicatorResp = rmcCustomCargo.getResponse();
				if (seqNum.equals(AppConstants.RMC_ADD_NEW_IND)
						&& !AppConstants.NO.equals(newTypeIndicatorResp)) {
					// If for the cargo the response is add new, create a new
					// RMC_IN_PRFL page collection and Cargo
					if (rmcPrflPageColl != null) {
						rmcPrflPageCargo = rmcResponseProfileManager
								.getProfile(rmcPrflPageColl, indvSeqNum);
					} else {
						rmcPrflPageColl = new RMC_IN_PRFL_Collection();
					}

					if (rmcPrflPageCargo == null) {
						rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflPageCargo.setApp_num(appNum);
						rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
						rmcPrflPageColl.addCargo(rmcPrflPageCargo);
					}

					if (rmcInPrflSessColl != null) {
						rmcPrflSessCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflSessColl, indvSeqNum);
					} else {
						rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflSessCargo == null) {
						rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflSessCargo.setApp_num(appNum);
						rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
						rmcResponseProfileManager
						.createRMCIndividualProfile(rmcPrflSessCargo);
						rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
					}

					if (catType.equals(AppConstants.RMC_CAT_HO_EXP_PRFL)
							&& rmcPrflSessCargo.getPay_hous_bill_resp().charAt(
									0) != IRMCResponseProfileManager.STATUS_COMPLETE) {
						rmcPrflPageCargo.setPay_hous_bill_resp(FwConstants.YES);
						houseBillTypeSelected = true;
					} else if (catType.equals(AppConstants.RMC_CAT_UT_EXP_PRFL)
							&& rmcPrflSessCargo.getUtil_exp_resp().charAt(0) != IRMCResponseProfileManager.STATUS_COMPLETE) {
						rmcPrflPageCargo.setUtil_exp_resp(FwConstants.YES);
					}
					respColl.remove(i);
					size--;
					i--;

				} else if (seqNum.equals(AppConstants.RMC_ADD_NEW_IND)
						&& AppConstants.NO.equals(newTypeIndicatorResp)) {
					// If for the cargo the response is add new, create a new
					// RMC_IN_PRFL page collection and Cargo
					if (rmcPrflPageColl != null) {
						rmcPrflPageCargo = rmcResponseProfileManager
								.getProfile(rmcPrflPageColl, indvSeqNum);
					} else {
						rmcPrflPageColl = new RMC_IN_PRFL_Collection();
					}
					// Set identifiers for the responses of the respective
					// individual
					if (rmcPrflPageCargo == null) {
						rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflPageCargo.setApp_num(appNum);
						rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
						rmcPrflPageColl.addCargo(rmcPrflPageCargo);
					}

					// Do the same for the session RMC_IN_PRFL Collection
					if (rmcInPrflSessColl != null) {
						rmcPrflSessCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflSessColl, indvSeqNum);
					} else {
						rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflSessCargo == null) {
						rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflSessCargo.setApp_num(appNum);
						rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
						rmcResponseProfileManager
						.createRMCIndividualProfile(rmcPrflSessCargo);
						rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
					}
					respColl.remove(i);
					size--;
					i--;
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflSessColl);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvcustColl = peopleHandler
					.getInHomeIndividuals();
			final int indvSize = indvcustColl.size();
			final Map indvMap = new HashMap();

			String reqWarningMsgs = (String) request
					.get(FwConstants.WARNING_MSG_DETAILS);
			if(reqWarningMsgs == null) reqWarningMsgs =""; 
			for (int j = 0; j < indvSize; j++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvcustColl
						.get(j);
				indvMap.put(indvCargo.getIndv_seq_num(), indvCargo.getFst_nam());
			}
			List<String> warningsShown = new ArrayList();
			if (session.get(FwConstants.WARNING_MSG_DETAILS) != null) {
				warningsShown = (ArrayList) session
						.get(FwConstants.WARNING_MSG_DETAILS);
			}
			if (!warningsShown.contains(reqWarningMsgs)) {
				warningsShown.add(reqWarningMsgs);
				session.put(FwConstants.WARNING_MSG_DETAILS, warningsShown);
			}
			for (int i = 0; i < warningsShown.size(); i++) {
				reqWarningMsgs = reqWarningMsgs.concat("~"
						+ warningsShown.get(i));
			}
			
			if (backToMyAccess == null) {
				houseBillsBO.validateHousingBillSelection(respColl,
						assetCollMap, reqWarningMsgs);

			}

			// PCR 30684 - Added warning message when no selection is made
			boolean isWarningMessageShown = false;

			FwMessageList msgList = null;

			if (houseBillsBO.hasMessages()) {
				msgList = houseBillsBO.getMessageList();
				if (reqWarningMsgs != null
						&& reqWarningMsgs.trim().length() > 0) {
					if (reqWarningMsgs.indexOf("30086") > -1) {
						if (checkForWarningMesgs("30086", msgList)) {
							isWarningMessageShown = true;
						}
					}
				}
			}

			if (checkBackToMyAccessSelected(request) || msgList != null
					&& !isWarningMessageShown) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST, msgList);
				}

				if (rmcPrflPageColl != null) {
					rmcResponseProfileManager
					.translateProfileResponseAfterValidation(
							rmcPrflPageColl, rmcInPrflSessColl,
							responseArray);
				}

				if (respColl != null && !respColl.isEmpty()) {
					categorySelectionProfile = categorySelectionProfileManager
							.buildSelectionProfileAfterValidation(
									categorySelectionProfile, respColl);
				}
				INDIVIDUAL_Custom_Collection indvColl = (INDIVIDUAL_Custom_Collection) beforeColl
						.get("INDV_COLL");
				final APP_IN_HOU_BILLS_Collection shltcColl = (APP_IN_HOU_BILLS_Collection) beforeColl
						.get("HOUSING_BILL");
				final APP_IN_UTILC_Collection utilcColl = (APP_IN_UTILC_Collection) beforeColl
						.get("UTILITY_BILL");

				final RMBHouseBillsIndvSelectionListView rmcHouseBillsIndvSelectionListView = (RMBHouseBillsIndvSelectionListView) beforeColl
						.get("HOUSEBILLS");
				final RMBUtilityBillsIndvSelectionListView rmcUtilityBillsIndvSelectionListView = (RMBUtilityBillsIndvSelectionListView) beforeColl
						.get("UTILITYBILLS");
				final INDIVIDUAL_Custom_Collection filteredIndvCustomColl = new INDIVIDUAL_Custom_Collection();
				if (indvColl == null) {
					indvColl = peopleHandler.getInHomeIndividuals();
				}
				final int size1 = indvColl.size();
				for (int i = 0; i < size1; i++) {
					final INDIVIDUAL_Custom_Cargo indivCustomCargo = (INDIVIDUAL_Custom_Cargo) indvColl
							.get(i);

					filteredIndvCustomColl.add(indivCustomCargo);
				}

				final Map indvNameMap = (Map) beforeColl.get("INDIVIDUAL_BILL");
				final List houseDataList = new ArrayList(7);
				houseDataList.add(shltcColl);
				houseDataList.add(indvColl);
				houseDataList.add(categorySelectionProfile);
				houseDataList.add(rmcPrflPageColl);
				houseDataList.add(indvNameMap);
				houseDataList.add(driverStatus);
				final List utilityDataList = new ArrayList(14);
				utilityDataList.add(utilcColl);
				utilityDataList.add(indvColl);
				utilityDataList.add(categorySelectionProfile);
				utilityDataList.add(rmcPrflPageColl);
				utilityDataList.add(indvNameMap);
				utilityDataList.add(driverStatus);
				rmcHouseBillsIndvSelectionListView
				.setDisplayData(houseDataList);
				rmcUtilityBillsIndvSelectionListView
				.setDisplayData(utilityDataList);

				pageCollection.put("HOUSEBILLS",
						rmcHouseBillsIndvSelectionListView);
				pageCollection.put("UTILITYBILLS",
						rmcUtilityBillsIndvSelectionListView);

				pageCollection.put("INDV_COLL", indvColl);
				pageCollection.put("HOUSING_BILL", shltcColl);
				pageCollection.put("UTILITY_BILL", utilcColl);
				
				
				pageCollection.put("RMC_IN_PRFL_Collection", beforeColl.get("RMC_IN_PRFL_Collection"));
				return;

			}

			boolean houseDetailPageRequired = false;
			boolean utilDetailPageRequired = false;
			boolean houseBillTypePageRequired = true;

			if (rmcInPrflSessColl == null) {
				rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
			}
			if (rmcPrflPageColl == null) {
				rmcPrflPageColl = new RMC_IN_PRFL_Collection();
			}

			if (rmcInPrflSessColl != null) {
				// populating missing app in profile collection into page
				// collection for enter key press
				rmcResponseProfileManager.preparePageColl(rmcPrflPageColl,
						rmcInPrflSessColl, responseArray);

				final int rmcInPrflSessCollectionSize = rmcInPrflSessColl
						.size();
				final int rmcInPrflPageCollectionSize = rmcPrflPageColl.size();
				RMC_IN_PRFL_Cargo rmcInPrflPageCargo = null;
				String[] translatedProfileArray = null;
				String indivSeqNum = null;
				final int[] houseDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] utilityDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };

				final Map indvResponseMap = new HashMap();
				final boolean[] dirtyIndicatorArray = new boolean[rmcResponseProfileManager
				                                                  .getMaxIndvSeqNumber(rmcInPrflSessColl) + 1];
				char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
				// Loop for each individual in session app indv profile
				for (int s = 0; s < rmcInPrflSessCollectionSize; s++) {

					final RMC_IN_PRFL_Cargo rmcInPrflSessCargo = rmcInPrflSessColl
							.getCargo(s);
					// Loop for each individual in page collection app indv
					// profile
					for (int p = 0; p < rmcInPrflPageCollectionSize; p++) {
						rmcInPrflPageCargo = rmcPrflPageColl.getCargo(p);
						// Picking up the matching individuals of session app
						// indv profile from page collection app indv profile
						if (rmcInPrflPageCargo.getIndv_seq_num().equals(
								rmcInPrflSessCargo.getIndv_seq_num())) {
							translatedProfileArray = new String[responseArray.length];
							indivSeqNum = rmcInPrflPageCargo.getIndv_seq_num();

							if (applicationManager.determineDirtyStatus(
									rmcInPrflPageCargo.getPay_hous_bill_resp(),
									rmcInPrflSessCargo.getPay_hous_bill_resp(),
									houseDetailDirtyIndicator, driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							if (!rmcInPrflSessCargo
									.getPay_hous_bill_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getPay_hous_bill_resp(),
										rmcInPrflSessCargo
										.getPay_hous_bill_resp(),
										driverStatus,
										IRMCResponseProfileManager.PAY_HOUSING_BILL,
										rmcInPrflSessCargo);

							}

							translatedProfileArray[0] = rmcInPrflSessCargo
									.getPay_hous_bill_resp();
							status = (null != rmcInPrflSessCargo
									.getPay_hous_bill_resp()) ? (rmcInPrflSessCargo
									.getPay_hous_bill_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);

							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								houseBillTypePageRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARXHI",
										driverArray, appNum);
							}
							if (!houseDetailPageRequired) {
								houseDetailPageRequired = isHousingDetailPageRequired(rmcInPrflSessCargo);
							}

							if (!driverManager.getStatus(
									FwConstants.RMC_DRIVER, "ARXHI",
									driverArray).equals(
											IDriver.DRIVER_STATUS_COMPLETE)) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARXHI",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARXHI",
										driverArray, appNum);
							}

							// Utility Bill response check for
							// utilityDetailDirtyIndicator
							if (applicationManager.determineDirtyStatus(
									rmcInPrflPageCargo.getUtil_exp_resp(),
									rmcInPrflSessCargo.getUtil_exp_resp(),
									utilityDetailDirtyIndicator, driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
								// translating page coll app indiv profile
								// values to session app indv profile values
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getUtil_exp_resp(),
										rmcInPrflSessCargo
										.getUtil_exp_resp(),
										driverStatus,
										IRMCResponseProfileManager.UTILITY_EXPENSE,
										rmcInPrflSessCargo);
							}
							translatedProfileArray[1] = rmcInPrflSessCargo
									.getUtil_exp_resp();

							if (!utilDetailPageRequired) {
								utilDetailPageRequired = isUtilityDetailPageRequired(rmcInPrflSessCargo);
							}
							indvResponseMap.put(indivSeqNum,
									translatedProfileArray);

							break;

						}
					}
				}
				// Persistence logic start
				if (dirtyIndicatorArray[0]) {
					String indvSeqNumber = null;
					for (int k = 0; k < rmcInPrflPageCollectionSize; k++) {
						indvSeqNumber = rmcPrflPageColl.getCargo(k)
								.getIndv_seq_num();
						if (dirtyIndicatorArray[Integer.parseInt(indvSeqNumber)]) {
							rmcResponseProfileManager.persist(appNum,
									indvSeqNumber, responseArray,
									(String[]) indvResponseMap
									.get(indvSeqNumber));
						}
					}
				}
			}
			
			if(null != rmcInPrflPageUtilCargo.getHeat_cool_src()){
				String[] utilValueArray = new String[] {rmcInPrflPageUtilCargo.getHeat_cool_src()};
				
				for(int i=0; i<rmcInPrflSessColl.size(); i++){
					if(AppConstants.ONE.equals(rmcInPrflSessColl.getCargo(i).getIndv_seq_num())){
						rmcInPrflSessColl.getCargo(i).setHeat_cool_src(rmcInPrflPageUtilCargo.getHeat_cool_src());
					}
				}
				
				rmcResponseProfileManager.persist(appNum, AppConstants.ONE, utilResponseArray, utilValueArray);
			}
			
			

			// check for RMC_CAT_HO_PRFL & build category selection profile

			if (categorySelectionProfile == null
					|| categorySelectionProfile.isEmpty()) {
				categorySelectionProfile = categorySelectionProfileManager
						.buildSelectionProfile(respColl, appNum);

			} else {
				// updates existing(given) SelectionProfile with the provided
				// new Collection
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_HO_EXP_PRFL);
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_UT_EXP_PRFL);

			}

			// Make category selection (ARCAT) page complete
			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);

			if (houseBillTypePageRequired && houseBillTypeSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHI",
						driverArray, appNum);
			}

			if (houseDetailPageRequired
					|| checkHousingUtilityPageRequired(
							categorySelectionProfile, getHousingTypes(),
							AppConstants.RMC_CAT_HO_EXP_PRFL)) {

				if ((houseDetailPageRequired || !categorySelectionProfileManager
						.areAllSequencesComplete(categorySelectionProfile,
								getHousingTypes()))
								&& houseChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXHD",
							driverArray, appNum);
				}
			} else {
				if (!driverManager.getStatus(FwConstants.RMC_DRIVER, "ARXHD",
						driverArray).equals(IDriver.DRIVER_STATUS_COMPLETE)
						&& !driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARXHD", driverArray).equals(
										IDriver.DRIVER_STATUS_VISIT_AGAIN)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARXHD", driverArray, appNum);
				} else if (driverManager.getStatus(FwConstants.RMC_DRIVER,
						"ARXHD", driverArray).equals(
								IDriver.DRIVER_STATUS_VISIT_AGAIN)) {
					if (!houseDetailPageRequired
							&& categorySelectionProfileManager
							.areAllSequencesComplete(
									categorySelectionProfile,
									getHousingTypes())) {
						driverManager.makeComplete(FwConstants.RMC_DRIVER,
								"ARXHD", driverArray, appNum);
					}

				}
			}

			if (utilDetailPageRequired
					|| checkHousingUtilityPageRequired(
							categorySelectionProfile, getUtilityTypes(),
							AppConstants.RMC_CAT_UT_EXP_PRFL)) {
				if ((utilDetailPageRequired || !categorySelectionProfileManager
						.areAllSequencesComplete(categorySelectionProfile,
								getUtilityTypes()))
								&& utilityChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXUD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXUD",
							driverArray, appNum);
				}
			} else {
				if (!driverManager.getStatus(FwConstants.RMC_DRIVER, "ARXUD",
						driverArray).equals(IDriver.DRIVER_STATUS_COMPLETE)
						&& !driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARXUD", driverArray).equals(
										IDriver.DRIVER_STATUS_VISIT_AGAIN)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARXUD", driverArray, appNum);
				} else if (driverManager.getStatus(FwConstants.RMC_DRIVER,
						"ARXUD", driverArray).equals(
								IDriver.DRIVER_STATUS_VISIT_AGAIN)) {
					if (!utilDetailPageRequired
							&& categorySelectionProfileManager
							.areAllSequencesComplete(
									categorySelectionProfile,
									getUtilityTypes())) {
						driverManager.makeComplete(FwConstants.RMC_DRIVER,
								"ARXUD", driverArray, appNum);
					}

				}
			}
			/*final ABHousingBillsBO abHousingBillsBo = new ABHousingBillsBO();
			if(null!=appInUtilCargo && null != appInUtilCargo.getHeat_cool_src() && !appInUtilCargo.getHeat_cool_src().equals(AppConstants.SEL)){
				APP_IN_UTILC_Collection aColl = abHousingBillsBo.loadUtilityDetails(appNum);
				APP_IN_UTILC_Cargo aCargo = null;
				APP_IN_UTILC_Collection persistColl = new APP_IN_UTILC_Collection();
				if(!aColl.isEmpty()){
					if(aColl.size() > 1){
						for(int i=0; i<aColl.size(); i++){
							if(aColl.getCargo(i).getSrc_app_ind().equals(AppConstants.RMC_MODIFIED_RECORD_IND)){
								aCargo = aColl.getCargo(i);
							}
						}
						aCargo.setHeat_cool_src(appInUtilCargo.getHeat_cool_src());	
						aCargo.setChg_eff_dt(AppConstants.HIGH_DATE);							
						aCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						persistColl.addCargo(aCargo);
						abHousingBillsBo.storeUtilityCostDetails(persistColl);
						
					} else if (aColl.size() == 1){
						aCargo = aColl.getCargo(0);
						aCargo.setHeat_cool_src(appInUtilCargo.getHeat_cool_src());	
						aCargo.setChg_eff_dt(AppConstants.HIGH_DATE);	
						aCargo.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						aCargo.setRowAction(FwConstants.ROWACTION_INSERT);
						persistColl.addCargo(aCargo);
						abHousingBillsBo.storeUtilityCostDetails(persistColl);
					}
				} else {
					aCargo = new APP_IN_UTILC_Cargo();
					aCargo.setApp_num(appNum);
					aCargo.setSrc_app_ind(AppConstants.RMC_NEW_RECORD_IND);
					aCargo.setIndv_seq_num(FwConstants.ONE);
					aCargo.setHeat_cool_src(appInUtilCargo.getHeat_cool_src());
					aCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
					aCargo.setMo_oblg_ind("1");
					aCargo.setUtil_typ("UT");
					aCargo.setUtil_total_amt(AppConstants.ZERO);
					aCargo.setRowAction(FwConstants.ROWACTION_INSERT);
					aColl.addCargo(aCargo);
					abHousingBillsBo.storeUtilityCostDetails(aColl);
				}
			}*/
			
			

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Changed Commented code block to
			 * javadoc
			 */
			/**
			 * Commenting the Additional Information section
			 * APP_HOU_BILLS_ADDI_INFO_Collection houBillsAddiInfoBeforeColl =
			 * null; APP_HOU_BILLS_ADDI_INFO_Cargo appHouBillsAddiInfoCargo =
			 * null; APP_HOU_BILLS_ADDI_INFO_Cargo
			 * appHouBillsAddiInfoBeforeCargo = null; Map beforeCollection =
			 * (Map) session.get(FwConstants.BEFORE_COLLECTION);
			 * houBillsAddiInfoBeforeColl = (APP_HOU_BILLS_ADDI_INFO_Collection)
			 * beforeCollection.get("APP_HOU_BILLS_ADDI_INFO_Collection"); if
			 * (beforeCollection != null && !beforeCollection.isEmpty()) { if
			 * (beforeCollection
			 * .containsKey("APP_HOU_BILLS_ADDI_INFO_Collection")) {
			 * houBillsAddiInfoBeforeColl = (APP_HOU_BILLS_ADDI_INFO_Collection)
			 * beforeCollection .get("APP_HOU_BILLS_ADDI_INFO_Collection"); } }
			 * if (houBillsAddiInfoBeforeColl != null &&
			 * !houBillsAddiInfoBeforeColl.isEmpty()) {
			 * appHouBillsAddiInfoBeforeCargo = (APP_HOU_BILLS_ADDI_INFO_Cargo)
			 * houBillsAddiInfoBeforeColl.get(0); } if (pageCollAppAddInfoColl
			 * != null && pageCollAppAddInfoColl.size() > 0) {
			 * appHouBillsAddiInfoCargo = (APP_HOU_BILLS_ADDI_INFO_Cargo)
			 * pageCollAppAddInfoColl.get(0); }
			 *
			 * appHouBillsAddiInfoCargo.setApp_num(appNum);
			 * appHouBillsAddiInfoCargo.setIndv_seq_num(FwConstants.ONE);
			 * appHouBillsAddiInfoCargo.setSrc_app_ind("AB");
			 *
			 * if (appHouBillsAddiInfoCargo.getPub_hsa_rcv_pay_own_bill_ind() ==
			 * null ||
			 * appHouBillsAddiInfoCargo.getPub_hsa_rcv_pay_own_bill_ind()
			 * .equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
			 * appHouBillsAddiInfoCargo
			 * .setPub_hsa_rcv_pay_own_bill_ind(FwConstants.SPACE); } if
			 * (appHouBillsAddiInfoCargo.getHouse_liheap_rcv_ind() == null ||
			 * appHouBillsAddiInfoCargo
			 * .getHouse_liheap_rcv_ind().equalsIgnoreCase
			 * (FwConstants.EMPTY_STRING)) {
			 * appHouBillsAddiInfoCargo.setHouse_liheap_rcv_ind
			 * (FwConstants.SPACE); } if
			 * (appHouBillsAddiInfoCargo.getHouse_rent_assist_type() == null ||
			 * appHouBillsAddiInfoCargo
			 * .getHouse_rent_assist_type().equalsIgnoreCase
			 * (FwConstants.EMPTY_STRING)) {
			 * appHouBillsAddiInfoCargo.setHouse_rent_assist_type
			 * (FwConstants.SPACE); } if
			 * (appHouBillsAddiInfoCargo.getHouse_hc_src_type_cd() == null ||
			 * appHouBillsAddiInfoCargo
			 * .getHouse_hc_src_type_cd().equalsIgnoreCase
			 * (FwConstants.EMPTY_STRING)) {
			 * appHouBillsAddiInfoCargo.setHouse_hc_src_type_cd
			 * (FwConstants.SPACE); }
			 *
			 * if (pageCollAppAddInfoColl != null &&
			 * pageCollAppAddInfoColl.size() > 0) { appHouBillsAddiInfoCargo =
			 * (APP_HOU_BILLS_ADDI_INFO_Cargo) pageCollAppAddInfoColl.get(0); }
			 * if (appHouBillsAddiInfoBeforeCargo != null) {
			 * appHouBillsAddiInfoCargo = (APP_HOU_BILLS_ADDI_INFO_Cargo)
			 * isChanged(appHouBillsAddiInfoBeforeCargo,
			 * appHouBillsAddiInfoCargo); if
			 * (appHouBillsAddiInfoCargo.getIndv_seq_num() != null) {
			 * appHouBillsAddiInfoCargo.setDirty(true); } } if
			 * (appHouBillsAddiInfoCargo.isDirty()) {
			 * appHouBillsAddiInfoCargo.setRowAction
			 * (FwConstants.ROWACTION_UPDATE); } else if (pageCollAppAddInfoColl
			 * != null && pageCollAppAddInfoColl.size() > 0) {
			 * appHouBillsAddiInfoCargo
			 * .setRowAction(FwConstants.ROWACTION_INSERT);
			 * appHouBillsAddiInfoCargo.setDirty(true); }
			 * ABHousingBillsQuestionsBO ABHBillsQuestionsBO = new
			 * ABHousingBillsQuestionsBO();
			 * ABHBillsQuestionsBO.storeHousingExpenseAdditonalInfo
			 * (pageCollAppAddInfoColl);
			 */

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
					categorySelectionProfile);
			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());
			session.put(FwConstants.RMC_DRIVER, driverArray);
			session.put("houseResp", String.valueOf(houseDetailPageRequired));
			session.put("utilResp", String.valueOf(utilDetailPageRequired));
			txnBean.setSession(session);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHousingUtilIndvSelection");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilIndvSelection");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHousingUtilIndvSelection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilIndvSelection");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilIndvSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Return true if a detail page is required for the category type Room and
	 * Board , Dependent Care , support payment,Impairement Work.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @param catChgCd the cat chg cd
	 * @return true, if successful
	 */
	public boolean checkExpenseDetailPageRequired(
			final SortedSet categorySelectionProfile, final Map catType,
			final String catChgCd) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkExpenseDetailPageRequired() - START");
		try {
			boolean isexpensePageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();

					if (catChgCd.equalsIgnoreCase(categorySeqDtl
							.getChangeSelectionCategoryCd())
							&& catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getStatus() != IRMCResponseProfileManager.STATUS_COMPLETE
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND) {
						isexpensePageRequired = true;
						break;
					}
				}
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkExpenseDetailPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isexpensePageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkExpenseDetailPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkExpenseDetailPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkExpenseDetailPageRequired");
		}
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */

	public void loadHousingUtilIndvTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilIndvTypeSelection() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::loadHousingUtilIndvTypeSelection:Start");
			final Map request = txnBean.getRequest();

			loadTypes(txnBean, IRMCResponseProfileManager.PAY_HOUSING_BILL,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadHousingUtilIndvTypeSelection:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHousingUtilIndvTypeSelection");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilIndvTypeSelection");
		} catch (final Exception e) {
			log(ILog.ERROR, e.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHousingUtilIndvTypeSelection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilIndvTypeSelection");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilIndvTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHousingUtilIndvTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilIndvTypeSelection() - START");

		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final ARXHIValidator validateBO = new ARXHIValidator();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflPageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			beforeMap.get("FIRST_NAME_LIST");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARXHI_RMC_IN_PRFL_COLLECTION");

			// Populate responses from BeforeCollection to Page Collection
			final short[] fieldName = {
					IRMCResponseProfileManager.SHELTER_COST_RENT,
					IRMCResponseProfileManager.SHELTER_COST_MORTGAGE,
					IRMCResponseProfileManager.SHELTER_COST_TAX,
					IRMCResponseProfileManager.SU_CST_INS_RESP,
					IRMCResponseProfileManager.DISASTER_REPAIR_RESP,
					IRMCResponseProfileManager.PREVENT_EVICTION_RESP,
					IRMCResponseProfileManager.HOUSING_BILLS_OTHERS };

			rmcResponseProfileManager.preparePageColl(rmcInPrflPageColl,
					rmcInPrflBeforeColl, fieldName);

			// Get the Session and Request Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			if (rmcInPrflPageColl == null) {
				rmcInPrflPageColl = new RMC_IN_PRFL_Collection();
			}

			// Get Request Collection
			rmcInPrflCollRequest = compareRmcInPrflColl(rmcInPrflBeforeColl,
					rmcInPrflPageColl);

			// Get NoOneCollection
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARXHI_NO_ONE_COLLECTION");
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();

			validateInfo = validateBO.validateNoOneHousingBillsType(
					rmcInPrflCollRequest, newNoOneColl,appType);
			if (validateInfo != null && validateBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARXHI_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARXHI_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("FIRST_NAME_LIST",
						beforeMap);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}
			
			// Initialize the colSize for Session
			boolean houseDetailFlag = false;
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 7;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;
			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getPay_hous_bill_resp().charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {

					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);
					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {

						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getSu_cst_rent_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getSu_cst_mtge_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getSu_cst_tax_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getSu_cst_ins_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getDisaster_repair_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getPrevent_eviction_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getHousing_bill_others_resp());

						// get responses from session
						sesResponse.add(rmcInPrflBeforeCargo
								.getSu_cst_rent_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getSu_cst_mtge_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getSu_cst_tax_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getSu_cst_ins_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getDisaster_repair_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getPrevent_eviction_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getHousing_bill_others_resp());

						persistFlag = false;

						for (int s = 0; s < sizeQuestion; s++) {
							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}

							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.PAY_HOUSING_BILL);
						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getSu_cst_rent_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getSu_cst_mtge_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getSu_cst_tax_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getSu_cst_ins_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

																&& rmcInPrflBeforeCargo
																.getDisaster_repair_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getPrevent_eviction_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getHousing_bill_others_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.PAY_HOUSING_BILL,
									rmcInPrflBeforeCargo, true);
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARVAT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}
						}

						if (rmcInPrflBeforeCargo
								.getSu_cst_rent_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getSu_cst_mtge_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getSu_cst_tax_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getSu_cst_ins_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

																|| rmcInPrflBeforeCargo
																.getDisaster_repair_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getPrevent_eviction_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getHousing_bill_others_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}
						reqResponse.clear();
						sesResponse.clear();
					}
				}

			}

			// persist the Shelter & Utility data

			final int persistArraySize = persistArray.size();
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = { cargo.getSu_cst_rent_resp(),
						cargo.getSu_cst_mtge_resp(),
						cargo.getSu_cst_tax_resp(), cargo.getSu_cst_ins_resp(),
						/*
						 * VG SONAR Cleanup - 09/1/2015 Deleted 1,1 lines
						 * Commented Code in this block
						 */
						cargo.getDisaster_repair_resp(),
						cargo.getPrevent_eviction_resp(),
						cargo.getHousing_bill_others_resp() };
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				if (String.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED)
						.equals(cargo.getSu_cst_rent_resp())
						|| String.valueOf(
								IRMCResponseProfileManager.STATUS_REQUIRED)
								.equals(cargo.getSu_cst_mtge_resp())
								|| String.valueOf(
										IRMCResponseProfileManager.STATUS_REQUIRED)
										.equals(cargo.getSu_cst_tax_resp())
										|| String.valueOf(
												IRMCResponseProfileManager.STATUS_REQUIRED)
												.equals(cargo.getSu_cst_ins_resp())

												|| String.valueOf(
														IRMCResponseProfileManager.STATUS_REQUIRED)
														.equals(cargo.getDisaster_repair_resp())
														|| String.valueOf(
																IRMCResponseProfileManager.STATUS_REQUIRED)
																.equals(cargo.getPrevent_eviction_resp())
																|| String.valueOf(
																		IRMCResponseProfileManager.STATUS_REQUIRED)
																		.equals(cargo.getHousing_bill_others_resp())) {

					houseDetailFlag = true;
				}

			}

			// Run Dirty Logic on Driver
			if (driverFlag) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXHI",
						driverArray, appNum);
			}

			if (houseDetailFlag) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARXHD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHD",
						driverArray, appNum);
			} else if (!checkHousingUtilityDetailsPageRequired(
					categorySelectionProfile, null,
					AppConstants.RMC_CAT_HO_EXP_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARXHD", driverArray);
				if (!houseDetailPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
						&& !houseDetailPageStat
						.equals(IDriver.DRIVER_STATUS_REQUIRED)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& houseDetailPageStat
						.equals(IDriver.DRIVER_STATUS_REQUIRED)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARXHD", driverArray,
							appNum);
				}

			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARXHD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXHD",
						driverArray, appNum);
			}

			if (!houseDetailFlag) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXHI", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"HousingExpenseEJBBean::storeHousingUtilIndvTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHousingUtilIndvTypeSelection");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilIndvTypeSelection");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHousingUtilIndvTypeSelection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilIndvTypeSelection");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilIndvTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.loadHousingDetails() - START");
		try {

			log(ILog.INFO,
					"RMCOtherIncomeEJBBean::loadOtherIncomeDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// you'll get the value for Seq
			APP_IN_HOU_BILLS_Collection rmcInOthrIncColl;
			// make loopingQuestion value NO in the request
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			String srcAppInd = FwConstants.SPACE;
			String pageMode = FwConstants.SPACE;
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final Map catTypes = new HashMap();

			catTypes.put("RM", "RM");
			catTypes.put("RE", "RE");
			catTypes.put("HI", "HI");
			catTypes.put("NO", "NO");
			catTypes.put("DR", "DR");
			catTypes.put("PE", "PE");
			catTypes.put("OH", "OH");

			// EDSP RMB

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			
			if(categorySelectionProfile == null || ("ARXUD").equals(previousPageId)){
				categorySelectionProfile = categorySelectionProfileManager.loadCategoryChangeSelectionProfile(appNumber);
			}

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catTypes)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			
			final ABHousingBillsBO housingBillsDetailsBO = new ABHousingBillsBO();

			final short[] responseType = new short[] {
					IRMCResponseProfileManager.SHELTER_COST_RENT,
					IRMCResponseProfileManager.SHELTER_COST_MORTGAGE,
					IRMCResponseProfileManager.SHELTER_COST_TAX,
					IRMCResponseProfileManager.SU_CST_INS_RESP, 
					IRMCResponseProfileManager.DISASTER_REPAIR_RESP,
					IRMCResponseProfileManager.PREVENT_EVICTION_RESP,
					IRMCResponseProfileManager.HOUSING_BILLS_OTHERS

			};

			SortedSet otherIncomeProfile = null;
			boolean rnRecordFound = false;

			if (!pageId.equals(previousPageId)) {
				otherIncomeProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl, responseType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_HOU_BILLS_Collection otherIncColl = housingBillsDetailsBO
							.loadShelterDetails(appNumber);
					final APP_IN_HOU_BILLS_Collection newOtherIncColl = housingBillsDetailsBO
							.splitHousingCollection(otherIncColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (newOtherIncColl != null && !newOtherIncColl.isEmpty()) {
						APP_IN_HOU_BILLS_Cargo rmcInOtherIncCargo = null;
						final int newEmplCollSize = newOtherIncColl.size();
						rnRecordFound = true;
						for (int i = 0; i < newEmplCollSize; i++) {
							rmcInOtherIncCargo = newOtherIncColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									otherIncomeProfile, null, null,
									Short.parseShort(rmcInOtherIncCargo
											.getIndv_seq_num()),
											Long.parseLong(rmcInOtherIncCargo
													.getSeq_num()),
													rmcInOtherIncCargo.getBill_type());
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(otherIncomeProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					final Iterator iter = otherIncomeProfile.iterator();
					CategorySequenceDetail categorySeqDtl = null;
					while (iter.hasNext()) {
						categorySeqDtl = (CategorySequenceDetail) iter.next();
						if(categorySeqDtl.getCategorySequence() == 0){
							iter.remove();
						}
					}
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(otherIncomeProfile);
				}

				// create add new sorted set
				// we need to remove the values from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				final Map beforeColl = (Map) session
						.get(FwConstants.BEFORE_COLLECTION);
				otherIncomeProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			if (indivSeqBean == null && ("ARXHS".equals(previousPageId)||"ARWRB".equals(previousPageId))) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get(FwConstants.DETAIL_KEY_BEAN);
			}
			// Populating into session
			session.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

			// if details key bean not null means this bean is coming from the
			// summary page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								otherIncomeProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Long.parseLong(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
//					if (categorySeqDetail1.getUserEndSelectionInd() != 1
//							&& !rnRecordFound) {
//						String userEndIndicator = indivSeqBean.getUserEndInd();
//						if (userEndIndicator == null) {
//							userEndIndicator = FwConstants.ZERO;
//						}
//						categorySelectionProfileManager
//						.updateUserEndSelInd(
//								otherIncomeProfile,
//								appNumber,
//								Short.parseShort(indivSeqBean
//										.getIndivSeqNum()),
//										Long.parseLong(indivSeqBean.getSeqNum()),
//										indivSeqBean.getType(), Short
//										.parseShort(userEndIndicator));
//
//					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							otherIncomeProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Long.parseLong(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Long.parseLong(indivSeqBean.getSeqNum()),
											indivSeqBean.getType());
					if (categorySeqDetail2 != null) {

						if (categorySeqDetail2.getUserEndSelectionInd() != 1
								&& !rnRecordFound) {
							String userEndIndicator = indivSeqBean
									.getUserEndInd();
							if (userEndIndicator == null) {
								userEndIndicator = FwConstants.ZERO;
							}
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Long.parseLong(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Long
										.parseLong(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {

						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						indivSeqBean.getUserEndInd();
						// now we need to make required the employment
						rmcResponseProfileManager.makeAddNew(
								IRMCResponseProfileManager.PAY_HOUSING_BILL,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(otherIncomeProfile, appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {

						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}
						categorySelectionProfileManager
						.insertSequenceDetail(otherIncomeProfile, null,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(otherIncomeProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Long
										.parseLong(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Long
										.parseLong(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					otherIncomeProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(otherIncomeProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(otherIncomeProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			pageCollection.put("END_PAGE_IND",
					String.valueOf(categorySeqDetail.getUserEndSelectionInd()));

			// commented to test before merge
			rmcInOthrIncColl = housingBillsDetailsBO
					.loadIndividualShelterDetails(appNumber, indvSeqNum,
							categorySeqNum);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 2,1,1 lines Commented Code
			 * in this block
			 */

			if (rmcInOthrIncColl != null && !rmcInOthrIncColl.isEmpty()) {
				rmcInOthrIncColl.getCargo(0);
			}
			pageCollection.put("APP_IN_HOU_BILLS_Collection", rmcInOthrIncColl);

			final ARHousingBillDetailsBO otherIncBO = new ARHousingBillDetailsBO();
			APP_IN_HOU_BILLS_Cargo cwwOthrIncCargo = otherIncBO
					.splitOtherIncColl(rmcInOthrIncColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwOthrIncCargo == null) {
				cwwOthrIncCargo = new APP_IN_HOU_BILLS_Cargo();
			}
			pageCollection.put("SEC_BILL",
					otherIncBO.settingDefaultValues(cwwOthrIncCargo));

			APP_IN_HOU_BILLS_Cargo rmcEmplCargo = otherIncBO.splitOtherIncColl(
					rmcInOthrIncColl, AppConstants.RMC_NEW_RECORD_IND);
			if (rmcEmplCargo != null) {
				pageCollection.put("FST_BILL",
						otherIncBO.settingDefaultValues(rmcEmplCargo));
			} else {
				rmcEmplCargo = otherIncBO.splitOtherIncColl(rmcInOthrIncColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcEmplCargo != null) {
					pageCollection.put("FST_BILL",
							otherIncBO.settingDefaultValues(rmcEmplCargo));
				} else {
					rmcEmplCargo = otherIncBO.splitOtherIncColl(
							rmcInOthrIncColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcEmplCargo != null) {
						pageCollection.put("FST_BILL",
								otherIncBO.settingDefaultValues(rmcEmplCargo));
					} else {
						pageCollection.put("FST_BILL", otherIncBO
								.settingDefaultValues(cwwOthrIncCargo));
					}
				}

			}

			if (rmcInOthrIncColl != null && !rmcInOthrIncColl.isEmpty()) {
				final APP_IN_HOU_BILLS_Cargo appInSelfeCargo = rmcInOthrIncColl
						.getCargo(0);
				srcAppInd = appInSelfeCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equals(pageMode) || "E".equals(pageMode))) {
				pageMode = FwConstants.NO;
			}
			char typeStatus = 'N';
			String showLoopingQuestionFlag = FwConstants.YES;

			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;
			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);

			pageCollection.put("PAGE_MODE", pageMode);

			pageCollection.put("BILL_TYPE", categoryType);

			// set first name to page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			// run component manager
			componentManager.getComponents("ARXHD", txnBean);
			request.remove("loopingQuestion");
			// Add the page collection to before collection
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.storeHousingDetails() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final List modifiedFields = (ArrayList) session
					.get(AppConstants.MODIFIED_FIELDS);
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String currentLang = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final SortedSet otherIncomeProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final APP_IN_HOU_BILLS_Collection rmcInOthrIncCollection = (APP_IN_HOU_BILLS_Collection) pageCollection
					.get("APP_IN_HOU_BILLS_Collection");
			final IReferenceTableManager referenceTableManager = ReferenceTableManager
					.getInstance();
			APP_IN_HOU_BILLS_Cargo rmcInothrIncCargo = rmcInOthrIncCollection
					.getCargo(0);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(otherIncomeProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final ARHousingBillDetailsBO otherIncBO = new ARHousingBillDetailsBO();
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			String changeEffDate = null;
			final APP_IN_HOU_BILLS_Collection beforeCollRmcInOthIncColl = (APP_IN_HOU_BILLS_Collection) beforeColl
					.get("APP_IN_HOU_BILLS_Collection");
			APP_IN_HOU_BILLS_Cargo beforeOthrIncCargo = null;

			rmcInothrIncCargo.setApp_num(appNumber);

			if (rmcInothrIncCargo.getRec_cplt_ind() == null) {
				rmcInothrIncCargo.setRec_cplt_ind(FwConstants.ZERO);
			}
			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			long seqNum = 0;
			boolean othrIncDetailsUpdate = false;

			if (beforeCollRmcInOthIncColl != null
					&& !beforeCollRmcInOthIncColl.isEmpty()) {

				final int size = beforeCollRmcInOthIncColl.size();
				seqNum = categorySeqDetailBean.getCategorySequence();

				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeOthrIncCargo = otherIncBO.splitOtherIncColl(
						beforeCollRmcInOthIncColl, sourceAppIndicator);
				if (beforeOthrIncCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeOthrIncCargo = otherIncBO.splitOtherIncColl(
							beforeCollRmcInOthIncColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm or cw and re
					// now we are getting RM/RE record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeOthrIncCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeOthrIncCargo != null) {
					// Source App Indicator set to 'RM' and the default values
					// for appInSelfeCargo populated from the before cargo
					rmcInothrIncCargo.setSrc_app_ind(beforeOthrIncCargo
							.getSrc_app_ind());
					rmcInothrIncCargo.setIndv_seq_num(beforeOthrIncCargo
							.getIndv_seq_num());
					rmcInothrIncCargo.setBill_type(beforeOthrIncCargo
							.getBill_type());
					rmcInothrIncCargo.setSeq_num(beforeOthrIncCargo
							.getSeq_num());
					rmcInothrIncCargo.setRec_cplt_ind(beforeOthrIncCargo
							.getRec_cplt_ind());
					if (rmcInothrIncCargo.getPymt_amt() == null) {
						rmcInothrIncCargo.setPymt_amt(beforeOthrIncCargo
								.getPymt_amt());
					}
					if (rmcInothrIncCargo.getPaid_amt() == null) {
						rmcInothrIncCargo.setPaid_amt(beforeOthrIncCargo
								.getPaid_amt());
					}
					if (rmcInothrIncCargo.getPymt_freq() == null) {
						rmcInothrIncCargo.setPymt_freq(beforeOthrIncCargo
								.getPymt_freq());
					}
					if (rmcInothrIncCargo.getProperty_name() == null) {
						rmcInothrIncCargo.setProperty_name(beforeOthrIncCargo
								.getProperty_name());
					}
					if (rmcInothrIncCargo.getProp_addr_l1() == null) {
						rmcInothrIncCargo.setProp_addr_l1(beforeOthrIncCargo
								.getProp_addr_l1());
					}
					if (rmcInothrIncCargo.getProp_addr_l2() == null) {
						rmcInothrIncCargo.setProp_addr_l2(beforeOthrIncCargo
								.getProp_addr_l2());
					}
					if (rmcInothrIncCargo.getProp_addr_city() == null) {
						rmcInothrIncCargo.setProp_addr_city(beforeOthrIncCargo
								.getProp_addr_city());
					}
					if (rmcInothrIncCargo.getProp_addr_state_cd() == null) {
						rmcInothrIncCargo
						.setProp_addr_state_cd(beforeOthrIncCargo
								.getProp_addr_state_cd());
					}
					if (rmcInothrIncCargo.getProp_addr_zip() == null) {
						rmcInothrIncCargo.setProp_addr_zip(beforeOthrIncCargo
								.getProp_addr_zip());
					}

					rmcInothrIncCargo.setEcp_id(beforeOthrIncCargo.getEcp_id());

				} else {

					final APP_IN_HOU_BILLS_Cargo beforeCargo = beforeCollRmcInOthIncColl
							.getCargo(0);
					rmcInothrIncCargo.setEcp_id(beforeCargo.getEcp_id());
				}

				if (rmcInothrIncCargo.getPymt_amt() != null
						&& rmcInothrIncCargo.getPymt_amt().equalsIgnoreCase(
								AppConstants.ON_FILE)) {
					rmcInothrIncCargo.setPymt_amt(beforeOthrIncCargo
							.getPymt_amt());
					if (modifiedFields.contains(rmcInothrIncCargo
							.getIndv_seq_num()
							+ "_"
							+ rmcInothrIncCargo.getSeq_num()
							+ "_"
							+ "payment_amt")) {
						modifiedFields.remove(rmcInothrIncCargo
								.getIndv_seq_num()
								+ "_"
								+ rmcInothrIncCargo.getSeq_num()
								+ "_"
								+ "payment_amt");
					}
				} else {
					if (modifiedFields!=null && !modifiedFields.contains(rmcInothrIncCargo
							.getIndv_seq_num()
							+ "_"
							+ rmcInothrIncCargo.getSeq_num()
							+ "_"
							+ "payment_amt")) {
						modifiedFields.add(rmcInothrIncCargo.getIndv_seq_num()
								+ "_" + rmcInothrIncCargo.getSeq_num() + "_"
								+ "payment_amt");
					}
				}
				// check dirty
				rmcInothrIncCargo = (APP_IN_HOU_BILLS_Cargo) isChanged(
						beforeOthrIncCargo, rmcInothrIncCargo);
				if (rmcInothrIncCargo.isDirty()) {
					rmcInothrIncCargo.setSrc_app_ind(sourceAppIndicator);
					rmcInothrIncCargo.setRowAction(recordInd);

					rmcInothrIncCargo.setRec_cplt_ind(FwConstants.ONE);
					othrIncDetailsUpdate = true;
					// EDSP RMB

				}

				if (changeEffDate == null) {
					changeEffDate = AppConstants.HIGH_DATE;
				}

				rmcInothrIncCargo.setRec_cplt_ind(FwConstants.ONE);

			} else {

				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInothrIncCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = otherIncBO.getMaxSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcInothrIncCargo.setSeq_num(String.valueOf(seqNum));
				rmcInothrIncCargo.setBill_type(categorySeqDetailBean
						.getCategoryType());
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				rmcInothrIncCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInothrIncCargo.setRowAction(recordInd);
				othrIncDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager.updateSequence(
						otherIncomeProfile, null,
						categorySeqDetailBean.getIndividualSequence(), seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
					{
					categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
					}
			}
			final String type = categorySeqDetailBean.getCategoryType();
			final String descToPass = referenceTableManager.getColumnValue(
					"THBT", 59, type, currentLang);
			final ARXHDValidator arxhdValidator = new ARXHDValidator();
			if (backToMyAccess == null) {

				if (userEndInd == 1) {
					arxhdValidator.validateEndScreen(rmcInothrIncCargo);
				} else {
					arxhdValidator.validateHousePageContents(rmcInothrIncCargo,
							userEndInd, pageMode, request, beforeColl,
							currentLang, session, indvSeqNum, descToPass);
				}
			}

			if (checkBackToMyAccessSelected(request)
					|| arxhdValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arxhdValidator.getMessageList());
				}
				pageCollection.put("BILL_TYPE", beforeColl.get("BILL_TYPE"));
				pageCollection.put("APP_IN_HOU_BILLS_Collection",
						rmcInOthrIncCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					pageCollection.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				componentManager.getComponents("ARXHD", txnBean);
				createAndLoadARXHDResponseMapsToPageCollection(rmcInPrflColl,
						pageCollection, peopleHandler, true, driverStatus);
				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_BILL")) {
					pageCollection.put("SEC_BILL", beforeColl.get("SEC_BILL"));
				}
				pageCollection.put("FST_BILL", rmcInothrIncCargo);
				return;

			}
			if ("E".equalsIgnoreCase(pageMode)) {
				if (rmcInothrIncCargo.getEnd_dt() != null
						&& rmcInothrIncCargo.getEnd_dt().contains("/")) {
					final String endDate = rmcInothrIncCargo.getEnd_dt()
							.substring(0, 10);
					rmcInothrIncCargo.setEnd_dt(displayFormatter
							.getYYYYMMDDDate(endDate));
				}
			}
			if (othrIncDetailsUpdate) {
				if (rmcInothrIncCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					otherIncBO.insertExistingDetails(rmcInOthrIncCollection);
				} else {
					otherIncBO.storeHouseDetails(rmcInOthrIncCollection);
				}
			}

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_UEI
				categorySelectionProfileManager.insertSequenceDetail(
						otherIncomeProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			}

			//reqInd is indicator to decide if we have complete the response profile or not
			boolean reqInd=false;
			
			if (!loopingQuestion) {
//				short respTyp=IRMCResponseProfileManager.PAY_HOUSING_BILL;
				short respTyp= rmcResponseProfileManager
						.getResponseByType(
								IRMCResponseProfileManager.SHELTER_COST_DETAILS,
								categorySeqDetailBean
								.getCategoryType());
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null && rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW) {
					reqInd=true;		
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.SHELTER_COST_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.PAY_HOUSING_BILL,
							rmcInPrflCargo, true);
				}
			}

			// Mark complete otherinc sequence using common methods
			//if the profile response was not 'R' or if we came from gatepost then don't persist else persist
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					otherIncomeProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						otherIncomeProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfileManager
					.areAllSequencesComplete(otherIncomeProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(otherIncomeProfile);
			}
			// Removing the indvSeqBean from session
			final IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) session
					.get(FwConstants.DETAIL_KEY_BEAN);
			if (indivSeqBean != null) {
				if (indivSeqBean.getIndivSeqNum().equals(
						rmcInothrIncCargo.getIndv_seq_num())
						&& indivSeqBean.getSeqNum().equals(
								rmcInothrIncCargo.getSeq_num())
								&& indivSeqBean.getType().equals(
										rmcInothrIncCargo.getBill_type())) {
					session.remove(FwConstants.DETAIL_KEY_BEAN);
				}
			}

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.loadUtilityDetails() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::loadUtilityDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;
			request.put("loopingQuestion", FwConstants.NO);
			// you'll get the value for Seq
			APP_IN_UTILC_Collection rmcInUtilityColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, getUtilityTypes())) {
				// PCR# 40362 - following is commented and added
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_UT_EXP_PRFL);

			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, getUtilityTypes())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_UT_EXP_PRFL);
			}
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final UtilityCostsBO utilityBillDetailsBO = new UtilityCostsBO();
			final short[] responseType = new short[] {
					IRMCResponseProfileManager.SHELTER_COST_ELECTRICTY,
					IRMCResponseProfileManager.SHELTER_COST_GAS,
					IRMCResponseProfileManager.SHELTER_COST_FUEL,
					IRMCResponseProfileManager.SHELTER_COST_COAL,
					IRMCResponseProfileManager.UTILITY_BILLS_OIL,
					IRMCResponseProfileManager.SHELTER_COST_WOOD,
					IRMCResponseProfileManager.SHELTER_COST_SEWER,
					IRMCResponseProfileManager.SHELTER_COST_TRASH,
					IRMCResponseProfileManager.SHELTER_COST_INSTALL,
					IRMCResponseProfileManager.SHELTER_COST_PHONE,
					IRMCResponseProfileManager.SHELTER_COST_OTHER,
					IRMCResponseProfileManager.UTILITY_EXPENSE };
			SortedSet utilityProfile = null;
			if (!pageId.equals(previousPageId)) {
				utilityProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_UTILC_Collection newUtilityColl = utilityBillDetailsBO
							.loadUtilityBillDetails(appNumber);
					if (newUtilityColl != null && !newUtilityColl.isEmpty()) {
						APP_IN_UTILC_Cargo rmcInUtilityCargo = null;
						final int newUtilityCollSize = newUtilityColl.size();
						for (int i = 0; i < newUtilityCollSize; i++) {
							rmcInUtilityCargo = newUtilityColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									utilityProfile, null, null,
									Short.parseShort(rmcInUtilityCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInUtilityCargo
													.getSeq_num()),
													rmcInUtilityCargo.getUtil_typ());
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(utilityProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(utilityProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session

				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection

				utilityProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Utility_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								utilityProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(utilityProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							utilityProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						final short[] responseArray = new short[] {
								IRMCResponseProfileManager.UTILITY_EXPENSE,
								rmcResponseProfileManager
								.getResponseByType(
										IRMCResponseProfileManager.UTILITY_COST_DETAILS,
										indivSeqBean.getType()) };
						rmcResponseProfileManager.makeAddNew(responseArray,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(utilityProfile, null,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(utilityProfile, null,
								AppConstants.RMC_CAT_UT_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(utilityProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_UT_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Utility_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					utilityProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(utilityProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(utilityProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInUtilityColl = utilityBillDetailsBO.loadUtilityBillDetails(
					appNumber, indvSeqNum, categorySeqNum);

			// PCR# 40362 - changed for Change View - Begin
			pageCollection.put("APP_IN_UTILC_Collection", rmcInUtilityColl);

			if (rmcInUtilityColl != null && !rmcInUtilityColl.isEmpty()) {
				final APP_IN_UTILC_Cargo appInSelfeCargo = rmcInUtilityColl
						.getCargo(0);
				srcAppInd = appInSelfeCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (pageMode == null
					|| !("C".equalsIgnoreCase(pageMode) || "E"
							.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}

			// PCR# 40362 - changed for Change View - End
			final UtilityCostsBO utilityBillsBO = new UtilityCostsBO();
			APP_IN_UTILC_Cargo cwwUtilityCargo = utilityBillsBO
					.splitUtilityColl(rmcInUtilityColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwUtilityCargo == null) {
				cwwUtilityCargo = new APP_IN_UTILC_Cargo();
			}
			pageCollection
			.put("SEC_UTIL_EMPL", utilityBillsBO
					.settingUtilityDefaultValues(cwwUtilityCargo));
			APP_IN_UTILC_Cargo rmcUtilityCargo = utilityBillsBO
					.splitUtilityColl(rmcInUtilityColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcUtilityCargo != null) {
				pageCollection.put("FST_UTIL_EMPL", utilityBillDetailsBO
						.settingUtilityDefaultValues(rmcUtilityCargo));
			} else {
				rmcUtilityCargo = utilityBillsBO.splitUtilityColl(
						rmcInUtilityColl, AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcUtilityCargo != null) {
					if (rmcUtilityCargo.getChg_eff_dt() != null) {
						rmcUtilityCargo.getChg_eff_dt();
						pageCollection
						.put("FST_UTIL_EMPL",
								utilityBillDetailsBO
								.settingUtilityDefaultValues(rmcUtilityCargo));
					}
				} else {
					rmcUtilityCargo = utilityBillsBO.splitUtilityColl(
							rmcInUtilityColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcUtilityCargo != null) {
						pageCollection
						.put("FST_UTIL_EMPL",
								utilityBillDetailsBO
								.settingUtilityDefaultValues(rmcUtilityCargo));
					} else {
						pageCollection
						.put("FST_UTIL_EMPL",
								utilityBillDetailsBO
								.settingUtilityDefaultValues(cwwUtilityCargo));

					}
				}
				// PCR# 40362 - added end braces
			}

			if (rmcInUtilityColl != null && !rmcInUtilityColl.isEmpty()) {
				final APP_IN_UTILC_Cargo appInSelfeCargo = rmcInUtilityColl
						.getCargo(0);
				srcAppInd = appInSelfeCargo.getSrc_app_ind();
			}
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			// set Details_Collection from session to PageCollection
			if (rmcInUtilityColl != null && !rmcInUtilityColl.isEmpty()) {
				final APP_IN_UTILC_Cargo appRPropCargo = rmcInUtilityColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				final String subType = appRPropCargo.getUtil_typ();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (appRPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = utilityBillDetailsBO
							.loadJointOwnerDetails((String) session
									.get(AppConstants.APP_NUMBER), indvSeqNum,
									AppConstants.JOINT_OWNER_UTILITY_BILL,
									subType, appRPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			pageCollection.put("PAGE_UTILITY_MODE", pageMode);
			pageCollection.put("UTILITY_TYPE", categoryType);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			// run component manager
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 3 lines Commented Code in
			 * this block
			 */

			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			final APP_IN_JNT_OWN_Collection appInJntCol = null;

			txnBean.setPageCollection(pageCollection);

			// set first name to page collection

			txnBean.setPageCollection(pageCollection);
			// run component manager
			componentManager.getComponents("ARXHD", txnBean);
			createAndLoadARXHDResponseMapsToPageCollection(rmcInPrflColl,
					pageCollection, peopleHandler, true, driverStatus);
			pageCollection.put("APP_IN_UTILC_Collection", rmcInUtilityColl);

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
					pageCollection
					.put("APP_IN_JNT_OWN_Collection", appInJntCol);

					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.putAll(pageCollection);
				}
			} else {
				final Map beforeCollA = new HashMap();
				beforeCollA.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeCollA);
			}
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			log(ILog.INFO, "HousingExpenseEJBBean::loadUtilityDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.storeUtilityDetails() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String changeEffDate = null;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			session.remove("Utility_IndSeqBean");
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final SortedSet utilityBillsProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforeColl
					.get("PAGE_UTILITY_MODE");
			final APP_IN_UTILC_Collection rmcInUtilityCollection = (APP_IN_UTILC_Collection) pageCollection
					.get("APP_IN_UTILC_Collection");
			APP_IN_UTILC_Cargo rmcInUtilityCargo = rmcInUtilityCollection
					.getCargo(0);
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforeColl
					.get("FST_JNT");
			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(utilityBillsProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			final UtilityCostsBO housingBillsBO = new UtilityCostsBO();
			final ARXUDValidator arxudValidator = new ARXUDValidator();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			final UtilityCostsBO utilityBillsBO = new UtilityCostsBO();

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess == null) {
				arxudValidator.validateUtilityPageContents(rmcInUtilityCargo,
						userEndInd, pageMode);
			}

			if (checkBackToMyAccessSelected(request)
					|| arxudValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arxudValidator.getMessageList());
				}
				pageCollection.put("UTILITY_TYPE",
						beforeColl.get("UTILITY_TYPE"));
				pageCollection.put("APP_IN_UTILC_Collection",
						rmcInUtilityCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				pageCollection.put("APP_IN_JNT_OWN_Collection",
						appInJntBeforeColl);
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				componentManager.getComponents("ARXHD", txnBean);
				createAndLoadARXHDResponseMapsToPageCollection(rmcInPrflColl,
						pageCollection, peopleHandler, true, driverStatus);
				pageCollection.put("PAGE_UTILITY_MODE",
						beforeColl.get("PAGE_UTILITY_MODE"));
				if (beforeColl.containsKey("SEC_UTIL_EMPL")) {
					pageCollection.put("SEC_UTIL_EMPL",
							beforeColl.get("SEC_UTIL_EMPL"));
				}
				pageCollection.put("FST_UTIL_EMPL", rmcInUtilityCargo);
				if (beforeColl.containsKey("SEC_JNT")) {
					pageCollection.put("SEC_JNT", beforeColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				return;
			}

			final APP_IN_UTILC_Collection beforeCollRmcInUtilityColl = (APP_IN_UTILC_Collection) beforeColl
					.get("APP_IN_UTILC_Collection");
			APP_IN_UTILC_Cargo beforeUtilityCargo = null;

			rmcInUtilityCargo.setApp_num(appNumber);
			if (rmcInUtilityCargo.getChg_eff_dt() == null
					|| rmcInUtilityCargo.getChg_eff_dt().trim().length() == 0) {
				rmcInUtilityCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {
				rmcInUtilityCargo.setChg_eff_dt(displayFormatter
						.getYYYYMMDDDate(rmcInUtilityCargo.getChg_eff_dt()));
			}

			if (rmcInUtilityCargo.getRec_cplt_ind() == null) {
				rmcInUtilityCargo.setRec_cplt_ind(FwConstants.ZERO);
			}

			if (rmcInUtilityCargo.getMo_oblg_ind() == null
					|| rmcInUtilityCargo.getMo_oblg_ind().trim().length() == 0) {
				if (rmcInUtilityCargo.getMo_oblg_amt() == null
						|| rmcInUtilityCargo.getMo_oblg_amt().trim().length() == 0) {

					rmcInUtilityCargo.setMo_oblg_ind("2");
				} else {
					rmcInUtilityCargo.setMo_oblg_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInUtilityCargo.getMo_oblg_amt() == null || rmcInUtilityCargo
						.getMo_oblg_amt().trim().length() == 0)) {

					pageCollection.put("UtilityOblgAmtandIndChecked",
							FwConstants.ONE);
				}
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean utilityDetailsUpdate = false;

			if (beforeCollRmcInUtilityColl != null
					&& !beforeCollRmcInUtilityColl.isEmpty()) {

				final int size = beforeCollRmcInUtilityColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeUtilityCargo = utilityBillsBO.splitUtilityColl(
						beforeCollRmcInUtilityColl, sourceAppIndicator);
				// PCR# 40362 - Following is modified.

				if (beforeUtilityCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeUtilityCargo = utilityBillsBO.splitUtilityColl(
							beforeCollRmcInUtilityColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeUtilityCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeUtilityCargo != null) {
					if (categorySeqDetailBean.getCategoryType().equals(
							AppConstants.PAY_HOUS_BILL)) {
						rmcInUtilityCargo.setMo_oblg_amt(beforeUtilityCargo
								.getMo_oblg_amt());
						rmcInUtilityCargo.setChg_eff_dt(beforeUtilityCargo
								.getChg_eff_dt());

					}
					rmcInUtilityCargo.setEcp_id(beforeUtilityCargo.getEcp_id());
					rmcInUtilityCargo.setSrc_app_ind(beforeUtilityCargo
							.getSrc_app_ind());
					rmcInUtilityCargo.setIndv_seq_num(beforeUtilityCargo
							.getIndv_seq_num());
					rmcInUtilityCargo.setUtil_typ(beforeUtilityCargo
							.getUtil_typ());
					if ("null".equals(rmcInUtilityCargo.getUtil_typ())
							|| rmcInUtilityCargo.getUtil_typ().trim().length() == 0) {
						// Hard Coding since we don't have Utility Bill Types
						rmcInUtilityCargo.setUtil_typ("EL");
					}
					rmcInUtilityCargo.setSeq_num(beforeUtilityCargo
							.getSeq_num());
					rmcInUtilityCargo.setRec_cplt_ind(beforeUtilityCargo
							.getRec_cplt_ind());

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInUtilityCargo.setBill_exp_resp(beforeUtilityCargo
								.getBill_exp_resp());
						rmcInUtilityCargo.setHeat_sw(beforeUtilityCargo
								.getHeat_sw());
						rmcInUtilityCargo.setMo_oblg_amt(beforeUtilityCargo
								.getMo_oblg_amt());
						rmcInUtilityCargo.setMo_oblg_ind(beforeUtilityCargo
								.getMo_oblg_ind());

					}

					changeEffDate = rmcInUtilityCargo.getChg_eff_dt();

					if (true && rmcInUtilityCargo.getChg_eff_dt().trim()
							.length() == 0) {
						rmcInUtilityCargo.setChg_eff_dt(beforeUtilityCargo
								.getChg_eff_dt());
					}
				} else {
					final APP_IN_UTILC_Cargo beforeCargo = beforeCollRmcInUtilityColl
							.getCargo(0);
					rmcInUtilityCargo.setEcp_id(beforeCargo.getEcp_id());
				}
				// check dirty
				rmcInUtilityCargo = (APP_IN_UTILC_Cargo) isChanged(
						beforeUtilityCargo, rmcInUtilityCargo);
				rmcInUtilityCargo.setChg_eff_dt(changeEffDate);
				rmcInUtilityCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInUtilityCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInUtilityCargo.setRowAction(recordInd);
				if (rmcInUtilityCargo.isDirty()) {
					// PCR# 40362 - Begin

					// PCR# 40362 - End
					utilityDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInUtilityCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = utilityBillsBO.getMaxUtilitySeqNumber(appNumber,
						indvSeqNum);
				seqNum = seqNum + 1;
				rmcInUtilityCargo.setSeq_num(String.valueOf(seqNum));
				rmcInUtilityCargo.setUtil_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInUtilityCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInUtilityCargo.setRowAction(recordInd);
				utilityDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(utilityBillsProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());

			}

			//56477 - NullPointer Fix
			if (null == rmcInUtilityCargo.getUtil_typ()  
					|| "null".equals(rmcInUtilityCargo.getUtil_typ())
					|| rmcInUtilityCargo.getUtil_typ().trim().length() == 0) {
				// Hard Coding since we don't have Utility Bill Types
				rmcInUtilityCargo.setUtil_typ("EL");
			}

			if (utilityDetailsUpdate) {
				if (rmcInUtilityCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					utilityBillsBO
					.insertExistingUtilityDetails(rmcInUtilityCollection);
				} else {
					utilityBillsBO.storeUtilityDetails(rmcInUtilityCollection);
				}
			}

			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;

			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);
					if (jntOwnCargo.getJnt_indv_seq_num() != null
							&& jntOwnCargo.getJnt_indv_seq_num().equals(
									FwConstants.ZERO)
									&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
									.getJnt_own_fst_nam().trim().length() == 0)
									&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
									.getJnt_own_last_nam().trim().length() == 0)
									&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
									.getOtsd_ind().trim().length() == 0)) {
						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}

			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforeColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (appInJntBeforeColl != null) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);
						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(rmcInUtilityCollection
									.getCargo(0).getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInUtilityCollection
									.getCargo(0).getSeq_num());
							appInJntOwnCargo
							.setIndv_seq_num(rmcInUtilityCollection
									.getCargo(0).getIndv_seq_num());
							appInJntOwnCargo
							.setAset_sub_typ(rmcInUtilityCollection
									.getCargo(0).getUtil_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_UTILITY_BILLS);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& appInJntOwnCargo.getJnt_indv_seq_num()
									.equals(FwConstants.ZERO)) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);
						if (appInJntOwnCargo == null) {
							if (!sourceAppIndicator
									.equalsIgnoreCase(AppConstants.RMC_END_RECORD_IND)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
									.setApp_num(rmcInUtilityCollection
											.getCargo(0).getApp_num());
									appInJntOwnCargo
									.setJnt_own_seq_num(rmcInUtilityCollection
											.getCargo(0).getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
									.setIndv_seq_num(rmcInUtilityCollection
											.getCargo(0)
											.getIndv_seq_num());
									appInJntOwnCargo
									.setAset_sub_typ(rmcInUtilityCollection
											.getCargo(0).getUtil_typ());
									appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_UTILITY_BILLS);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_last_nam(null);
									}

									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									appInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (appInJntOwnBeforeCargo
											.getSrc_app_ind()
											.equals(AppConstants.CWW_RECORD_IND)) {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(appInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInJntOwnCargo.setApp_num(rmcInUtilityCollection
									.getCargo(0).getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInUtilityCollection
									.getCargo(0).getSeq_num());
							appInJntOwnCargo
							.setIndv_seq_num(rmcInUtilityCollection
									.getCargo(0).getIndv_seq_num());
							appInJntOwnCargo
							.setAset_sub_typ(rmcInUtilityCollection
									.getCargo(0).getUtil_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_UTILITY_BILLS);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& appInJntOwnCargo.getJnt_indv_seq_num()
									.equals(FwConstants.ZERO)) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& appInJntOwnCargo.getSrc_app_ind() != null
																		&& appInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(rmcInUtilityCollection
								.getCargo(0).getApp_num());
						appInJntOwnCargo
						.setJnt_own_seq_num(rmcInUtilityCollection
								.getCargo(0).getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(rmcInUtilityCollection
								.getCargo(0).getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(rmcInUtilityCollection
								.getCargo(0).getUtil_typ());
						appInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_UTILITY_BILLS);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& appInJntOwnCargo.getJnt_indv_seq_num()
								.equals(FwConstants.ZERO)) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);
						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));
						appInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}

			housingBillsBO.storeJointOwnerDetails(appInJntOwnNewColl);

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						utilityBillsProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.UTILITY_COST_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.UTILITY_EXPENSE,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					utilityBillsProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(utilityBillsProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(utilityBillsProfile);
			}

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadHousingUtilitySummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilitySummary() - START");
		try {

			APP_IN_HOU_BILLS_Collection rmcHouseColl = null;
			APP_IN_UTILC_Collection rmcUtilColl = null;
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			boolean loadHouseCatSelProfile = false;
			boolean loadUtilityCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadHouseCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);
					if (catSeqDetail != null
							&& catSeqDetail.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_HO_COMP_PRFL)) {
						loadHouseCatSelProfile = false;
					} else {
						loadHouseCatSelProfile = true;
					}
				}
			}
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);

			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();

			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}
			// now loading the cat selection profile form the data base
			if (loadHouseCatSelProfile) {
				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNum,
								AppConstants.RMC_CAT_HO_EXP_PRFL);
			}
			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadUtilityCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is housing bills
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& catSeqDetail.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_UT_EXP_PRFL)) {
						loadUtilityCatSelProfile = false;
					} else {
						loadUtilityCatSelProfile = true;
					}
				}
			}

			// now loading the cat selection profile form the data base
			if (loadHouseCatSelProfile || loadUtilityCatSelProfile) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_HO_EXP_PRFL + "'" + "," + "'"
						+ AppConstants.RMC_CAT_UT_EXP_PRFL + "'";
				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
			}
			categorySelectionProfileManager
			.resetCurrentSeqeunceDetail(selectionProfile);
			final UtilityCostsBO arHousingBillDetailsBO = new UtilityCostsBO();
			final ABHousingBillsBO standardBO = new ABHousingBillsBO();
			rmcHouseColl = standardBO.loadIndividualShelterDetails(appNum);
			rmcUtilColl = arHousingBillDetailsBO.getRmcUtilityDetails(appNum);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 2,1 lines Commented Code in
			 * this block
			 */

			// Getting language from http session
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);
			final int sizeHouseCustColl = rmcHouseColl.size();
			final int sizeUtilCustColl = rmcUtilColl.size();

			String newOrModifiedHouseExists = FwConstants.NO;
			String newOrModifiedUtilityExists = FwConstants.NO;

			for (int i = 0; i < sizeHouseCustColl; i++) {
				APP_IN_HOU_BILLS_Cargo housingCargo = new APP_IN_HOU_BILLS_Cargo();
				housingCargo = rmcHouseColl.getCargo(i);
				if (newOrModifiedHouseExists.equals(FwConstants.NO)) {
					if (housingCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| housingCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)
									|| housingCargo.getSrc_app_ind().equals(
											AppConstants.RMC_END_RECORD_IND)) {
						newOrModifiedHouseExists = FwConstants.YES;
					}
				}
			}
			for (int i = 0; i < sizeUtilCustColl; i++) {
				APP_IN_UTILC_Cargo utilityCargo = new APP_IN_UTILC_Cargo();
				utilityCargo = rmcUtilColl.getCargo(i);
				if (newOrModifiedUtilityExists.equals(FwConstants.NO)) {
					if (utilityCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| utilityCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedUtilityExists = FwConstants.YES;
					}
				}
			}
			final RMCHouseUtiltySummaryListView rmcHouseUtiltySummaryListView = new RMCHouseUtiltySummaryListView();
			final RMCUtiltyHouseSummaryListView rmcUtiltyHouseSummaryListView = new RMCUtiltyHouseSummaryListView();

			rmcHouseUtiltySummaryListView.setHouseCollection(rmcHouseColl);

			rmcUtiltyHouseSummaryListView.setUtilityCollection(rmcUtilColl);

			// Put into session of these two collections
			pageCollection.put("APP_IN_SHLTC_Collection", rmcHouseColl);
			pageCollection.put("NEW_OR_MOD_HOUSE_EXISTS",
					newOrModifiedHouseExists);
			pageCollection.put("APP_IN_UTILC_Collection", rmcUtilColl);
			pageCollection.put("NEW_OR_MOD_UTIL_EXISTS",
					newOrModifiedUtilityExists);

			final Map additionalMap = new HashMap();
			additionalMap.put("APPTYPE", appType);
			final List houseDataList = new ArrayList();
			houseDataList.add(rmcHouseColl);
			houseDataList.add(indvNameMap);
			houseDataList.add(peopleHandler);
			houseDataList.add(appType);
			// Preparing listView for House Bills selection
			rmcHouseUtiltySummaryListView.setLanguage(language);
			rmcHouseUtiltySummaryListView.setAppType(appType);
			rmcHouseUtiltySummaryListView.setName("RMC_HOUSE_SUMMARY_LISTVIEW");
			rmcHouseUtiltySummaryListView.setAdditionalInfo(additionalMap);
			rmcHouseUtiltySummaryListView.setDisplayData(houseDataList);
			rmcHouseUtiltySummaryListView.setPageSize(999);

			final List utilDataList = new ArrayList();
			utilDataList.add(rmcUtilColl);
			utilDataList.add(indvNameMap);
			utilDataList.add(peopleHandler);
			utilDataList.add(appType);
			rmcUtiltyHouseSummaryListView.setLanguage(language);
			rmcUtiltyHouseSummaryListView.setAppType(appType);
			rmcUtiltyHouseSummaryListView
			.setName("RMC_UTILITY_SUMMARY_LISTVIEW");
			rmcUtiltyHouseSummaryListView.setAdditionalInfo(additionalMap);
			rmcUtiltyHouseSummaryListView.setDisplayData(utilDataList);
			rmcUtiltyHouseSummaryListView.setPageSize(1000);

			// Poupulating pageCollection with respective response maps
			pageCollection.put("RMC_HOUSE_SUMMARY_LISTVIEW",
					rmcHouseUtiltySummaryListView);
			pageCollection.put("RMC_UTILITY_SUMMARY_LISTVIEW",
					rmcUtiltyHouseSummaryListView);

			pageCollection.put("PEOPLE_5095",
					peopleHandler.getInHomeIndividuals());
			
			RMC_IN_PRFL_Cargo aCargo = null;
			RMC_IN_PRFL_Collection aColl = new RMC_IN_PRFL_Collection();
			for(int i =0; i<rmcInPrflColl.size(); i++){
				aCargo = rmcInPrflColl.getCargo(i);
				if(AppConstants.ONE.equals(aCargo.getIndv_seq_num())){
					aColl.addCargo(aCargo);
				}
			}
			
			pageCollection.put("RMC_IN_PRFL_Collection", aColl);

			// set pageCollection into transaction Bean
			txnBean.setPageCollection(pageCollection);
			// run component manager
			componentManager.getComponents("ARXHS", txnBean);

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
					selectionProfile);
			// **********Testting***************
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// add to session
			session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);

			if (beforeColl == null) {
				beforeColl = new HashMap();
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}
			pageCollection.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			txnBean.setSession(session);

			log(ILog.INFO,
					"HousingExpenseEJBBean::loadHousingUtilitySummary:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHousingUtilitySummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilitySummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHousingUtilitySummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingUtilitySummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingUtilitySummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHousingUtilitySummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilitySummary() - START");
		try {

			log(ILog.INFO,
					"HousingExpenseEJBBean::storeHousingUtilitySummary:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final Map pageCollection = txnBean.getPageCollection();
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			
			RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			final RMC_IN_PRFL_Collection  rmcInPrflPageUtilColl = (RMC_IN_PRFL_Collection) pageCollection.get("RMC_IN_PRFL_Collection");
			final RMC_IN_PRFL_Cargo rmcInPrflPageUtilCargo = rmcInPrflPageUtilColl.getCargo(0);
			
			short[] utilResponseArray = new short[]{
					IRMCResponseProfileManager.HEAT_COOL_SRC
			};
			
			if(null != rmcInPrflPageUtilCargo.getHeat_cool_src()){
				String[] utilValueArray = new String[] {rmcInPrflPageUtilCargo.getHeat_cool_src()};
				for(int i=0; i<rmcInPrflSessColl.size(); i++){
					if(AppConstants.ONE.equals(rmcInPrflSessColl.getCargo(i).getIndv_seq_num())){
						rmcInPrflSessColl.getCargo(i).setHeat_cool_src(rmcInPrflPageUtilCargo.getHeat_cool_src());
					}
				}
				
				rmcResponseProfileManager.persist(appNum, AppConstants.ONE, utilResponseArray, utilValueArray);
			}

			/* Set RMC page House Bills Details make required */
			

			final ChangingValidation cv = new ChangingValidation();
			cv.setUtilityChgInd(txnBean);
			cv.setHousingBillChgInd(txnBean);
			cv.setShelterExpChgInd(txnBean);

			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);
			session.put(FwConstants.RMC_DRIVER, driverArray);

			// End
			log(ILog.INFO,
					"HousingExpenseEJBBean::storeHousingUtilitySummary:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHousingUtilitySummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilitySummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHousingUtilitySummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingUtilitySummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingUtilitySummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.editHousingDetails() - START");
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editHousingDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_HOU_BILLS_Collection appInShltcColl = (APP_IN_HOU_BILLS_Collection) pageCollection
					.get("APP_IN_HOU_BILLS_Collection");
			final APP_IN_HOU_BILLS_Cargo appInShltcCargo = appInShltcColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInShltcCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInShltcCargo.getSeq_num());
			seqBean.setType(appInShltcCargo.getBill_type());

			// setting user end indicator

			if ("RE".equals(appInShltcCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editHousingDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editHousingDetails");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.eraseHousingDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseHousingDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			APP_IN_HOU_BILLS_Collection allHouseBills = null;
			String indvSeqNum = null;
			String seqNum = null;
			String houseType = null;
			String srcAppInd;
			final ABHousingBillsBO shelterCostsBO = new ABHousingBillsBO();
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
			APP_IN_HOU_BILLS_Cargo beforeHouseCargo = (APP_IN_HOU_BILLS_Cargo) beforeColl
					.get("APP_IN_HOU_BILLS_Cargo");
			final APP_IN_HOU_BILLS_Collection houseColl = (APP_IN_HOU_BILLS_Collection) pageCollection
					.get("APP_IN_HOU_BILLS_Collection");
			final APP_IN_HOU_BILLS_Cargo houseCargo = houseColl.getCargo(0);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = houseCargo.getIndv_seq_num();
			seqNum = houseCargo.getSeq_num();
			houseType = houseCargo.getBill_type();
			srcAppInd = houseCargo.getSrc_app_ind();

			if (beforeHouseCargo == null
					|| shelterCostsBO.isDifferentHouse(houseCargo,
							beforeHouseCargo)) {
				shelterCostsBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST,
						shelterCostsBO.getMessageList());
				beforeHouseCargo = new APP_IN_HOU_BILLS_Cargo();
				beforeHouseCargo.setIndv_seq_num(indvSeqNum);
				beforeHouseCargo.setSeq_num(seqNum);
				beforeHouseCargo.setBill_type(houseType);
				beforeColl.put("APP_IN_HOU_BILLS_Cargo", beforeHouseCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			shelterCostsBO.deleteHouseRecords(indvSeqNum, seqNum, appNum,
					houseType, srcAppInd);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_HO_EXP_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_HO_EXP_PRFL ,houseType);
			}
			
			APP_IN_HOU_BILLS_Collection allRecords = shelterCostsBO
					.loadIndividualShelterDetails(appNum);
			allRecords = shelterCostsBO.getNonCWCargoes(allRecords);
			allHouseBills = shelterCostsBO.filterByIndvSeqNum(allRecords,
					indvSeqNum);
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			int sameTypeCount = 0;
			if (allHouseBills != null) {
				for (int i = 0; i < allHouseBills.size(); i++) {
					if (houseType.equals(allHouseBills.getCargo(i)
							.getBill_type())) {
						sameTypeCount++;
					}
				}
			}
			if (rmcInPrflColl != null) {
				for (int i = 0; i < rmcInPrflColl.size(); i++) {
					if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
							.getIndv_seq_num())) {
						rmcInPrflCargo = rmcInPrflColl.getCargo(i);
					}
				}
			}
			if (sameTypeCount == 0) {
				rmcResponseProfileManager
				.makeNotRequired(
						rmcResponseProfileManager
						.getResponseByType(
								IRMCResponseProfileManager.SHELTER_COST_DETAILS,
								houseType), rmcInPrflCargo,
								true);
			}
			if (allHouseBills == null || allHouseBills.isEmpty()) {
				rmcResponseProfileManager.makeNotRequired(
						IRMCResponseProfileManager.PAY_HOUSING_BILL,
						rmcInPrflCargo, true);
			}
			if (allRecords == null || allRecords.isEmpty()) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXHD", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXHI", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			log(ILog.INFO, "RMCOtherIncomeEJBBean::eraseHousingDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseHousingDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase housing changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseHousingChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.eraseHousingChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseHousingChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			APP_IN_HOU_BILLS_Collection allHouseBills = null;
			String indvSeqNum = null;
			String seqNum = null;
			String houseType = null;
			String srcAppInd;
			final ABHousingBillsBO shelterCostsBO = new ABHousingBillsBO();
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
			APP_IN_HOU_BILLS_Cargo beforeHouseCargo = (APP_IN_HOU_BILLS_Cargo) beforeColl
					.get("APP_IN_HOU_BILLS_Cargo");
			final APP_IN_HOU_BILLS_Collection houseColl = (APP_IN_HOU_BILLS_Collection) pageCollection
					.get("APP_IN_HOU_BILLS_Collection");
			final APP_IN_HOU_BILLS_Cargo houseCargo = houseColl.getCargo(0);
			final String catEmpTyp = AppConstants.RMC_CAT_HO_EXP_PRFL;
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = houseCargo.getIndv_seq_num();
			seqNum = houseCargo.getSeq_num();
			houseType = houseCargo.getBill_type();
			srcAppInd = houseCargo.getSrc_app_ind();

			if (rmcInPrflColl != null) {
				for (int i = 0; i < rmcInPrflColl.size(); i++) {
					if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
							.getIndv_seq_num())) {
						rmcInPrflCargo = rmcInPrflColl.getCargo(i);
					}
				}
			}
			if (beforeHouseCargo == null
					|| shelterCostsBO.isDifferentHouse(houseCargo,
							beforeHouseCargo)) {
				shelterCostsBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST,
						shelterCostsBO.getMessageList());
				beforeHouseCargo = new APP_IN_HOU_BILLS_Cargo();
				beforeHouseCargo.setIndv_seq_num(indvSeqNum);
				beforeHouseCargo.setSeq_num(seqNum);
				beforeHouseCargo.setBill_type(houseType);
				beforeColl.put("APP_IN_HOU_BILLS_Cargo", beforeHouseCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			shelterCostsBO.deleteHouseRecords(indvSeqNum, seqNum, appNum,
					houseType, srcAppInd);

			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catEmpTyp, houseType);
			Boolean flag= shelterCostsBO.getRmcChgSelPrfl(appNum, indvSeqNum, seqNum, catEmpTyp, houseType);
			if(flag){
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catEmpTyp, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), houseType, (short) 2, 'N');
			}
			rmcResponseProfileManager.makeNotRequired(rmcResponseProfileManager
					.getResponseByType(
							IRMCResponseProfileManager.SHELTER_COST_DETAILS,
							houseType), rmcInPrflCargo, true);

			allHouseBills = shelterCostsBO.loadIndividualShelterDetails(appNum);
			allHouseBills = shelterCostsBO.getNonCWCargoes(allHouseBills);

			if (allHouseBills == null || allHouseBills.isEmpty()) {
				rmcResponseProfileManager.makeNotRequired(
						IRMCResponseProfileManager.PAY_HOUSING_BILL,
						rmcInPrflCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXHD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			log(ILog.INFO, "RMCOtherIncomeEJBBean::eraseHousingChanges:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseHousingChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseHousingChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseHousingChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseHousingChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseHousingChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.endHousingDetails() - START");
		try {

			log(ILog.INFO, "RMCHousingExpenseEJBBean::endHousingDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_HOU_BILLS_Collection houseColl = (APP_IN_HOU_BILLS_Collection) pageCollection
					.get("APP_IN_HOU_BILLS_Collection");
			final APP_IN_HOU_BILLS_Cargo houseCargo = houseColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(houseCargo.getIndv_seq_num());
			seqBean.setSeqNum(houseCargo.getSeq_num());
			seqBean.setType(houseCargo.getBill_type());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endHousingDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endHousingDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * End medical bills details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endMedicalBillsDetails() - START");
		try {

			log(ILog.INFO, "RMCHousingExpenseEJBBean::endMedicalBillsDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_MED_BILLS_Collection houseColl = (APP_IN_MED_BILLS_Collection) pageCollection
					.get("APP_IN_MED_BILLS_Collection");
			final APP_IN_MED_BILLS_Cargo houseCargo = houseColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(houseCargo.getIndv_seq_num());
			seqBean.setSeqNum(houseCargo.getSeq_num());
			seqBean.setType(houseCargo.getMed_bill_type());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getMed_bills_stat_ind() != null
						&& !rmbRqstCargo.getMed_bills_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setMed_bills_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endMedicalBillsDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endMedicalBillsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endMedicalBillsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endMedicalBillsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addHousingDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.addHousingDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			FwMessageList validateInfo = null;
			// get cargo determining user selection
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			final String houseBilSeq = request.get("firstName_house") != null 
					? (String) request.get("firstName_house") : FwConstants.EMPTY_STRING;
			final String houseBillType = request.get("shelterTypeExpense_house") != null 
					? (String) request.get("shelterTypeExpense_house") : FwConstants.EMPTY_STRING;
			final ARXHDValidator housingBillsBO = new ARXHDValidator();
			// validate selections
			validateInfo =  housingBillsBO.validateAdd(houseBilSeq,houseBillType);
			if ((validateInfo != null) && housingBillsBO.hasMessages()) {
				request.put("housingTypeSelected", houseBillType);
				request.put("housingNameSelected", houseBilSeq);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				txnBean.setPageCollection((Map) session
						.get(FwConstants.BEFORE_COLLECTION));
				return;
			}
				
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
			indivSeqBean.setIndivSeqNum(houseBilSeq);
			indivSeqBean.setSeqNum(FwConstants.ZERO);
			indivSeqBean.setType(houseBillType);
			indivSeqBean.setUserEndInd(FwConstants.ZERO);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
			
			final RMC_IN_PRFL_Collection rmcInPrflMstr = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMC_IN_PRFL_Cargo prflCargo = rmcResponseProfileManager.getProfile(rmcInPrflMstr, houseBilSeq);
			rmcResponseProfileManager.makeAddNew(rmcResponseProfileManager.getResponseByType(IRMCResponseProfileManager.SHELTER_COST_DETAILS, houseBillType), prflCargo, true);
			
			// set driver status
			final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
			driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARXHD", driver,	appNum);
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXHI", driver,	appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver, appNum);
			session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addHousingDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addHousingDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addHousingDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addHousingDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addHousingDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.editUtilityDetails() - START");
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editUtilityDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_UTILC_Collection appInUtilcColl = (APP_IN_UTILC_Collection) pageCollection
					.get("APP_IN_UTILC_Collection");
			final APP_IN_UTILC_Cargo appInUtilcCargo = appInUtilcColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInUtilcCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInUtilcCargo.getSeq_num());
			seqBean.setType(appInUtilcCargo.getUtil_typ());

			// setting user end indicator

			if ("RE".equals(appInUtilcCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXUD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editUtilityDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the standard utility details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editStandardUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editStandardUtilityDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editStandardUtilityDetails:Start");

			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editStandardUtilityDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editStandardUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editStandardUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editStandardUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editStandardUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editStandardUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase actual standard.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseActualStandard(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.eraseActualStandard() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::eraseActualStandard:End");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			CP_APP_SNAP_EXP_Collection utilityColl = (CP_APP_SNAP_EXP_Collection) pageCollection
					.get("CP_APP_SNAP_EXP_Collection");
			final ABHousingBillsBO utiltyBO = new ABHousingBillsBO();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			if (utilityColl == null || utilityColl != null
					&& utilityColl.isEmpty()) {
				utilityColl = utiltyBO.loadUtilityExpenses(appNum);
			}
			final CP_APP_SNAP_EXP_Cargo utilityCargo = utilityColl.getCargo(0);

			CP_APP_SNAP_EXP_Cargo beforeHouseCargo = (CP_APP_SNAP_EXP_Cargo) beforeColl
					.get("CP_APP_SNAP_EXP_Cargo");

			if (beforeHouseCargo == null
					|| utiltyBO.isDifferentSnapStandard(utilityCargo,
							beforeHouseCargo)) {

				utiltyBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, utiltyBO.getMessageList());
				beforeHouseCargo = new CP_APP_SNAP_EXP_Cargo();
				beforeHouseCargo.setExpense_seq_num(utilityCargo
						.getExpense_seq_num());
				beforeColl.put("CP_APP_SNAP_EXP_Cargo", beforeHouseCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			utiltyBO.deleteSnapRecords(appNum);

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			log(ILog.INFO, "HousingExpenseEJBBean::eraseActualStandard:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseActualStandard");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseActualStandard");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseActualStandard", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseActualStandard");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseActualStandard() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.eraseUtilityDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseUtilityDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String utilityType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_UTILC_Collection utilityColl = (APP_IN_UTILC_Collection) pageCollection
					.get("APP_IN_UTILC_Collection");
			final APP_IN_UTILC_Cargo utilityCargo = utilityColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMC_IN_PRFL_Cargo matchingCargo = null;

			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (rmcInPrflColl.getCargo(i).getIndv_seq_num()
						.equals(FwConstants.ONE)) {
					matchingCargo = rmcInPrflColl.getCargo(i);
				}
			}
			indvSeqNum = utilityCargo.getIndv_seq_num();
			seqNum = utilityCargo.getSeq_num();
			utilityType = utilityCargo.getUtil_typ();

			APP_IN_UTILC_Cargo beforeHouseCargo = (APP_IN_UTILC_Cargo) beforeColl
					.get("APP_IN_UTILC_Cargo");
			final UtilityCostsBO utilityBillsBO = new UtilityCostsBO();

			if (beforeHouseCargo == null
					|| utilityBillsBO.isDifferentUtility(utilityCargo,
							beforeHouseCargo)) {

				utilityBillsBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						utilityBillsBO.getMessageList());
				beforeHouseCargo = new APP_IN_UTILC_Cargo();
				beforeHouseCargo.setIndv_seq_num(indvSeqNum);
				beforeHouseCargo.setSeq_num(seqNum);
				beforeHouseCargo.setUtil_typ(utilityType);
				beforeColl.put("APP_IN_UTILC_Cargo", beforeHouseCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			utilityBillsBO.deleteUtilityRecords(indvSeqNum, seqNum, appNum);

			final APP_IN_UTILC_Collection utilityDetails = utilityBillsBO
					.loadUtilityBillDetails(appNum);
			final APP_IN_UTILC_Collection noCWUtilityDetails = utilityBillsBO
					.getNonCWUtilityColl(utilityDetails, "CW");

			if (noCWUtilityDetails == null || noCWUtilityDetails.isEmpty()) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXUD", driverArray, appNum);
				rmcResponseProfileManager.makeNotRequired(
						IRMCResponseProfileManager.UTILITY_EXPENSE,
						matchingCargo, true);
			}

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase utility changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseUtilityChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.eraseUtilityChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseUtilityChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String utilityType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_UTILC_Collection utilColl = (APP_IN_UTILC_Collection) pageCollection
					.get("APP_IN_UTILC_Collection");
			final APP_IN_UTILC_Cargo utilityCargo = utilColl.getCargo(0);
			final UtilityCostsBO utilityBillsBO = new UtilityCostsBO();
			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = utilityCargo.getIndv_seq_num();
			seqNum = utilityCargo.getSeq_num();
			utilityType = utilityCargo.getUtil_typ();
			APP_IN_UTILC_Cargo beforeUtilCargo = (APP_IN_UTILC_Cargo) beforeColl
					.get("APP_IN_UTILC_Cargo");

			final UtilityCostsBO utiltyBO = new UtilityCostsBO();
			if (beforeUtilCargo == null
					|| utiltyBO.isDifferentUtility(utilityCargo,
							beforeUtilCargo)) {
				utiltyBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, utiltyBO.getMessageList());
				beforeUtilCargo = new APP_IN_UTILC_Cargo();
				beforeUtilCargo.setIndv_seq_num(indvSeqNum);
				beforeUtilCargo.setSeq_num(seqNum);
				beforeUtilCargo.setUtil_typ(utilityType);
				beforeColl.put("APP_IN_UTILC_Cargo", beforeUtilCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}
			// delete record from database
			utiltyBO.deleteUtilityRecords(indvSeqNum, seqNum, appNum);
			final String catUtilType = AppConstants.RMC_CAT_UT_EXP_PRFL;


			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType, utilityType);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), utilityType, (short) 2, 'N');
			final APP_IN_UTILC_Collection utilityDetails = utilityBillsBO
					.loadUtilityBillDetails(appNum);
			final APP_IN_UTILC_Collection noCWUtilityDetails = utilityBillsBO
					.getNonCWUtilityColl(utilityDetails, "CW");

			if (noCWUtilityDetails == null || noCWUtilityDetails.isEmpty()) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXUD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);

			log(ILog.INFO, "RMCHousingExpenseEJBBean::eraseUtilityChanges:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseUtilityChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseUtilityChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseUtilityChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseUtilityChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseUtilityChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.endUtilityDetails() - START");
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endUtilityDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_UTILC_Collection utilityColl = (APP_IN_UTILC_Collection) pageCollection
					.get("APP_IN_UTILC_Collection");
			final APP_IN_UTILC_Cargo utilityCargo = utilityColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(utilityCargo.getIndv_seq_num());
			seqBean.setSeqNum(utilityCargo.getSeq_num());
			seqBean.setType(utilityCargo.getUtil_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXUD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endUtilityDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addUtilityDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.addUtilityDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			final String utilityBilSeq = request.get("firstName_utilitybills") != null ? (String) request
					.get("firstName_utilitybills") : FwConstants.EMPTY_STRING;
					final String utilityBillType = request
							.get("utilityTypeExpense_utilitybills") != null ? (String) request
									.get("utilityTypeExpense_utilitybills")
									: FwConstants.EMPTY_STRING;
									final ARXUDValidator utilityBillsBO = new ARXUDValidator();
									// validate selections

									if (utilityBilSeq == null
											|| utilityBilSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)
											|| utilityBillType
											.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
										utilityBillsBO.validateAdd();
										// add validation message and return
										request.put(FwConstants.MESSAGE_LIST,
												utilityBillsBO.getMessageList());
										txnBean.setPageCollection((Map) session
												.get(FwConstants.BEFORE_COLLECTION));
										return;
									}
									final String appNum = (String) session.get(AppConstants.APP_NUMBER);
									final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
									indivSeqBean.setIndivSeqNum(FwConstants.ONE);
									indivSeqBean.setSeqNum(FwConstants.ZERO);
									indivSeqBean.setType(utilityBillType);
									indivSeqBean.setUserEndInd(FwConstants.ZERO);
									pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
									final String appType = (String) session
											.get(FwConstants.ACCESS_APPLICATION_TYPE);
									final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
											.get(AppConstants.RMB_RQST_COLLECTION);
									if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
										// Get RMB_RQST_Cargo for appNum
										final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
										if (rmbRqstCargo.getUtil_bill_stat_ind() != null
												&& !rmbRqstCargo.getUtil_bill_stat_ind().equals(
														FwConstants.YES)) {
											rmbRqstCargo.setUtil_bill_stat_ind(FwConstants.YES);
											rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
											rmbColl.addCargo(rmbRqstCargo);
											rmbColl.persist(FwConstants.DAO);
										}
										// add to session
										session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
									}
									// set driver status
									final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
									driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXUD", driver,
											appNum);
									driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXHI", driver,
											appNum);
									driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
											appNum);
									session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addUtilityDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addUtilityDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addUtilityDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addUtilityDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addUtilityDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Check housing utility page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @param catChgCd the cat chg cd
	 * @return true, if successful
	 */
	public boolean checkHousingUtilityPageRequired(
			final SortedSet categorySelectionProfile, final Map catType,
			final String catChgCd) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkHousingUtilityPageRequired() - START");
		try {
			boolean isHousingUtilityPageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catChgCd.equalsIgnoreCase(categorySeqDtl
							.getChangeSelectionCategoryCd())
							&& catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getStatus() != IRMCResponseProfileManager.STATUS_COMPLETE
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND) {
						isHousingUtilityPageRequired = true;
						break;
					}
				}
			}
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkHousingUtilityPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isHousingUtilityPageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkHousingUtilityPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkHousingUtilityPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkHousingUtilityPageRequired");
		}

	}

	/**
	 * Check housing utility details page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @param catChgCd the cat chg cd
	 * @return true, if successful
	 */
	public boolean checkHousingUtilityDetailsPageRequired(
			final SortedSet categorySelectionProfile, final Map catType,
			final String catChgCd) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkHousingUtilityDetailsPageRequired() - START");
		try {
			boolean isHousingUtilityPageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catChgCd.equalsIgnoreCase(categorySeqDtl
							.getChangeSelectionCategoryCd())
							&& catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND) {
						isHousingUtilityPageRequired = true;
						break;
					}
				}
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkHousingUtilityDetailsPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isHousingUtilityPageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkHousingUtilityDetailsPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkHousingUtilityPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkHousingUtilityDetailsPageRequired");
		}

	}

	/**
	 * Gets the housing types.
	 *
	 * @return the housing types
	 */
	private Map getHousingTypes() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getHousingTypes() - START");

		final Map catHouseTypes = new HashMap();
		catHouseTypes.put("RM", "RM");
		catHouseTypes.put("RE", "RE");
		catHouseTypes.put("HI", "HI");
		catHouseTypes.put("NO", "NO");
		catHouseTypes.put("DR", "DR");
		catHouseTypes.put("PE", "PE");
		catHouseTypes.put("OH", "OH");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getHousingTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catHouseTypes;
	}

	/**
	 * Gets the medical types.
	 *
	 * @return the medical types
	 */
	private Map getMedicalTypes() {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getMedicalTypes() - START");

		final Map catMedTypes = new HashMap();
		catMedTypes.put("AI", "AI");
		catMedTypes.put("AM", "AM");
		catMedTypes.put("AN", "AN");
		catMedTypes.put("AT", "AT");
		catMedTypes.put("CB", "CB");
		catMedTypes.put("DE", "DE");
		catMedTypes.put("EY", "EY");
		catMedTypes.put("HO", "HO");
		catMedTypes.put("MD", "MD");
		catMedTypes.put("ME", "ME");
		catMedTypes.put("NH", "NH");
		catMedTypes.put("OT", "OT");
		catMedTypes.put("OU", "OU");

		catMedTypes.put("PS", "PS");

		catMedTypes.put("RX", "RX");
		catMedTypes.put("TR", "TR");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getMedicalTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catMedTypes;

	}

	/**
	 * Gets the impairment related work expenses types.
	 *
	 * @return the impairment related work expenses types
	 */
	private Map getImpairmentRelatedWorkExpensesTypes() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getImpairmentRelatedWorkExpensesTypes() - START");

		final Map impExpTypes = new HashMap();
		impExpTypes.put("IR", "IR");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getImpairmentRelatedWorkExpensesTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return impExpTypes;

	}

	/**
	 * Gets the room and board types.
	 *
	 * @return the room and board types
	 */
	private Map getRoomAndBoardTypes() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getRoomAndBoardTypes() - START");

		final Map catRBTypes = new HashMap();
		catRBTypes.put("RB", "RB");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getRoomAndBoardTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catRBTypes;

	}

	/**
	 * Gets the dependent care exp types.
	 *
	 * @return the dependent care exp types
	 */
	private Map getDependentCareExpTypes() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getDependentCareExpTypes() - START");

		final Map catRBTypes = new HashMap();
		catRBTypes.put("DC", "DC");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getDependentCareExpTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catRBTypes;

	}

	/**
	 * Gets the medi care exp types.
	 *
	 * @return the medi care exp types
	 */
	private Map getMediCareExpTypes() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getMediCareExpTypes() - START");

		final Map catRBTypes = new HashMap();
		catRBTypes.put("MC", "MC");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getMediCareExpTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catRBTypes;

	}

	/**
	 * Gets the support payments obligation type.
	 *
	 * @return the support payments obligation type
	 */
	private Map getSupportPaymentsObligationType() {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getSupportPaymentsObligationType() - START");

		final Map catRBTypes = new HashMap();
		catRBTypes.put("SP", "SP");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getSupportPaymentsObligationType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catRBTypes;

	}

	/**
	 * Gets the utility types.
	 *
	 * @return the utility types
	 */
	private Map getUtilityTypes() {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getUtilityTypes() - START");
		final Map catUtilityTypes = new HashMap();

		catUtilityTypes.put("EL", "EL");
		catUtilityTypes.put("GA", "GA");
		catUtilityTypes.put("KE", "KE");
		catUtilityTypes.put("CO", "CO");
		catUtilityTypes.put("OI", "OI");
		catUtilityTypes.put("WO", "WO");
		catUtilityTypes.put("SE", "SE");
		catUtilityTypes.put("TR", "TR");
		catUtilityTypes.put("IN", "IN");
		catUtilityTypes.put("PH", "PH");
		catUtilityTypes.put("OT", "OT");

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getUtilityTypes() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return catUtilityTypes;

	}

	/**
	 * Checks if is housing detail page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is housing detail page required
	 */
	private boolean isHousingDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isHousingDetailPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getPay_hous_bill_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getSu_cst_home_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_rent_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getHousing_bill_others_resp()
				.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
				.getSu_cst_mbl_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isHousingDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is utility detail page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is utility detail page required
	 */
	private boolean isUtilityDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isUtilityDetailPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getUtil_exp_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getSu_cst_elec_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_gas_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_fuel_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_coal_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getUtility_bills_oil_resp()
				.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_wood_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_swr_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_trsh_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_istl_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getSu_cst_phn_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
				.getSu_cst_othr_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isUtilityDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Load expenses gate post questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadExpensesGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadExpensesGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadExpensesGatePostQuestions:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);

			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			String jsEnabled = FwConstants.NO;
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// get questions extraction handler from session
			final QuestionsExtractionHandler extractionHandler = (QuestionsExtractionHandler) session
					.get(AppConstants.QUESTION_EXTRACTION_HANDLER);
			// now get the components for the current page
			componentManager.getComponents("ARXGQ", txnBean);
			// get component list from page collection
			final List cpntList = (ArrayList) pageCollection
					.get(FwConstants.PAGE_COMPONENT_LIST);
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			// intialize webservice type array
			final List typeArrayList = new ArrayList();

			// Checking for housing details
			if (cpntList.contains("5224")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5224")) {
				typeArrayList.add(AppConstants.HE_EXT_SHELTER);
			}
			// Checking for utility details
			if (cpntList.contains("5225")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5225")) {
				typeArrayList.add(AppConstants.HE_EXT_UTILITY);
			}
			// Checking for Room & Board details
			if (cpntList.contains("5226")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5226")) {
				typeArrayList.add(AppConstants.HE_EXT_ROOM_AND_BOARD);
			}
			// Checking for Dependent care details
			if (cpntList.contains("5227")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5227")) {
				typeArrayList.add(AppConstants.HE_EXT_DEPENDENT_CARE);
			}
			// Checking for Support obligations details
			if (cpntList.contains("5228")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5228")) {
				typeArrayList.add(AppConstants.HE_EXT_PAYMENT_AND_OBLIGATIONS);
			}

			// Checking for Impairment details
			if (cpntList.contains("5229")
					&& !extractionHandler.checkRMBExtractionStatus("ARXGQ",
							"5229")) {
				typeArrayList.add(AppConstants.HE_EXT_IRWE);
			}

			jsEnabled = (String) httpSessMap.get(FwConstants.JS_ENABLED);
			final List dataList = new ArrayList();

			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}

			final INDIVIDUAL_Custom_Collection filteredIndvCustomColl = new INDIVIDUAL_Custom_Collection();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indivCustomCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				if (RulesBO.isValidAge(indivCustomCargo.getIndv_age(), 16,
						RulesBO.OPERAND_GREATER_THAN_EQUAL)) {
					filteredIndvCustomColl.add(indivCustomCargo);
				}
			}

			// Extraction Changes Starts

			APP_IN_SHLTC_Collection shelterCollWs = null;
			APP_IN_UTILC_Collection utilityCollWs = null;
			APP_IN_RM_BRD_EXP_Collection roomBoardCollWs = null;
			APP_IN_ROOM_BRD_Collection rmBoardCollWs = null;
			APP_IN_DC_E_Collection dependentCollWs = null;
			APP_IN_SPRT_OBLG_Collection supportCollWs = null;
			APP_IN_IRWE_Collection impairmentCollWs = null;

			final HousingExpenseBO housingExpenseBO = new HousingExpenseBO();

			if (!typeArrayList.isEmpty() && filteredIndvCustomColl != null
					&& !filteredIndvCustomColl.isEmpty()) {

				final List pinNumList = new ArrayList();
				final int indvCollSize = filteredIndvCustomColl.size();
				INDIVIDUAL_Custom_Cargo indivCustCargo = null;
				// Filter pin numbers which are null (new individuals) - PCR
				// 30457
				String pinNumber = null;
				for (int i = 0; i < indvCollSize; i++) {
					indivCustCargo = filteredIndvCustomColl.getResult(i);
					pinNumber = indivCustCargo.getIndv_pin_num();

					if (pinNumber != null) {
						pinNumList.add(indivCustCargo.getIndv_pin_num());
					}
				}
				try {
					if (!typeArrayList.isEmpty()) {

						final HOUSING_EXPENSE_CUST_Cargo housingExpenseCustomCargo = housingExpenseBO
								.getHousingExpenseDetailsFromCares(pinNumList,
										appNum, typeArrayList);
						if (housingExpenseCustomCargo != null) {

							if (housingExpenseCustomCargo.getAppInShltcColl() != null
									&& !housingExpenseCustomCargo
									.getAppInShltcColl().isEmpty()) {
								shelterCollWs = housingExpenseCustomCargo
										.getAppInShltcColl();
								final APP_IN_SHLTC_Collection updatedShltColl = new APP_IN_SHLTC_Collection();
								if (shelterCollWs != null
										&& !shelterCollWs.isEmpty()) {
									for (int i = 0; i < shelterCollWs.size(); i++) {
										final APP_IN_SHLTC_Cargo cargo = shelterCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getIndv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updatedShltColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertShelterExpenseDetails(updatedShltColl);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5224");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}
							if (housingExpenseCustomCargo.getAppInUtlcColl() != null
									&& !housingExpenseCustomCargo
									.getAppInUtlcColl().isEmpty()) {
								utilityCollWs = housingExpenseCustomCargo
										.getAppInUtlcColl();
								// Utility Expenses
								final APP_IN_UTILC_Collection updatedUtilColl = new APP_IN_UTILC_Collection();
								if (utilityCollWs != null
										&& !utilityCollWs.isEmpty()) {
									for (int i = 0; i < utilityCollWs.size(); i++) {
										final APP_IN_UTILC_Cargo cargo = utilityCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getIndv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updatedUtilColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertUtilityExpenseDetails(utilityCollWs);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5225");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}
							if (housingExpenseCustomCargo
									.getAppInRmBrdExpColl() != null
									&& !housingExpenseCustomCargo
									.getAppInRmBrdExpColl().isEmpty()) {
								roomBoardCollWs = housingExpenseCustomCargo
										.getAppInRmBrdExpColl();
								rmBoardCollWs = housingExpenseCustomCargo
										.getAppInRoomBrdColl();
								// Room Board Expenses
								final APP_IN_ROOM_BRD_Collection updatedRoomColl = new APP_IN_ROOM_BRD_Collection();
								final APP_IN_RM_BRD_EXP_Collection updateRoomBoardColl = new APP_IN_RM_BRD_EXP_Collection();
								if (rmBoardCollWs != null
										&& !rmBoardCollWs.isEmpty()) {
									for (int i = 0; i < roomBoardCollWs.size(); i++) {
										final APP_IN_RM_BRD_EXP_Cargo cargo = roomBoardCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getPayr_indv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updateRoomBoardColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertRoomBoardExpenseDetails(updateRoomBoardColl);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5226");
								}

								if (rmBoardCollWs != null) {
									for (int i = 0; i < rmBoardCollWs.size(); i++) {
										final APP_IN_ROOM_BRD_Cargo cargo = rmBoardCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getPayr_indv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updatedRoomColl.addCargo(cargo);
										}

									}
								}
								housingExpenseBO
								.insertRoomBoardDetails(updatedRoomColl);

							}

							if (housingExpenseCustomCargo.getAppInDcEColl() != null
									&& !housingExpenseCustomCargo
									.getAppInDcEColl().isEmpty()) {
								dependentCollWs = housingExpenseCustomCargo
										.getAppInDcEColl();
								// Dependent Care Expenses
								final APP_IN_DC_E_Collection updatedDepColl = new APP_IN_DC_E_Collection();
								if (dependentCollWs != null) {
									for (int i = 0; i < dependentCollWs.size(); i++) {
										final APP_IN_DC_E_Cargo cargo = dependentCollWs
												.getResult(i);
										final String indvSeqNum = cargo
												.getIndv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updatedDepColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertDependentExpenseDetails(updatedDepColl);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5227");
								}
							}
							if (housingExpenseCustomCargo
									.getAppInSprtOblgColl() != null
									&& !housingExpenseCustomCargo
									.getAppInSprtOblgColl().isEmpty()) {
								supportCollWs = housingExpenseCustomCargo
										.getAppInSprtOblgColl();
								final APP_IN_SPRT_OBLG_Collection updateSprtColl = new APP_IN_SPRT_OBLG_Collection();
								// Support payment Expenses
								if (supportCollWs != null) {
									for (int i = 0; i < supportCollWs.size(); i++) {
										final APP_IN_SPRT_OBLG_Cargo cargo = supportCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getIndv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 18) {
											updateSprtColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertSupportPaymentDetails(updateSprtColl);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5228");
								}
							}
							if (housingExpenseCustomCargo.getAppInIRWEColl() != null
									&& !housingExpenseCustomCargo
									.getAppInIRWEColl().isEmpty()) {
								impairmentCollWs = housingExpenseCustomCargo
										.getAppInIRWEColl();
								final APP_IN_IRWE_Collection updateIRWEColl = new APP_IN_IRWE_Collection();
								// Support payment Expenses
								if (impairmentCollWs != null) {
									for (int i = 0; i < impairmentCollWs.size(); i++) {
										final APP_IN_IRWE_Cargo cargo = impairmentCollWs
												.getCargo(i);
										final String indvSeqNum = cargo
												.getIndv_seq_num();
										final IndividualAge indvAge = peopleHandler
												.getIndividualAge(indvSeqNum);
										if (indvAge.getYears() >= 16) {
											updateIRWEColl.addCargo(cargo);
										}

									}
									housingExpenseBO
									.insertImpairmentDetails(updateIRWEColl);
									extractionHandler.addRMBExtractionStatus(
											"ARXGQ", "5229");
								}
							}
						}
					}
				} catch (final FwException fe) {
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(fe);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadHousingExpenseSelection");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;

				} catch (final Exception e) {
					final FwException fe = createFwException(this.getClass()
							.getName(), "loadHousingExpenseSelection", e);
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(e);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadHousingExpenseSelection");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;
				}
			}
			// Extraction changes Ends


			// Get the house bills info
			final HouseBillsBO houseBills = new HouseBillsBO();
			final APP_IN_SHLTC_Collection houseColl = houseBills
					.loadHouseBillDetails(appNum);
			final APP_IN_SHLTC_Collection newHouseColl = new APP_IN_SHLTC_Collection();
			if (houseColl != null && !houseColl.isEmpty()) {
				for (int i = 0; i < houseColl.size(); i++) {
					final APP_IN_SHLTC_Cargo cargo = houseColl.getCargo(i);
					if ("CW".equals(cargo.getSrc_app_ind())) {
						newHouseColl.addCargo(cargo);
					}
				}

			}

			// Get the Utility Bills info
			final UtilityBillsBO utilityBillsBO = new UtilityBillsBO();
			final APP_IN_UTILC_Collection utilityColl = utilityBillsBO
					.loadUtilityBillDetails(appNum);
			final APP_IN_UTILC_Collection newUtilityColl = new APP_IN_UTILC_Collection();
			if (utilityColl != null && !utilityColl.isEmpty()) {
				for (int i = 0; i < utilityColl.size(); i++) {
					final APP_IN_UTILC_Cargo cargo = utilityColl.getCargo(i);
					if ("CW".equals(cargo.getSrc_app_ind())) {
						newUtilityColl.addCargo(cargo);
					}
				}

			}

			// Get dependent care info
			final DependentCareExpensesBO dependentCareBO = new DependentCareExpensesBO();
			final APP_IN_DC_E_Collection dependentCareColl = dependentCareBO
					.loadDependentCareDetails(appNum);

			dataList.add(newHouseColl);

			final RMBHousingBillsGPListView rmbHousingBillsListView = new RMBHousingBillsGPListView();
			rmbHousingBillsListView.setLanguage(language);
			rmbHousingBillsListView.setJsEnabled(jsEnabled);
			rmbHousingBillsListView.setName("HSE_BILL");
			rmbHousingBillsListView.setCollection(indvColl);
			rmbHousingBillsListView.setDisplayData(dataList);
			rmbHousingBillsListView.setPageSize(1000);
			pageCollection.put("HSE_BILL", rmbHousingBillsListView);
			pageCollection.put("HSE_BILL_COLL", newHouseColl);

			final List utilList = new ArrayList();
			utilList.add(newUtilityColl);

			final RMBUtilityBillsGPListView rmbUtilityBillsGPListView = new RMBUtilityBillsGPListView();
			rmbUtilityBillsGPListView.setLanguage(language);
			rmbUtilityBillsGPListView.setJsEnabled(jsEnabled);
			rmbUtilityBillsGPListView.setName("UTL_BILL");
			rmbUtilityBillsGPListView.setCollection(indvColl);
			rmbUtilityBillsGPListView.setDisplayData(utilList);
			rmbUtilityBillsGPListView.setPageSize(1000);
			pageCollection.put("UTL_BILL", rmbUtilityBillsGPListView);
			pageCollection.put("UTL_BILL_COLL", newUtilityColl);

			final List depList = new ArrayList();
			depList.add(dependentCareColl);
			depList.add(indvNameMap);
			depList.add(peopleHandler);
			final RMBDependentCareGPListView rmbDependentCareGPListView = new RMBDependentCareGPListView();
			rmbDependentCareGPListView.setLanguage(language);
			rmbDependentCareGPListView.setJsEnabled(jsEnabled);
			rmbDependentCareGPListView.setName("DEP_CARE_BILL");
			rmbDependentCareGPListView.setCollection(indvColl);
			rmbDependentCareGPListView.setDisplayData(depList);
			rmbDependentCareGPListView.setPageSize(1000);
			pageCollection.put("DEP_CARE_BILL", rmbDependentCareGPListView);
			pageCollection.put("DEP_CARE_BILL_COLL", dependentCareColl);

			// if comming back load with previously selection resposnes
			// get current page driver status
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int currentPageStaus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARXGQ", driverArray);
			// get RMB Rqst Manager
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			// preapare security map for questions if the user is re-visting the
			// page
			if (currentPageStaus != FwConstants.DRIVER_REQUIRED) {
				// get session RMC_CHG_SEL_PRFL
				SortedSet sessChgSelectionProfile = (SortedSet) session
						.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
				// this map holds the response of
				Map securityRadioOptionsMap = new HashMap();

				// get rmc_in_prfl from session
				final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				//
				// call RMBRequest Manager to get the question response
				sessChgSelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNum,
								AppConstants.RMC_CAT_HO_EXP_PRFL);
				securityRadioOptionsMap = rmbRqstManager.getStatusForGatePost(
						AppConstants.RMB_EXPENSES_GATE_POST_PAGE,
						sessRMBRqstColl, driverArray, sessRMCInPrflColl,
						sessChgSelectionProfile, peopleHandler);
				pageCollection.put("RADIO_OPTION_MAP", securityRadioOptionsMap);
			}

			if (beforeColl == null) {
				beforeColl = new HashMap();
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}

			componentManager.getComponents("ARXGQ", txnBean);
			beforeColl.putAll(pageCollection);
			txnBean.setPageCollection(pageCollection);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadExpensesGatePostQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadExpensesGatePostQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadExpensesGatePostQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadExpensesGatePostQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadExpensesGatePostQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadExpensesGatePostQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store expenses gate post questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeExpensesGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeExpensesGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeExpensesGatePostQuestions:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get appNumber from the session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// get people handler from session
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			// get RMB_RQST_Collection from pageCollection
			final RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");
			RMB_RQST_Cargo pageRMBRqstCargo = null;
			// get session RMB_RQST_COlleaction
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			final RMB_RQST_Cargo sessRMBRqstCargo = sessRMBRqstColl.getCargo(0);
			// get RMB_RQST_Cargo
			pageRMBRqstCargo = pageRMBRqstColl.getCargo(0);
			final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// get component list for before collection to know which are all
			// the questions displayed on the JSP
			final List pageCpntList = (ArrayList) beforeColl
					.get(FwConstants.PAGE_COMPONENT_LIST);
			// now do the validation

			final HousingExpenseBO expensesBo = new HousingExpenseBO();
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final short[] programKey = (short[]) session
					.get(FwConstants.RMC_PROGRAM_KEY);

			if (backToMyAccess == null) {
				expensesBo.validateARXGQ(pageRMBRqstCargo, pageCpntList,
						appType, sessRMBRqstCargo, programKey);
			}

			if (checkBackToMyAccessSelected(request) || expensesBo != null
					&& expensesBo.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							expensesBo.getMessageList());
				}
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				session.put(AppConstants.RMB_RQST_COLLECTION,
						session.get(AppConstants.RMB_RQST_COLLECTION));
				session.put(FwConstants.BEFORE_COLLECTION,
						session.get(FwConstants.BEFORE_COLLECTION));
				session.put(AppConstants.QUESTION_EXTRACTION_HANDLER,
						session.get(AppConstants.QUESTION_EXTRACTION_HANDLER));
				pageCollection.put("HSE_BILL", beforeColl.get("HSE_BILL"));
				pageCollection.put("HSE_BILL_COLL",
						beforeColl.get("HSE_BILL_COLL"));
				pageCollection.put("UTL_BILL", beforeColl.get("UTL_BILL"));
				pageCollection.put("UTL_BILL_COLL",
						beforeColl.get("UTL_BILL_COLL"));
				pageCollection.put("ROOM_MEAL_BILL",
						beforeColl.get("ROOM_MEAL_BILL"));
				pageCollection.put("ROOM_MEAL_BILL_COLL",
						beforeColl.get("ROOM_MEAL_BILL_COLL"));
				pageCollection.put("DEP_CARE_BILL",
						beforeColl.get("DEP_CARE_BILL"));
				pageCollection.put("DEP_CARE_BILL_COLL",
						beforeColl.get("DEP_CARE_BILL_COLL"));
				pageCollection.put("SUPPORT_BILL",
						beforeColl.get("SUPPORT_BILL"));
				pageCollection.put("SUPPORT_BILL_COLL",
						beforeColl.get("SUPPORT_BILL_COLL"));
				pageCollection.put("IMPAIRMENT_BILL",
						beforeColl.get("IMPAIRMENT_BILL"));
				pageCollection.put("IMPAIRMENT_BILL_COLL",
						beforeColl.get("IMPAIRMENT_BILL_COLL"));
				if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "ARXGQ",
						driverArray) == FwConstants.DRIVER_REQUIRED) {
					pageCollection.put("RADIO_OPTION_MAP", rmbRqstManager
							.getStatusForGatePostAfterValidation(
									AppConstants.RMB_EXPENSES_GATE_POST_PAGE,
									pageRMBRqstColl));
				} else {

					// get session RMC_CHG_SEL_PRFL
					final SortedSet sessChgSelectionProfile = (SortedSet) session
							.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
					pageCollection.put("RADIO_OPTION_MAP", rmbRqstManager
							.getStatusForGatePost(
									AppConstants.RMB_EXPENSES_GATE_POST_PAGE,
									sessRMBRqstColl, driverArray,
									sessRMCInPrflColl, sessChgSelectionProfile,
									peopleHandler));
				}

				componentManager.getComponents("ARXGQ", txnBean);
				return;
			}

			// call request manager to get complete cargo
			pageRMBRqstCargo = rmbRqstManager.getCompleteCargo(
					sessRMBRqstCargo, pageRMBRqstCargo);
			// now call ischanged
			pageRMBRqstCargo = (RMB_RQST_Cargo) isChanged(sessRMBRqstCargo,
					pageRMBRqstCargo);
			final int currentPageStaus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARXGQ", driverArray);
			if (currentPageStaus != FwConstants.DRIVER_REQUIRED) {
				rmbRqstManager.changeStatusOnGatePost(pageRMBRqstColl, session,
						AppConstants.RMB_EXPENSES_GATE_POST_PAGE);
			}
			// check if collection is Dirty Update RMBRequest Table with user
			// response .
			if (pageRMBRqstCargo.isDirty()) {
				pageRMBRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				final RMB_RQST_Collection rMBRqstColl = new RMB_RQST_Collection();
				rMBRqstColl.add(pageRMBRqstCargo);
				rmbRqstManager.storeRMBRqst(rMBRqstColl);
				// put the update RMB_RQST_Collection into session
				session.put(AppConstants.RMB_RQST_COLLECTION, rMBRqstColl);
			}
			final int aARXIQPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARXIQ", driverArray);
			final int aARXHUPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARXHU", driverArray);
			boolean aARXHUPageRequired = false;
			boolean aARXHUPageCompleted = false;
			final int aARSTDPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARSTD", driverArray);

			if (pageRMBRqstCargo.getMed_bills_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getMed_bills_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getMed_bills_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
			} else if (pageRMBRqstCargo.getMed_bills_stat_ind().equals(
					FwConstants.YES)
					&& (aARXIQPageStatus == FwConstants.DRIVER_REQUIRED || aARXIQPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
			} else if (pageRMBRqstCargo.getMed_bills_stat_ind().equals(
					FwConstants.YES)
					&& aARXIQPageStatus == FwConstants.DRIVER_COMPLETE) {
			}

			if (pageRMBRqstCargo.getHous_bill_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getHous_bill_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getHous_bill_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getHous_bill_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getHous_bill_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}
			// pregnancy change
			if (pageRMBRqstCargo.getUtil_bill_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getUtil_bill_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getUtil_bill_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getUtil_bill_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getUtil_bill_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (pageRMBRqstCargo.getSprt_oblg_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getSprt_oblg_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getSprt_oblg_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getSprt_oblg_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getSprt_oblg_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (pageRMBRqstCargo.getDpnd_care_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getDpnd_care_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getDpnd_care_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getDpnd_care_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getDpnd_care_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (pageRMBRqstCargo.getMedicare_assist_req_stat_ind().equals(
					FwConstants.YES)
					&& (sessRMBRqstCargo.getMedicare_assist_req_stat_ind()
							.equals(FwConstants.NO) || sessRMBRqstCargo
							.getMedicare_assist_req_stat_ind().equals(
									FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getMedicare_assist_req_stat_ind()
					.equals(FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getMedicare_assist_req_stat_ind()
					.equals(FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (pageRMBRqstCargo.getSnap_shelter_standard_exp_ind().equals(
					FwConstants.YES)
					&& (sessRMBRqstCargo.getSnap_shelter_standard_exp_ind()
							.equals(FwConstants.NO) || sessRMBRqstCargo
							.getSnap_shelter_standard_exp_ind().equals(
									FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARSTD",
						driverArray, appNum);
			} else if (pageRMBRqstCargo.getSnap_shelter_standard_exp_ind()
					.equals(FwConstants.YES)
					&& (aARSTDPageStatus == FwConstants.DRIVER_REQUIRED || aARSTDPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
			} else if (pageRMBRqstCargo.getSnap_shelter_standard_exp_ind()
					.equals(FwConstants.YES)
					&& aARSTDPageStatus == FwConstants.DRIVER_COMPLETE) {
			}

			if (pageRMBRqstCargo.getIrwe_stat_ind().equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getIrwe_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getIrwe_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getIrwe_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getIrwe_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (pageRMBRqstCargo.getMed_bills_stat_ind()
					.equals(FwConstants.YES)
					&& (sessRMBRqstCargo.getMed_bills_stat_ind().equals(
							FwConstants.NO) || sessRMBRqstCargo
							.getMed_bills_stat_ind().equals(FwConstants.HIDDEN))) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getMed_bills_stat_ind().equals(
					FwConstants.YES)
					&& (aARXHUPageStatus == FwConstants.DRIVER_REQUIRED || aARXHUPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				aARXHUPageRequired = true;
			} else if (pageRMBRqstCargo.getMed_bills_stat_ind().equals(
					FwConstants.YES)
					&& aARXHUPageStatus == FwConstants.DRIVER_COMPLETE) {
				aARXHUPageCompleted = true;
			}

			if (!aARXHUPageRequired) {
				if (!aARXHUPageCompleted) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARXHU", driverArray,
							appNum);
				}
			} else {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHU",
						driverArray, appNum);
			}

			session.put(AppConstants.RMC_IN_PRFL_MASTER, sessRMCInPrflColl);

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARXGQ",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeExpensesGatePostQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeExpensesGatePostQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeExpensesGatePostQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeExpensesGatePostQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeExpensesGatePostQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeExpensesGatePostQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load expenses intermediate questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadExpensesIntermediateQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadExpensesIntermediateQuestions() - START");
		try {

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadExpensesIntermediateQuestions:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);

			// get people handler from session
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			// get rmc_in_prfl from session
			final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// //Getting the list of components into collection
			componentManager.getComponents(currentPageID, txnBean);
			final Map medInsMap = new HashMap();

			if (sessRMCInPrflColl != null && !sessRMCInPrflColl.isEmpty()) {
				for (int i = 0; i < sessRMCInPrflColl.size(); i++) {
					final RMC_IN_PRFL_Cargo prflCargo = sessRMCInPrflColl
							.getCargo(i);
					if (prflCargo.getMed_exp_resp() != null
							&& !prflCargo.getMed_exp_resp().trim()
							.equals(FwConstants.EMPTY_STRING)
							&& prflCargo.getMed_exp_resp() != null) {
						medInsMap.put(prflCargo.getIndv_seq_num(),
								prflCargo.getMed_exp_resp());
					}
				}
			}

			getPeopleCollectionAndUpdateMapsforRMC(sessRMCInPrflColl,
					sessRMCInPrflColl, pageCollection, peopleHandler, "5237",
					IRMCResponseProfileManager.MEDICAL_EXPENSE, true,
					driverStatus, true);

			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());
			pageCollection.put("RESP_MAP_5237", medInsMap);
			// Set session into transaction Bean
			txnBean.setSession(session);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadExpensesIntermediateQuestions:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadExpensesIntermediateQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadExpensesIntermediateQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadExpensesIntermediateQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadExpensesIntermediateQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadExpensesIntermediateQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store expenses intermediate questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeExpensesIntermediateQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeExpensesIntermediateQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeExpensesIntermediateQuestions:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			// Getting Peoplehandler
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);


			// Getting RMC_IN_PRFL_Collection from page collection
			final RMC_IN_PRFL_Collection requestAppInPrflCollection = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");


			// Getting RMC_IN_PRFL_Collection from session
			final RMC_IN_PRFL_Collection sessionAppInPrflCollection = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// Getting RMC_IN_PRFL_Collection from before collection map
			final Map beforeCollection = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final Map noOneCheckedMap = (Map) beforeCollection
					.get(AppConstants.NO_ONE_CHECKED_MAP);
			// Getting No one collection from page Collection map
			final NO_ONE_Collection noOneCollection = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			final int noOneCollectionSize = noOneCollection.size();
			// Getting RMB Request Collection from Session
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			sessRMBRqstColl.getCargo(0);

			// Getting app number from session
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			// Initializing array for a number of questions (assuming the number
			// of questions is static)
			final short[] questionsTypesArray = { IRMCResponseProfileManager.MEDICAL_EXPENSE };

			// Initialize driver components and update noOne flag
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String currentPageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageId, driverArray);

			rmcResponseProfileManager.preparePageColl(
					requestAppInPrflCollection, sessionAppInPrflCollection,
					questionsTypesArray);
			// Getting size of request App in prfl after updating it with dummy
			// cargos
			final int requestAppInPrflCollectionSize = requestAppInPrflCollection
					.size();

			// Validation
			final ARExpenseIntermediateGatepostQuestionsBO arExpInGateQuestionsBO = new ARExpenseIntermediateGatepostQuestionsBO();

			// Defaulting number of components displayed to false
			boolean[] componentsDisplayed = new boolean[] { false };
			componentsDisplayed = arExpInGateQuestionsBO
					.getComponentsDisplayed(beforeCollection,
							componentsDisplayed);

			// Check Back to Access
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {
				arExpInGateQuestionsBO.validateQuestions(
						requestAppInPrflCollection, noOneCollection,
						noOneCheckedMap, true, componentsDisplayed);
			}

			if (checkBackToMyAccessSelected(request)
					|| arExpInGateQuestionsBO.hasMessages()) {

				// Putting error message in request map
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arExpInGateQuestionsBO.getMessageList());
				}

				// Translate the profile responses with updated responses
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						requestAppInPrflCollection,
						sessionAppInPrflCollection, questionsTypesArray);

				getPeopleCollectionAndUpdateMapsforRMC(
						requestAppInPrflCollection, sessionAppInPrflCollection,
						pageCollection, peopleHandler, "5237",
						IRMCResponseProfileManager.MEDICAL_EXPENSE, true,
						driverStatus, true);
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);

				pageCollection.put("PEOPLE_5237",
						beforeCollection.get("PEOPLE_5237"));
				// Putting component ids into the pageCollection
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));

				// Set before collection to pageCollection
				txnBean.setPageCollection(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION,
						txnBean.getPageCollection());
				// Set session into transaction Bean
				txnBean.setSession(session);
				// Set request into transaction Bean
				txnBean.setRequest(request);

				return;
			}
			// Validation - end

			// If there are no error messages
			// Initializing dirty indicator for the pages to be scheduled
			// Creating Page Scheduling Indicator for future pages depending
			// upon questions
			final int[] dummyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };

			// Initializing dirty flags for each individuals to false
			final boolean[] arePeopleDirty = new boolean[rmcResponseProfileManager
			                                             .getMaxIndvSeqNumber(sessionAppInPrflCollection) + 1];

			// Initializing translate profile arraylist
			String[] translatedProfileArray = null;
			final Map indvResponseMap = new HashMap();

			// Loop for each individual in session app indv profile and updating
			// it with new responses
			for (int s = 0; s < requestAppInPrflCollectionSize; s++) {

				final RMC_IN_PRFL_Cargo sessionAppInPrflCargo = sessionAppInPrflCollection
						.getCargo(s);
				sessionAppInPrflCargo.getIndv_seq_num();
				final RMC_IN_PRFL_Cargo requestAppInPrflAfterCargo = rmcResponseProfileManager
						.getProfile(requestAppInPrflCollection,
								sessionAppInPrflCargo.getIndv_seq_num());
				final String requestIndvSeqNum = requestAppInPrflAfterCargo
						.getIndv_seq_num();

				translatedProfileArray = new String[questionsTypesArray.length];

				// Checking for any changes in the page since load
				for (int i = 0; i < questionsTypesArray.length; i++) {
					if (questionsTypesArray[i] == IRMCResponseProfileManager.MEDICAL_EXPENSE) {
						getUpdatedSessionCollection(driverStatus,
								dummyIndicator, requestIndvSeqNum,
								requestAppInPrflAfterCargo,
								sessionAppInPrflCargo, questionsTypesArray[i],
								arePeopleDirty);
					}

					translatedProfileArray[i] = rmcResponseProfileManager
							.getProfileResponse(sessionAppInPrflCargo,
									questionsTypesArray[i]);
				}
				indvResponseMap.put(requestIndvSeqNum, translatedProfileArray);

			}

			// Persistence logic start
			if (arePeopleDirty[0] == true) {
				for (int i = 0; i < requestAppInPrflCollectionSize; i++) {
					final String indvSeqNum = requestAppInPrflCollection
							.getCargo(i).getIndv_seq_num();
					if (arePeopleDirty[Integer.parseInt(indvSeqNum)] == true) {
						rmcResponseProfileManager.persist(appNumber,
								indvSeqNum, questionsTypesArray,
								(String[]) indvResponseMap.get(indvSeqNum));
					}
				}
			}

			// Page scheduling logic
			// Page scheduling logic
			// Medical Expense Detail page
			if (dummyIndicator[0] != IRMCResponseProfileManager.NOT_DIRTY) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNumber,
						dummyIndicator[0], "ARMBD", driverArray);
			}

			// Making the current page complete in the driver
			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageId,
					driverArray, appNumber);

			if (requestAppInPrflCollectionSize == 0 || noOneCollectionSize == 1) {

				// Make not required the details page.
				final String[] pageIDs = { "ARMBD" };
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						pageIDs, driverArray, appNumber);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeExpensesIntermediateQuestions:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeExpensesIntermediateQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeExpensesIntermediateQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeExpensesIntermediateQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeExpensesIntermediateQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeExpensesIntermediateQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load other bills questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadOtherBillsQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadOtherBillsQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadOtherBillsQuestions:Start");

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			final RMBRequestManager rmbRequestManager = new RMBRequestManager();
			final List dataList = new ArrayList();

			// Getting RMC_IN_PROFILE from session
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMB_RQST_Collection rmbPageColl = (RMB_RQST_Collection) session
					.get("RMB_RQST_COLLECTION");

			if (rmbPageColl == null) {
				rmbPageColl = new RMB_RQST_Collection();
				rmbPageColl.add(rmbRequestManager.loadRMBRequest(appNum));
			}
			final RMB_RQST_Cargo rmbCargo = rmbPageColl.getCargo(0);

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			driverManager.getStatus(FwConstants.RMC_DRIVER, "ARMBB",
					driverArray);
			// Get Child Care Collection
			final ABOtherExpensesQuestionsBO otherExpBO = new ABOtherExpensesQuestionsBO();
			final ABOtherExpensesQuestionsBO otherExpBO1 = new ABOtherExpensesQuestionsBO();
			final ABOtherExpensesSummaryBO abOtherIncomeBO = new ABOtherExpensesSummaryBO();
			// NextGen NG-6481 Phase 3 updates to ACA Streamline changes : Start
			final BeforeTaxDeductionBO objBo = new BeforeTaxDeductionBO();
			final ABIncomeTaxDeductionBO taxDeductBO = new ABIncomeTaxDeductionBO();
			// NextGen NG-6481 Phase 3 updates to ACA Streamline changes : End

			final CP_ABCHS_Collection otherResouDtl = otherExpBO
					.loadChildCareDetails(appNum);
			final Cp_App_In_Deduction_Collection otherResouoblgDtl = otherExpBO1
					.loadChildOblgDetails(appNum);
			final CP_APP_IN_MED_BILLS_Collection othrMedBillDtl = abOtherIncomeBO
					.loadMedBillDetails(appNum);

			final String applicationType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			applicationType.charAt(0);

			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvColl.size(); i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean loadCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is housing/utility
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);
					if (catSeqDetail != null
							&&AppConstants.RMC_CAT_OTHER_BILL_PRFL.equalsIgnoreCase(catSeqDetail
									.getChangeSelectionCategoryCd()) ) {
						loadCatSelProfile = false;
					} else {
						loadCatSelProfile = true;
					}
				}
			}
			// EDSP AI
			// now loading the cat selection profile from the data base
			if (loadCatSelProfile) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_OTHER_BILL_PRFL + "'";
				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						selectionProfile);
			}

			// Child Care
			dataList.add(otherResouDtl);
			dataList.add(indvColl);
			dataList.add(rmcInPrflColl);
			dataList.add(rmbCargo);
			dataList.add(selectionProfile);
			dataList.add(driverStatus);

			final RMBChildCareChangeSelectionListView rmcChildCareChangeSelectionListView = new RMBChildCareChangeSelectionListView();
			// Preparing listView for regular job
			rmcChildCareChangeSelectionListView.setLanguage(language);
			rmcChildCareChangeSelectionListView.setName("CHILDCARELISTVIEW");
			rmcChildCareChangeSelectionListView.setCollection(indvColl);
			rmcChildCareChangeSelectionListView.setDisplayData(dataList);
			rmcChildCareChangeSelectionListView.setPageSize(1000);
			pageCollection.put("CHILDCARELISTVIEW",
					rmcChildCareChangeSelectionListView);
			pageCollection.put("CHILDCARELISTVIEW_COLL", otherResouDtl);

			// Child Obligation
			final List oblgList = new ArrayList();
			oblgList.add(otherResouoblgDtl);
			oblgList.add(indvColl);
			oblgList.add(rmcInPrflColl);
			oblgList.add(rmbCargo);
			oblgList.add(selectionProfile);
			oblgList.add(driverStatus);

			final RMBChildSupportObligationSelectionListView rmcChildCareObligationSelectionListView = new RMBChildSupportObligationSelectionListView();

			rmcChildCareObligationSelectionListView.setLanguage(language);
			rmcChildCareObligationSelectionListView
			.setName("CHILDOBLIGATIONLISTVIEW");
			rmcChildCareObligationSelectionListView.setCollection(indvColl);
			rmcChildCareObligationSelectionListView.setDisplayData(oblgList);
			rmcChildCareObligationSelectionListView.setPageSize(1000);
			pageCollection.put("CHILDOBLIGATIONLISTVIEW",
					rmcChildCareObligationSelectionListView);
			pageCollection.put("CHILDOBLIGATIONLISTVIEW_COLL",
					otherResouoblgDtl);

			/* NextGen NG-6481 Phase 3 updates to ACA Streamline changes : Start */
			/* Before Tax Deduction Start */
			final CP_APP_IN_BEF_TAX_DED_Collection befTaxDedColl = objBo
					.loadBeforeTaxDeductionDetails(appNum);

			final List befTaxDedDataList = new ArrayList();
			befTaxDedDataList.add(befTaxDedColl);
			befTaxDedDataList.add(indvColl);
			befTaxDedDataList.add(rmcInPrflColl);
			befTaxDedDataList.add(rmbCargo);
			befTaxDedDataList.add(selectionProfile);
			befTaxDedDataList.add(driverStatus);

			final RMBBeforeTaxDeductionSelectionListView beforeTaxDeductionSelectionListView = new RMBBeforeTaxDeductionSelectionListView();

			beforeTaxDeductionSelectionListView.setLanguage(language);
			beforeTaxDeductionSelectionListView
			.setName(AppConstants.RMB_BEFORE_TAX_DEDUCTIONS_LISTVIEW);
			beforeTaxDeductionSelectionListView.setCollection(indvColl);
			beforeTaxDeductionSelectionListView
			.setDisplayData(befTaxDedDataList);
			beforeTaxDeductionSelectionListView.setPageSize(1000);
			pageCollection.put(AppConstants.RMB_BEFORE_TAX_DEDUCTIONS_LISTVIEW,
					beforeTaxDeductionSelectionListView);
			pageCollection.put(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
					befTaxDedColl);
			/* Before Tax Deduction End */
			/* Income Tax Deduction Start */
			final CP_APP_IN_INCOME_TAX_DED_Collection cpAppTaxDeductColl = taxDeductBO
					.loadTaxDeductRelatedDetails(appNum);

			final List taxDeductionList = new ArrayList();
			taxDeductionList.add(cpAppTaxDeductColl);
			taxDeductionList.add(indvColl);
			taxDeductionList.add(rmcInPrflColl);
			taxDeductionList.add(rmbCargo);
			taxDeductionList.add(selectionProfile);
			taxDeductionList.add(driverStatus);

			final RMBIncomeTaxDeductionSelectionListView rmbIncomeTaxDeductionSelectionListView = new RMBIncomeTaxDeductionSelectionListView();

			rmbIncomeTaxDeductionSelectionListView.setLanguage(language);
			rmbIncomeTaxDeductionSelectionListView
			.setName(AppConstants.RMB_INCOMETAX_DEDUCT_INDVSELECTION_LISTVIEW);
			rmbIncomeTaxDeductionSelectionListView.setCollection(indvColl);
			rmbIncomeTaxDeductionSelectionListView
			.setDisplayData(taxDeductionList);
			rmbIncomeTaxDeductionSelectionListView.setPageSize(1000);
			pageCollection.put(
					AppConstants.RMB_INCOMETAX_DEDUCT_INDVSELECTION_LISTVIEW,
					rmbIncomeTaxDeductionSelectionListView);
			pageCollection.put(
					AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
					cpAppTaxDeductColl);
			/* Income Tax Deduction End */
			/* NextGen NG-6481 Phase 3 updates to ACA Streamline changes : End */

			// Medical Bills
			final List medbillList = new ArrayList();
			medbillList.add(othrMedBillDtl);
			medbillList.add(indvColl);
			medbillList.add(rmcInPrflColl);
			medbillList.add(rmbCargo);
			medbillList.add(selectionProfile);
			medbillList.add(driverStatus);

			final RMBMedicalBillsSelectionListView rmcMedicalBillsSelectionListView = new RMBMedicalBillsSelectionListView();

			rmcMedicalBillsSelectionListView.setLanguage(language);
			rmcMedicalBillsSelectionListView.setName("MEDBILLLISTVIEW");
			rmcMedicalBillsSelectionListView.setCollection(indvColl);
			rmcMedicalBillsSelectionListView.setDisplayData(medbillList);
			rmcMedicalBillsSelectionListView.setPageSize(1000);
			pageCollection.put("MEDBILLLISTVIEW",
					rmcMedicalBillsSelectionListView);
			pageCollection.put("MEDBILLLISTVIEW_COLL", othrMedBillDtl);

			componentManager.getComponents(
					(String) request.get(FwConstants.CURRENT_PAGE_ID), txnBean);
			createAndLoadARBBQResponseMapsToPageCollection(rmcInPrflColl,
					pageCollection, peopleHandler, true, driverStatus);
			final Map newAssetMap = new HashMap();
			pageCollection.put("NEW_ASSET_MAP", newAssetMap);
			pageCollection.put("RMB_RQST_Collection", rmbPageColl);
			componentManager.getComponents("ARBBQ", txnBean);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadOtherBillsQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherBillsQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadOtherBillsQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherBillsQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadOtherBillsQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadOtherBillsQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Creates the and load arbbq response maps to page collection.
	 *
	 * @param appInPrflColl the app in prfl coll
	 * @param pageCollection the page collection
	 * @param peopleHandler the people handler
	 * @param pageLoad the page load
	 * @param driverStatus the driver status
	 * @return the map
	 */
	private Map createAndLoadARBBQResponseMapsToPageCollection(
			final RMC_IN_PRFL_Collection appInPrflColl,
			final Map pageCollection, final PeopleHandler peopleHandler,
			final boolean pageLoad, final int driverStatus) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.createAndLoadARBBQResponseMapsToPageCollection() - START");
		try {

			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection,
					peopleHandler, "411",
					IRMCResponseProfileManager.UNPAID_MEDBILL, pageLoad,
					driverStatus, false);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.createAndLoadARBBQResponseMapsToPageCollection() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return pageCollection;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "createAndLoadARBBQResponseMapsToPageCollection");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"createAndLoadARBBQResponseMapsToPageCollection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "createAndLoadARBBQResponseMapsToPageCollection");
		}
	}

	/**
	 * Store other bills questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeOtherBillsQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean::storeOtherBillsQuestions:Start");
		final Map session = txnBean.getSession();
		final Map request = txnBean.getRequest();
		final Map pageCollection = txnBean.getPageCollection();
		final Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
		request.get(FwConstants.CURRENT_PAGE_ID);
		final RMBRequestManager rmbRequestManager = new RMBRequestManager();
		final String appNum = (String) session.get(AppConstants.APP_NUMBER);
		RMC_RESPONSE_Custom_Collection beforeRespColl = (RMC_RESPONSE_Custom_Collection) pageCollection
				.get("RMC_RESPONSE_Custom_Collection");
		final ABOtherExpensesQuestionsBO otherExpBO = new ABOtherExpensesQuestionsBO();
		beforeRespColl = otherExpBO.formatResponse(beforeRespColl);
		final RMC_RESPONSE_Custom_Collection respColl = new RMC_RESPONSE_Custom_Collection();
		for (int i = 0; i < beforeRespColl.size(); i++) {
			RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
			rmcCustomCargo = beforeRespColl.getCargo(i);
			if (!FwConstants.NO.equals(rmcCustomCargo.getResponse())) {
				respColl.add(rmcCustomCargo);
			}
		}

		otherExpBO.formatAssetResponse(respColl);

		RMB_RQST_Collection rmbRqstPageColl = (RMB_RQST_Collection) pageCollection
				.get("RMB_RQST_Collection");
		if (rmbRqstPageColl == null) {
			rmbRqstPageColl = new RMB_RQST_Collection();
			rmbRqstPageColl.add(rmbRequestManager.loadRMBRequest(appNum));
		}
		final RMB_RQST_Cargo rmbRqstCargo = rmbRqstPageColl.getCargo(0);
		final PeopleHandler peopleHandler = (PeopleHandler) session
				.get(AppConstants.INDIV_MASTER_HANDLER);
		final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
				.getInHomeIndividuals();
		final int indvSize = indvColl.size();
		final Map indvNameMap = new HashMap();
		for (int i = 0; i < indvSize; i++) {
			final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
					.get(i);
			indvNameMap
			.put(indvCargo.getIndv_seq_num(), indvCargo.getFst_nam());
		}

		final CP_APP_IN_BEF_TAX_DED_Collection beforeTaxColl = (CP_APP_IN_BEF_TAX_DED_Collection) beforeColl
				.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION);
		final CP_ABCHS_Collection childColl = (CP_ABCHS_Collection) beforeColl
				.get("CHILDCARELISTVIEW_COLL");
		final Cp_App_In_Deduction_Collection obligColl = (Cp_App_In_Deduction_Collection) beforeColl
				.get("CHILDOBLIGATIONLISTVIEW_COLL");
		final CP_APP_IN_MED_BILLS_Collection medBillColl = (CP_APP_IN_MED_BILLS_Collection) beforeColl
				.get("MEDBILLLISTVIEW_COLL");
		final CP_APP_IN_INCOME_TAX_DED_Collection incomeTaxColl = (CP_APP_IN_INCOME_TAX_DED_Collection) beforeColl
				.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION);
		final short[] programKey = (short[]) session
				.get(FwConstants.RMC_PROGRAM_KEY);
		boolean maFlag = false;
		boolean tanfFlag = false;
		boolean snapFlag = false;
		boolean isTanfOnly = false;
		if (programKey != null) {
			if (programKey[AppConstants.PROGRAM_KEY_MA] == 1) {
				maFlag = true;
			}
			if (programKey[AppConstants.PROGRAM_KEY_TANF] == 1) {
                tanfFlag = true;
            }
	        if (programKey[AppConstants.PROGRAM_KEY_SNAP] == 1) {
	            snapFlag = true;
	        }
	        if(tanfFlag && !snapFlag && !maFlag){
	            isTanfOnly = true;
	        }

		}

		final Map assetValidationMap = new HashMap();
		assetValidationMap.put("CHILD",
				beforeColl.get("CHILDCARELISTVIEW_COLL"));
		assetValidationMap.put("OBLIG",
				beforeColl.get("CHILDOBLIGATIONLISTVIEW_COLL"));
		assetValidationMap.put("MEDI", beforeColl.get("MEDBILLLISTVIEW_COLL"));
		assetValidationMap.put(AppConstants.BEFORE_TAX_DEDU,
				beforeColl.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION));
		assetValidationMap.put(AppConstants.INCOME_TAX_DEDU, beforeColl
				.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION));

		assetValidationMap.put("RMB_RQST_Cargo", rmbRqstCargo);

		final short[] responseArray = new short[] {
				IRMCResponseProfileManager.CHILD_CARE_RESP,
				IRMCResponseProfileManager.CHILD_OBLIGATION_RESP,
				IRMCResponseProfileManager.MEDICAL_BILLS_RESP,
				IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION,
				IRMCResponseProfileManager.TAX_DEDUCT_RESP };

		// build category selection profile
		SortedSet categorySelectionProfile = (SortedSet) session
				.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

		// Getting RMC_IN_PROFILE from session
		// EDSP AI
		RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
				.get(AppConstants.RMC_IN_PRFL_MASTER);
		final RMC_IN_PRFL_Collection rmcPrflCollection = (RMC_IN_PRFL_Collection) pageCollection
				.get("RMC_IN_PRFL_Collection");

		RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
		int size = respColl.size();
		RMC_IN_PRFL_Collection rmcPrflPageColl = null;
		RMC_IN_PRFL_Cargo rmcPrflSessCargo = null;
		RMC_IN_PRFL_Cargo rmcPrflPageCargo = null;
		String seqNum = null;
		String catType = null;
		String indvSeqNum = null;
		boolean childcareChangeSelected = false;
		boolean childobligChangeSelected = false;
		boolean medbillChangeSelected = false;
		boolean beforeTaxDedu = false;
		boolean incomeTaxDedu = false;

		boolean childAddSelected = false;
		boolean childObligationAddSelected = false;
		boolean medAddSelected = false;
		boolean beforeTaxDedSelected = false;
		boolean incomeTaxDedSelected = false;
		String newTypeIndicatorResp = null;
		if (respColl != null && !respColl.isEmpty()) {
			for (int i = 0; i < respColl.size(); i++) {
				final RMC_RESPONSE_Custom_Cargo cargo = respColl.getCargo(i);
				if (cargo != null && cargo.getCategoryType() != null) {
					log(ILog.INFO, "category type.." + cargo.getCategoryType());
					final Map childMap = new HashMap();
					final Map obligMap = new HashMap();
					final Map medMap = new HashMap();
					final Map beforeTaxDeduMap = new HashMap();
					final Map incomeTaxDeduMap = new HashMap();
					childMap.put(AppConstants.CHILD_CARE_BILL,
							AppConstants.CHILD_CARE_BILL);
					obligMap.put(AppConstants.CHILD_CARE_OBLIGATION,
							AppConstants.CHILD_CARE_OBLIGATION);
					medMap.put(AppConstants.MEDICAL_BILLS,
							AppConstants.MEDICAL_BILLS);
					beforeTaxDeduMap.put(AppConstants.BEFORE_TAX_DEDUCTIONS,
							AppConstants.BEFORE_TAX_DEDUCTIONS);
					incomeTaxDeduMap.put(
							AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB,
							AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB);

					if (childMap.containsKey(cargo.getCategoryType())) {
						if (!"2".equals(cargo.getUserEndSelectionInd())) {
							childcareChangeSelected = true;
						}
					}
					if (obligMap.containsKey(cargo.getCategoryType())) {
						if (!"2".equals(cargo.getUserEndSelectionInd())) {
							childobligChangeSelected = true;
						}
					}
					if (medMap.containsKey(cargo.getCategoryType())) {
						if (!"2".equals(cargo.getUserEndSelectionInd())) {
							medbillChangeSelected = true;
						}
					}
					if (beforeTaxDeduMap.containsKey(cargo.getCategoryType())) {
						if (!"2".equals(cargo.getUserEndSelectionInd())) {
							beforeTaxDedu = true;
						}
					}
					if (incomeTaxDeduMap.containsKey(cargo.getCategoryType())) {
						if (!"2".equals(cargo.getUserEndSelectionInd())) {
							incomeTaxDedu = true;
						}
					}
				}
			}
		}
		for (int i = 0; i < size; i++) {
			rmcCustomCargo = respColl.getCargo(i);
			seqNum = rmcCustomCargo.getSeqNum();
			catType = rmcCustomCargo.getCategoryType();
			indvSeqNum = rmcCustomCargo.getIndvSeqNum();
			newTypeIndicatorResp = rmcCustomCargo.getResponse();
			if (seqNum.equals(AppConstants.RMC_ADD_NEW_IND)
					&& !AppConstants.NO.equals(newTypeIndicatorResp)) {

				if (rmcPrflPageColl != null) {
					rmcPrflPageCargo = rmcResponseProfileManager.getProfile(
							rmcPrflPageColl, indvSeqNum);
				} else {
					rmcPrflPageColl = new RMC_IN_PRFL_Collection();
				}
				if (rmcPrflPageCargo == null) {
					rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
					rmcPrflPageCargo.setApp_num(appNum);
					rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
					rmcPrflPageColl.addCargo(rmcPrflPageCargo);
				}
				// this one is for the session collection
				if (rmcInPrflSessColl != null) {
					rmcPrflSessCargo = rmcResponseProfileManager.getProfile(
							rmcInPrflSessColl, indvSeqNum);
				} else {
					rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
				}
				if (rmcPrflSessCargo == null) {
					rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
					rmcPrflSessCargo.setApp_num(appNum);
					rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
					rmcResponseProfileManager
					.createRMCIndividualProfile(rmcPrflSessCargo);
					rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
				}

				if (catType.equals(AppConstants.CHILD_CARE_BILL)) {
					rmcPrflPageCargo.setChild_care_resp(FwConstants.YES);
					childAddSelected = true;
				} else if (catType.equals(AppConstants.CHILD_CARE_OBLIGATION)) {
					rmcPrflPageCargo.setChild_obligation_resp(FwConstants.YES);
					childObligationAddSelected = true;
				} else if (catType.equals(AppConstants.MEDICAL_BILLS)) {
					rmcPrflPageCargo.setMedical_bills_resp(FwConstants.YES);
					medAddSelected = true;
				} else if (catType.equals(AppConstants.BEFORE_TAX_DEDUCTIONS)) {
					rmcPrflPageCargo
					.setBefore_tax_deduction_resp(FwConstants.YES);
					beforeTaxDedSelected = true;
				} else if (catType
						.equals(AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB)) {
					rmcPrflPageCargo.setTax_deduct_resp(FwConstants.YES);
					incomeTaxDedSelected = true;
				}
				// EDSP AI
				respColl.remove(i);
				size--;
				i--;
			} else if (seqNum.equals(AppConstants.RMC_ADD_NEW_IND)
					&& AppConstants.NO.equals(newTypeIndicatorResp)) {
				if (rmcPrflPageColl != null) {
					rmcPrflPageCargo = rmcResponseProfileManager.getProfile(
							rmcPrflPageColl, indvSeqNum);
				} else {
					rmcPrflPageColl = new RMC_IN_PRFL_Collection();
				}
				if (rmcPrflPageCargo == null) {
					rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
					rmcPrflPageCargo.setApp_num(appNum);
					rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
					rmcPrflPageColl.addCargo(rmcPrflPageCargo);
				}
				if (rmcInPrflSessColl != null) {
					rmcPrflSessCargo = rmcResponseProfileManager.getProfile(
							rmcInPrflSessColl, indvSeqNum);
				} else {
					rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
				}
				if (rmcPrflSessCargo == null) {
					rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
					rmcPrflSessCargo.setApp_num(appNum);
					rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
					rmcResponseProfileManager
					.createRMCIndividualProfile(rmcPrflSessCargo);
					rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
				}
				if (catType.equals(AppConstants.MEDICAL_BILLS)) {

				}

				respColl.remove(i);
				size--;
				i--;
			}
		}
		session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflSessColl);
		final String backToMyAccess = (String) request
				.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
		final Map httpSessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
		final String language = (String) httpSessionMap
				.get(AppConstants.LANGUAGE);

		final String reqWarningMsgs = (String) request
				.get(FwConstants.WARNING_MSG_DETAILS);
		List<String> warningsShown = new ArrayList();
		if (session.get(FwConstants.WARNING_MSG_DETAILS) != null) {
			warningsShown = (ArrayList) session
					.get(FwConstants.WARNING_MSG_DETAILS);
		}
		if (!warningsShown.contains(reqWarningMsgs)) {
			warningsShown.add(reqWarningMsgs);
			session.put(FwConstants.WARNING_MSG_DETAILS, warningsShown);
		}
		FwMessageList msgList = null;

		beforeColl.get("PEOPLE_411");
		beforeColl.get("RESP_MAP_411");
		if (backToMyAccess == null) {
		    final List cmpList = (List) beforeColl.get("PAGE_COMPONENT_LIST");
			otherExpBO.validateEndRMC(respColl, assetValidationMap, maFlag,isTanfOnly, cmpList);
			otherExpBO.validateOtherBillChangeSelectionRMC(respColl,
					assetValidationMap, indvNameMap, maFlag);
		}
		session.put(FwConstants.WARNING_MSG_DETAILS, warningsShown);

		boolean isWarningMessageShown = false;

		// Below variable contains list of all the warning message codes
		// displayed previously on this page delimited by '~'

		String reqWarningMsgs1 = FwConstants.EMPTY_STRING;
		if (request.get(FwConstants.WARNING_MSG_DETAILS) != null) {
			reqWarningMsgs1 = (String) request
					.get(FwConstants.WARNING_MSG_DETAILS);
		}

		if (otherExpBO.hasMessages()) {
			msgList = otherExpBO.getMessageList();
			if (reqWarningMsgs1 != null && reqWarningMsgs1.trim().length() > 0) {
				// First check if no-selection warning message is in the
				// previously displayed list and then if it is also present
				// in the current list.
				if (reqWarningMsgs1.indexOf("00201") > -1) {
					if (checkForWarningMesgs("00201", msgList)) {
						isWarningMessageShown = true;
					}
				}
				if (reqWarningMsgs1.indexOf("00202") > -1) {
					if (checkForWarningMesgs("00202", msgList)) {
						isWarningMessageShown = true;
					}
				}
				if (reqWarningMsgs1.indexOf("00205") > -1) {
					if (checkForWarningMesgs("00205", msgList)) {
						isWarningMessageShown = true;
					}
				}
				if (reqWarningMsgs1.indexOf("82015") > -1) {
					if (checkForWarningMesgs("82015", msgList)) {
						isWarningMessageShown = true;
					}
				}
				if (reqWarningMsgs1.indexOf("82018") > -1) {
					if (checkForWarningMesgs("82018", msgList)) {
						isWarningMessageShown = true;
					}
				}
			}
		}

		if (checkBackToMyAccessSelected(request) || msgList != null
				&& !isWarningMessageShown) {

			if (backToMyAccess == null) {
				request.put(FwConstants.MESSAGE_LIST, msgList);

			}
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			if (rmcPrflPageColl != null) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcPrflPageColl, rmcInPrflSessColl,
						responseArray);
			}
			if (respColl != null && !respColl.isEmpty()) {
				categorySelectionProfile = categorySelectionProfileManager
						.buildSelectionProfileAfterValidation(
								categorySelectionProfile, respColl);
			}
			final RMBChildCareChangeSelectionListView rmbOtherBillChildSelectionListView = (RMBChildCareChangeSelectionListView) beforeColl
					.get("CHILDCARELISTVIEW");
			final RMBChildSupportObligationSelectionListView rmbOtherBillObligSelectionListView = (RMBChildSupportObligationSelectionListView) beforeColl
					.get("CHILDOBLIGATIONLISTVIEW");
			final RMBMedicalBillsSelectionListView rmbMedicalBillsSelectionListView = (RMBMedicalBillsSelectionListView) beforeColl
					.get("MEDBILLLISTVIEW");
			final RMBBeforeTaxDeductionSelectionListView rmbBeforeTaxDeductionSelectionListView = (RMBBeforeTaxDeductionSelectionListView) beforeColl
					.get(AppConstants.RMB_BEFORE_TAX_DEDUCTIONS_LISTVIEW);
			final RMBIncomeTaxDeductionSelectionListView rmbIncomeTaxDeductionSelectionListView = (RMBIncomeTaxDeductionSelectionListView) beforeColl
					.get(AppConstants.RMB_INCOMETAX_DEDUCT_INDVSELECTION_LISTVIEW);

			// Child/ Adult care
			final List childDataList = new ArrayList();
			childDataList.add(childColl);
			childDataList.add(indvColl);
			childDataList.add(rmcPrflPageColl);
			childDataList.add(rmbRqstCargo);
			childDataList.add(categorySelectionProfile);
			childDataList.add(driverStatus);
			rmbOtherBillChildSelectionListView.setLanguage(language);
			rmbOtherBillChildSelectionListView.setName("CHILDCARELISTVIEW");
			rmbOtherBillChildSelectionListView.setCollection(indvColl);
			rmbOtherBillChildSelectionListView.setDisplayData(childDataList);
			rmbOtherBillChildSelectionListView.setPageSize(1000);

			// Child Obligation
			final List obligDataList = new ArrayList();
			obligDataList.add(obligColl);
			obligDataList.add(indvColl);
			obligDataList.add(rmcPrflPageColl);
			obligDataList.add(rmbRqstCargo);
			obligDataList.add(categorySelectionProfile);
			obligDataList.add(driverStatus);
			rmbOtherBillObligSelectionListView.setLanguage(language);
			rmbOtherBillObligSelectionListView
			.setName("CHILDOBLIGATIONLISTVIEW");
			rmbOtherBillObligSelectionListView.setCollection(indvColl);
			rmbOtherBillObligSelectionListView.setDisplayData(obligDataList);
			rmbOtherBillObligSelectionListView.setPageSize(1000);

			// Medical Bill
			final List medbillDataList = new ArrayList();
			medbillDataList.add(medBillColl);
			medbillDataList.add(indvColl);
			medbillDataList.add(rmcPrflPageColl);
			medbillDataList.add(rmbRqstCargo);
			medbillDataList.add(categorySelectionProfile);
			medbillDataList.add(driverStatus);
			rmbMedicalBillsSelectionListView.setLanguage(language);
			rmbMedicalBillsSelectionListView.setName("MEDBILLLISTVIEW");
			rmbMedicalBillsSelectionListView.setCollection(indvColl);
			rmbMedicalBillsSelectionListView.setDisplayData(medbillDataList);
			rmbMedicalBillsSelectionListView.setPageSize(1000);

			// Before Tax Deduction
			final List beforeTaxDataList = new ArrayList();
			beforeTaxDataList.add(beforeTaxColl);
			beforeTaxDataList.add(indvColl);
			beforeTaxDataList.add(rmcPrflPageColl);
			beforeTaxDataList.add(rmbRqstCargo);
			beforeTaxDataList.add(categorySelectionProfile);
			beforeTaxDataList.add(driverStatus);
			rmbBeforeTaxDeductionSelectionListView.setLanguage(language);
			rmbBeforeTaxDeductionSelectionListView
			.setName(AppConstants.RMB_BEFORE_TAX_DEDUCTIONS_LISTVIEW);
			rmbBeforeTaxDeductionSelectionListView.setCollection(indvColl);
			rmbBeforeTaxDeductionSelectionListView
			.setDisplayData(beforeTaxDataList);
			rmbBeforeTaxDeductionSelectionListView.setPageSize(1000);

			// Income Tax Deduction
			final List incomeTaxDataList = new ArrayList();
			incomeTaxDataList.add(incomeTaxColl);
			incomeTaxDataList.add(indvColl);
			incomeTaxDataList.add(rmcPrflPageColl);
			incomeTaxDataList.add(rmbRqstCargo);
			incomeTaxDataList.add(categorySelectionProfile);
			incomeTaxDataList.add(driverStatus);
			rmbIncomeTaxDeductionSelectionListView.setLanguage(language);
			rmbIncomeTaxDeductionSelectionListView
			.setName(AppConstants.RMB_INCOMETAX_DEDUCT_INDVSELECTION_LISTVIEW);
			rmbIncomeTaxDeductionSelectionListView.setCollection(indvColl);
			rmbIncomeTaxDeductionSelectionListView
			.setDisplayData(incomeTaxDataList);
			rmbIncomeTaxDeductionSelectionListView.setPageSize(1000);

			pageCollection.put("CHILDCARELISTVIEW",
					rmbOtherBillChildSelectionListView);
			pageCollection.put("CHILDOBLIGATIONLISTVIEW",
					rmbOtherBillObligSelectionListView);
			pageCollection.put("MEDBILLLISTVIEW",
					rmbMedicalBillsSelectionListView);
			pageCollection.put(AppConstants.RMB_BEFORE_TAX_DEDUCTIONS_LISTVIEW,
					rmbBeforeTaxDeductionSelectionListView);
			pageCollection.put(
					AppConstants.RMB_INCOMETAX_DEDUCT_INDVSELECTION_LISTVIEW,
					rmbIncomeTaxDeductionSelectionListView);

			pageCollection.put("CHILDCARELISTVIEW_COLL", childColl);
			pageCollection.put("CHILDOBLIGATIONLISTVIEW_COLL", obligColl);
			pageCollection.put("MEDBILLLISTVIEW_COLL", medBillColl);
			pageCollection.put(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
					beforeTaxColl);
			pageCollection.put(
					AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
					incomeTaxColl);

			final RMC_IN_PRFL_Collection validationRMCPrflColl = new RMC_IN_PRFL_Collection();

			for (int k = 0; k < rmcInPrflSessColl.size(); k++) {
				final RMC_IN_PRFL_Cargo sessionCargo = rmcInPrflSessColl
						.getCargo(k);
				final RMC_IN_PRFL_Cargo pageCollCargo = rmcResponseProfileManager
						.getProfile(rmcPrflCollection,
								sessionCargo.getIndv_seq_num());
				if (pageCollCargo == null) {
					sessionCargo.setUnpaid_medbill(FwConstants.NO);
				} else {
					sessionCargo.setUnpaid_medbill(pageCollCargo
							.getUnpaid_medbill());
				}

				validationRMCPrflColl.addCargo(sessionCargo);
			}

			getPeopleCollectionAndUpdateMaps(validationRMCPrflColl,
					pageCollection, peopleHandler, "411",
					IRMCResponseProfileManager.UNPAID_MEDBILL, true,
					driverStatus, true);

			pageCollection.put("RMB_RQST_Collection",
					beforeColl.get("RMB_RQST_Collection"));
			pageCollection.put("PAGE_COMPONENT_LIST",beforeColl.get("PAGE_COMPONENT_LIST"));
			return;
		}
		if (session.containsKey(FwConstants.WARNING_MSG_DETAILS)) {
			session.remove(FwConstants.WARNING_MSG_DETAILS);
		}
		final int[] driverArray = (int[]) session.get(FwConstants.RMC_DRIVER);
		final int driverStatus = driverManager.getAFBStatus(
				FwConstants.RMC_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray);

		boolean childDetailPageRequired = false;
		boolean obligDetailPageRequired = false;
		boolean mediDetailPageRequired = false;
		boolean beforeTaxDetailPageRequired = false;
		boolean incomeTaxDetailPageRequired = false;

		if (rmcInPrflSessColl != null) {
			if (rmcPrflPageColl == null) {
				rmcPrflPageColl = new RMC_IN_PRFL_Collection();
			}
			// populating missing app in profile collection into page
			// collection for enter key press
			rmcResponseProfileManager.preparePageColl(rmcPrflPageColl,
					rmcInPrflSessColl, responseArray);

			final int rmcInPrflSessCollectionSize = rmcInPrflSessColl.size();
			final int rmcInPrflPageCollectionSize = rmcPrflPageColl.size();
			RMC_IN_PRFL_Cargo rmcInPrflPageCargo = null;
			String[] translatedProfileArray = null;
			String indivSeqNum = null;

			final int[] othrChildCareDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
			final int[] othrChildObligDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
			final int[] othrMedBillDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
			final int[] beforeTaxDeductionDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
			final int[] incomeTaxDeductionDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };

			final Map indvResponseMap = new HashMap();
			final boolean[] dirtyIndicatorArray = new boolean[rmcResponseProfileManager
			                                                  .getMaxIndvSeqNumber(rmcInPrflSessColl) + 1];
			char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
			// Loop for each individual in session app indv profile
			for (int s = 0; s < rmcInPrflSessCollectionSize; s++) {
				final RMC_IN_PRFL_Cargo rmcInPrflSessCargo = rmcInPrflSessColl
						.getCargo(s);
				// Loop for each individual in page collection app indv
				// profile
				for (int p = 0; p < rmcInPrflPageCollectionSize; p++) {
					rmcInPrflPageCargo = rmcPrflPageColl.getCargo(p);
					// Picking up the matching individuals of session app
					// indv profile from page collection app indv profile
					if (rmcInPrflPageCargo.getIndv_seq_num().equals(
							rmcInPrflSessCargo.getIndv_seq_num())) {
						translatedProfileArray = new String[responseArray.length];
						indivSeqNum = rmcInPrflPageCargo.getIndv_seq_num();

						/* Child Care */
						if (rmcResponseProfileManager
								.determineDirtyStatus(
										rmcInPrflPageCargo.getChild_care_resp(),
										rmcInPrflSessCargo.getChild_care_resp(),
										othrChildCareDetailDirtyIndicator,
										driverStatus)) {
							if (!dirtyIndicatorArray[0]) {
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indivSeqNum)] = true;
						}
						/* Translating Profile Response */
						if (!rmcInPrflSessCargo
								.getChild_care_resp()
								.equalsIgnoreCase(
										String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
							rmcResponseProfileManager
							.translateProfileResponses(
									rmcInPrflPageCargo
									.getChild_care_resp(),
									rmcInPrflSessCargo
									.getChild_care_resp(),
									driverStatus,
									IRMCResponseProfileManager.CHILD_CARE_RESP,
									rmcInPrflSessCargo);
						}
						/* Translating Profile Response */
						translatedProfileArray[0] = rmcInPrflSessCargo
								.getChild_care_resp();
						status = (null != rmcInPrflSessCargo
								.getChild_care_resp()) ? (rmcInPrflSessCargo
								.getChild_care_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						/* Scheduling Details Page */
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							childDetailPageRequired = true;
							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARCCC", driverArray, appNum);
						}
						/* Getting Details page status flag value */
						if (!childDetailPageRequired) {
							childDetailPageRequired = isChildCaredetailpageRequired(rmcInPrflSessCargo);
						}
						/*
						 * Getting driver status of details page from driver
						 * array and scheduling page
						 */
						if (!driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARCCC", driverArray).equals(
										IDriver.DRIVER_STATUS_COMPLETE)) {
							driverManager.makeAbsoluteNotRequired(
									FwConstants.RMC_DRIVER, "ARCCC",
									driverArray, appNum);
						} else {
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARCCC", driverArray, appNum);
						}

						/* Child Obligation */
						if (rmcResponseProfileManager.determineDirtyStatus(
								rmcInPrflPageCargo.getChild_obligation_resp(),
								rmcInPrflSessCargo.getChild_obligation_resp(),
								othrChildObligDetailDirtyIndicator,
								driverStatus)) {
							if (!dirtyIndicatorArray[0]) {
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indivSeqNum)] = true;
						}
						/* Translating Profile Response */
						if (!rmcInPrflSessCargo
								.getChild_obligation_resp()
								.equalsIgnoreCase(
										String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
							rmcResponseProfileManager
							.translateProfileResponses(
									rmcInPrflPageCargo
									.getChild_obligation_resp(),
									rmcInPrflSessCargo
									.getChild_obligation_resp(),
									driverStatus,
									IRMCResponseProfileManager.CHILD_OBLIGATION_RESP,
									rmcInPrflSessCargo);
						}
						/* Translating Profile Response */
						translatedProfileArray[1] = rmcInPrflSessCargo
								.getChild_obligation_resp();
						status = (null != rmcInPrflSessCargo
								.getChild_obligation_resp()) ? (rmcInPrflSessCargo
								.getChild_obligation_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						/* Scheduling Details Page */
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							obligDetailPageRequired = true;
							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARCSC", driverArray, appNum);
						}
						/* Getting Details page status flag value */
						if (!obligDetailPageRequired) {
							obligDetailPageRequired = isChildobligationdetailpageRequired(rmcInPrflSessCargo);
						}
						/*
						 * Getting driver status of details page from driver
						 * array and scheduling page
						 */
						if (!driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARCSC", driverArray).equals(
										IDriver.DRIVER_STATUS_COMPLETE)) {
							driverManager.makeAbsoluteNotRequired(
									FwConstants.RMC_DRIVER, "ARCSC",
									driverArray, appNum);
						} else {
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARCSC", driverArray, appNum);
						}

						/* Medical Bills */
						if (rmcResponseProfileManager.determineDirtyStatus(
								rmcInPrflPageCargo.getMedical_bills_resp(),
								rmcInPrflSessCargo.getMedical_bills_resp(),
								othrMedBillDetailDirtyIndicator, driverStatus)) {
							if (!dirtyIndicatorArray[0]) {
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indivSeqNum)] = true;
						}
						/* Translating Profile Response */
						if (!rmcInPrflSessCargo
								.getMedical_bills_resp()
								.equalsIgnoreCase(
										String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
							rmcResponseProfileManager
							.translateProfileResponses(
									rmcInPrflPageCargo
									.getMedical_bills_resp(),
									rmcInPrflSessCargo
									.getMedical_bills_resp(),
									driverStatus,
									IRMCResponseProfileManager.MEDICAL_BILLS_RESP,
									rmcInPrflSessCargo);
						}
						/* Translating Profile Response */
						translatedProfileArray[2] = rmcInPrflSessCargo
								.getMedical_bills_resp();
						status = (null != rmcInPrflSessCargo
								.getMedical_bills_resp()) ? (rmcInPrflSessCargo
								.getMedical_bills_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						/* Scheduling Details Page */
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							mediDetailPageRequired = true;
							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARMBD", driverArray, appNum);
						}
						/* Getting Details page status flag value */
						if (!mediDetailPageRequired) {
							mediDetailPageRequired = isMedicalTypePageRequired(rmcInPrflSessCargo);
						}
						/*
						 * Getting driver status of details page from driver
						 * array and scheduling page
						 */
						if (!driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARMBD", driverArray).equals(
										IDriver.DRIVER_STATUS_COMPLETE)) {
							driverManager.makeAbsoluteNotRequired(
									FwConstants.RMC_DRIVER, "ARMBD",
									driverArray, appNum);
						} else {
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARMBD", driverArray, appNum);
						}

						/* Before Tax */
						if (rmcResponseProfileManager.determineDirtyStatus(
								rmcInPrflPageCargo
								.getBefore_tax_deduction_resp(),
								rmcInPrflSessCargo
								.getBefore_tax_deduction_resp(),
								beforeTaxDeductionDirtyIndicator, driverStatus)) {
							if (!dirtyIndicatorArray[0]) {
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indivSeqNum)] = true;
						}
						/* Translating Profile Response */
						if (!rmcInPrflSessCargo
								.getBefore_tax_deduction_resp()
								.equalsIgnoreCase(
										String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
							rmcResponseProfileManager
							.translateProfileResponses(
									rmcInPrflPageCargo
									.getBefore_tax_deduction_resp(),
									rmcInPrflSessCargo
									.getBefore_tax_deduction_resp(),
									driverStatus,
									IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION,
									rmcInPrflSessCargo);
						}
						/* Translating Profile Response */
						translatedProfileArray[3] = rmcInPrflSessCargo
								.getBefore_tax_deduction_resp();
						status = (null != rmcInPrflSessCargo
								.getBefore_tax_deduction_resp()) ? (rmcInPrflSessCargo
								.getBefore_tax_deduction_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						/* Scheduling Details Page */
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							beforeTaxDetailPageRequired = true;
							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARBTD", driverArray, appNum);
						}
						/* Getting Details page status flag value */
						if (!beforeTaxDetailPageRequired) {
							beforeTaxDetailPageRequired = isBeforeTaxDetailPageRequired(rmcInPrflSessCargo);
						}
						/*
						 * Getting driver status of details page from driver
						 * array and scheduling page
						 */
						if (!driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARBTD", driverArray).equals(
										IDriver.DRIVER_STATUS_COMPLETE)) {
							driverManager.makeAbsoluteNotRequired(
									FwConstants.RMC_DRIVER, "ARBTD",
									driverArray, appNum);
						} else {
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARBTD", driverArray, appNum);
						}

						/* Income Tax */
						if (rmcResponseProfileManager.determineDirtyStatus(
								rmcInPrflPageCargo.getTax_deduct_resp(),
								rmcInPrflSessCargo.getTax_deduct_resp(),
								incomeTaxDeductionDirtyIndicator, driverStatus)) {
							if (!dirtyIndicatorArray[0]) {
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indivSeqNum)] = true;
						}
						/* Translating Profile Response */
						if (!rmcInPrflSessCargo
								.getTax_deduct_resp()
								.equalsIgnoreCase(
										String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
							rmcResponseProfileManager
							.translateProfileResponses(
									rmcInPrflPageCargo
									.getTax_deduct_resp(),
									rmcInPrflSessCargo
									.getTax_deduct_resp(),
									driverStatus,
									IRMCResponseProfileManager.TAX_DEDUCT_RESP,
									rmcInPrflSessCargo);
						}
						/* Translating Profile Response */
						translatedProfileArray[4] = rmcInPrflSessCargo
								.getTax_deduct_resp();
						status = (null != rmcInPrflSessCargo
								.getTax_deduct_resp()) ? (rmcInPrflSessCargo
								.getTax_deduct_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						/* Scheduling Details Page */
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							incomeTaxDetailPageRequired = true;
							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARITD", driverArray, appNum);
						}
						/* Getting Details page status flag value */
						if (!incomeTaxDetailPageRequired) {
							incomeTaxDetailPageRequired = isTaxDeductPageRequired(rmcInPrflSessCargo);
						}
						/*
						 * Getting driver status of details page from driver
						 * array and scheduling page
						 */
						if (!driverManager.getStatus(FwConstants.RMC_DRIVER,
								"ARITD", driverArray).equals(
										IDriver.DRIVER_STATUS_COMPLETE)) {
							driverManager.makeAbsoluteNotRequired(
									FwConstants.RMC_DRIVER, "ARITD",
									driverArray, appNum);
						} else {
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARITD", driverArray, appNum);
						}

						indvResponseMap
						.put(indivSeqNum, translatedProfileArray);

						break;
					}
				}
			}
			// Persistence logic start
			// EDSP AI Need to uncomment if
			if (dirtyIndicatorArray[0]) {

				String indvSeqNumber = null;
				for (int j = 0; j < rmcInPrflPageCollectionSize; j++) {
					indvSeqNumber = rmcPrflPageColl.getCargo(j)
							.getIndv_seq_num();
					// Changed indvSeqNum to indvSeqNumber
					// EDSP AI Need to uncomment if
					if (dirtyIndicatorArray[Integer.parseInt(indvSeqNumber)]) {
						rmcResponseProfileManager.persist(appNum,
								indvSeqNumber, responseArray,
								(String[]) indvResponseMap.get(indvSeqNumber));
					}
				}
			}
		

		// Persitence logic for unpaid medical bill
		final RMC_IN_PRFL_Collection validationRMCPrflColl = new RMC_IN_PRFL_Collection();

		for (int k = 0; k < rmcInPrflSessColl.size(); k++) {
			final RMC_IN_PRFL_Cargo sessionCargo = rmcInPrflSessColl
					.getCargo(k);
			final RMC_IN_PRFL_Cargo pageCollCargo = rmcResponseProfileManager
					.getProfile(rmcPrflCollection,
							sessionCargo.getIndv_seq_num());
			if (pageCollCargo == null) {
				sessionCargo.setUnpaid_medbill(FwConstants.NO);
			} else {
				sessionCargo.setUnpaid_medbill("C");
			}

			validationRMCPrflColl.addCargo(sessionCargo);
		}

		final short[] responseArrayForUnpaidBill = new short[] { IRMCResponseProfileManager.UNPAID_MEDBILL };
		final String[] translatedProfileArrayForN = new String[] { FwConstants.NO };
		final String[] translatedProfileArrayForC = new String[] { "C" };
		for (int k = 0; k < rmcInPrflSessColl.size(); k++) {
			final RMC_IN_PRFL_Cargo sessionCargo = rmcInPrflSessColl
					.getCargo(k);
			final RMC_IN_PRFL_Cargo pageCollCargo = rmcResponseProfileManager
					.getProfile(rmcPrflCollection,
							sessionCargo.getIndv_seq_num());
			if (pageCollCargo == null) {
				rmcResponseProfileManager.persist(appNum,
						sessionCargo.getIndv_seq_num(),
						responseArrayForUnpaidBill, translatedProfileArrayForN);
			} else {
				rmcResponseProfileManager.persist(appNum,
						sessionCargo.getIndv_seq_num(),
						responseArrayForUnpaidBill, translatedProfileArrayForC);
			}
		}
		}
		if (categorySelectionProfile == null
				|| categorySelectionProfile.isEmpty()) {

			categorySelectionProfile = categorySelectionProfileManager
					.buildSelectionProfile(respColl, appNum);
		} else {
			categorySelectionProfileManager.rebuildSelectionProfileByCds(
					categorySelectionProfile, respColl, appNum,
					AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			categorySelectionProfileManager.rebuildSelectionProfileByCds(
					categorySelectionProfile, respColl, appNum,
					AppConstants.MEDICAL_BILLS);
		}

		if (childDetailPageRequired && childAddSelected) {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBB",
					driverArray, appNum);
		} else {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARMBB", driverArray, appNum);
		}
		if (obligDetailPageRequired && childObligationAddSelected) {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBB",
					driverArray, appNum);
		} else {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARMBB", driverArray, appNum);
		}
		if (mediDetailPageRequired && medAddSelected) {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBB",
					driverArray, appNum);
		} else {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARMBB", driverArray, appNum);
		}

		if (beforeTaxDetailPageRequired && beforeTaxDedSelected) {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBTD",
					driverArray, appNum);
		} else {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARBTD", driverArray, appNum);
		}
		if (incomeTaxDetailPageRequired && incomeTaxDedSelected) {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARITD",
					driverArray, appNum);
		} else {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARBTD", driverArray, appNum);
		}

		/* Child Care */
		final Map childCatTypes = otherExpBO.getChildCareTypesCCB();
		String childDetailPageStat = null;
		if (childDetailPageRequired
				|| otherExpBO.checkPageRequired(categorySelectionProfile,
						childCatTypes, AppConstants.CHILD_CARE_BILL)) {
			if (childDetailPageRequired
					|| !categorySelectionProfileManager
					.areAllSequencesComplete(categorySelectionProfile,
							childCatTypes) && childcareChangeSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCCC",
						driverArray, appNum);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARCCC",
						driverArray, appNum);
			}
		} else {
			childDetailPageStat = driverManager.getStatus(
					FwConstants.RMC_DRIVER, "ARCCC", driverArray);
			if (!childDetailPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
					&& !otherExpBO.checkChildCareDataExistance(appNum)) {
				driverManager.makeNotRequired(FwConstants.RMC_DRIVER, "ARCCC",
						driverArray, appNum);
			} else {
				/*
				 * if any other type of child care exists than make page as
				 * complete
				 */
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARCCC",
						driverArray, appNum);
			}
		}

		/* Child Obligation */
		final Map childOblCatTypes = otherExpBO.getChildObligTypesCT();
		String childOblDetailPageStat = null;
		if (obligDetailPageRequired
				|| otherExpBO.checkPageRequired(categorySelectionProfile,
						childOblCatTypes, AppConstants.CHILD_CARE_OBLIGATION)) {
			if (obligDetailPageRequired
					|| !categorySelectionProfileManager
					.areAllSequencesComplete(categorySelectionProfile,
							childOblCatTypes)
							&& childobligChangeSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCSC",
						driverArray, appNum);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARCSC",
						driverArray, appNum);
			}
		} else {
			childOblDetailPageStat = driverManager.getStatus(
					FwConstants.RMC_DRIVER, "ARCSC", driverArray);
			if (!childOblDetailPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
					&& !otherExpBO.checkChildOblDataExistance(appNum)) {
				driverManager.makeNotRequired(FwConstants.RMC_DRIVER, "ARCSC",
						driverArray, appNum);
			} else {
				/*
				 * if any other type of child obligation exists than make page
				 * as complete
				 */
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARCSC",
						driverArray, appNum);
			}
		}

		/* Medical Bills */
		final Map medBillCatTypes = otherExpBO.getMediBillTypesMB();
		String medBillsDetailPageStat = null;
		if (mediDetailPageRequired
				|| otherExpBO.checkPageRequired(categorySelectionProfile,
						medBillCatTypes, AppConstants.MEDICAL_BILLS)) {
			if (mediDetailPageRequired
					|| !categorySelectionProfileManager
					.areAllSequencesComplete(categorySelectionProfile,
							medBillCatTypes) && medbillChangeSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			}
		} else {
			medBillsDetailPageStat = driverManager.getStatus(
					FwConstants.RMC_DRIVER, "ARMBD", driverArray);
			if (!medBillsDetailPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
					&& !otherExpBO.checkMedBillsDataExistance(appNum)) {
				driverManager.makeNotRequired(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			} else {
				/*
				 * if any other type of medical bill exists than make page as
				 * complete
				 */
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			}
		}

		/* Before Tax */
		final Map beforeTaxInfoMap = new HashMap();
		beforeTaxInfoMap.put(AppConstants.BEFORE_TAX_DEDUCTIONS,
				AppConstants.BEFORE_TAX_DEDUCTIONS);
		String beforeTaxPageStat = null;
		if (beforeTaxDetailPageRequired
				|| otherExpBO.checkPageRequired(categorySelectionProfile,
						beforeTaxInfoMap, AppConstants.BEFORE_TAX_DEDUCTIONS)) {
			if (beforeTaxDetailPageRequired
					|| !categorySelectionProfileManager
					.areAllSequencesComplete(categorySelectionProfile,
							beforeTaxInfoMap) && beforeTaxDedu) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBTD",
						driverArray, appNum);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBTD",
						driverArray, appNum);
			}
		} else {
			beforeTaxPageStat = driverManager.getStatus(FwConstants.RMC_DRIVER,
					"ARBTD", driverArray);
			if (!beforeTaxPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
					&& !otherExpBO.checkBeforeTaxDataExistance(appNum)) {
				driverManager.makeNotRequired(FwConstants.RMC_DRIVER, "ARBTD",
						driverArray, appNum);
			} else {
				/*
				 * if any other type of before tax exists than make page as
				 * complete
				 */
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBTD",
						driverArray, appNum);
			}
		}

		/* Before Tax */
		final Map incomeTaxInfoMap = new HashMap();
		incomeTaxInfoMap.put(AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB,
				AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB);
		String incomeTaxPageStat = null;
		if (incomeTaxDetailPageRequired
				|| otherExpBO.checkPageRequired(categorySelectionProfile,
						incomeTaxInfoMap,
						AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB)) {
			if (incomeTaxDetailPageRequired
					|| !categorySelectionProfileManager
					.areAllSequencesComplete(categorySelectionProfile,
							incomeTaxInfoMap) && incomeTaxDedu) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARITD",
						driverArray, appNum);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARITD",
						driverArray, appNum);
			}
		} else {
			incomeTaxPageStat = driverManager.getStatus(FwConstants.RMC_DRIVER,
					"ARITD", driverArray);
			if (!incomeTaxPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
					&& !otherExpBO.checkIncomeTaxDataExistance(appNum)) {
				driverManager.makeNotRequired(FwConstants.RMC_DRIVER, "ARITD",
						driverArray, appNum);
			} else {
				/*
				 * if any other type of income tax exists than make page as
				 * complete
				 */
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARITD",
						driverArray, appNum);
			}
		}

		driverManager.makeComplete(FwConstants.RMC_DRIVER, AppConstants.ARBBQ,
				driverArray, appNum);
		/* Store values in session */
		session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
				categorySelectionProfile);
		session.put(FwConstants.BEFORE_COLLECTION, txnBean.getPageCollection());
		session.put(FwConstants.RMC_DRIVER, driverArray);
		pageCollection.put("RMB_RQST_Collection", rmbRqstPageColl);
		txnBean.setSession(session);

		log(ILog.INFO, "RMCHousingExpenseEJBBean::storeOtherBillsQuestions:End");
	}

	/**
	 * Checks if is tax deduct page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is tax deduct page required
	 */
	private boolean isTaxDeductPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isTaxDeductPageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getTax_deduct_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isTaxDeductPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is before tax detail page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is before tax detail page required
	 */
	private boolean isBeforeTaxDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isBeforeTaxDetailPageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getBefore_tax_deduction_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isBeforeTaxDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is child caredetailpage required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is child caredetailpage required
	 */
	private boolean isChildCaredetailpageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isChildCaredetailpageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getChild_care_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isChildCaredetailpageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is childobligationdetailpage required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is childobligationdetailpage required
	 */
	private boolean isChildobligationdetailpageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isChildobligationdetailpageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getChild_obligation_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isChildobligationdetailpageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is medical type page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is medical type page required
	 */
	private boolean isMedicalTypePageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isMedicalTypePageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getMedical_bills_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getMedtyp_hsa_contrib().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_attendant_care()
				.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_dental().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_doctor().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_med_equip().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_hosp_bills().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				|| rmcInPrflSessCargo.getMedtyp_insur_premium().charAt(
						0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getMedtyp_rx_cost().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getMedtyp_trans_med().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
						.getMedtyp_other().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.isMedicalTypePageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Check otherbill detail page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @return true, if successful
	 */
	public boolean checkOtherbillDetailPageRequired(
			final SortedSet categorySelectionProfile, final Map catType) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkOtherbillDetailPageRequired() - START");

		try {
			boolean isbenefitsPageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND) {
						isbenefitsPageRequired = true;
						break;
					}
				}
			}
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkOtherbillDetailPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isbenefitsPageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkOtherbillDetailPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkOtherbillDetailPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkOtherbillDetailPageRequired");
		}
	}

	/**
	 * Load adult care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadAdultCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadAdultCareDetails() - START");

		log(ILog.INFO, "RMCHousingExpenseEJBBean:loadAdultCareDetails:Start");

		final Map session = txnBean.getSession();
		final Map request = txnBean.getRequest();
		final Map pageCollection = txnBean.getPageCollection();
		request.put("loopingQuestion", FwConstants.NO);
		String pageId = null;
		String previousPageId = null;
		Map beforeColl = null;
		PeopleHandler peopleHandler = null;
		int[] driverArray = null;
		String appNumber = null;
		int currentPageStatus = 0;

		String indvSeqNumber = null;
		// PCR# 40362 changes: page mode
		String pageMode = FwConstants.NO;
		try {
			peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);
			driverArray = (int[]) session.get(FwConstants.RMC_DRIVER);
			pageId = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			currentPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			previousPageId = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);
			final ABOtherExpensesDetailsBO otherExpenseBO = new ABOtherExpensesDetailsBO();

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			final Map catMappTypes = new HashMap();
			catMappTypes.put(AppConstants.CHILD_CARE_BILL,
					AppConstants.CHILD_CARE_BILL);

			if (currentPageStatus == FwConstants.DRIVER_REQUIRED
					|| currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catMappTypes)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			} else if (currentPageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catMappTypes)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			previousPageId = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);

			final short[] responseType = new short[] { IRMCResponseProfileManager.CHILD_CARE_RESP };
			SortedSet cldDetailsProfile = null;
			boolean rnRecordFound = false;
			final String categType = AppConstants.CHILD_CARE_BILL;

			if (!pageId.equals(previousPageId)) {
				cldDetailsProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseType);
				if (currentPageStatus != FwConstants.DRIVER_REQUIRED) {

					final CP_ABCHS_Collection childColl = otherExpenseBO
							.loadCpAbchsForCld(appNumber);
					final CP_ABCHS_Collection newChildColl = otherExpenseBO
							.splitChildCareColl(childColl,
									AppConstants.RMC_NEW_RECORD_IND);

					if (newChildColl != null && !newChildColl.isEmpty()) {
						CP_ABCHS_Cargo appInChildCareCargo = null;
						final int newChildCollSize = newChildColl.size();
						rnRecordFound = true;

						for (int i = 0; i < newChildCollSize; i++) {
							appInChildCareCargo = newChildColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									cldDetailsProfile,
									null,
									null,
									Short.parseShort(appInChildCareCargo
											.getIndv_seq_num()),
											Short.parseShort(appInChildCareCargo
													.getSeq_num()), categType);
						}
					}
				}

				if (currentPageStatus == FwConstants.DRIVER_REQUIRED
						|| currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(cldDetailsProfile);
				}

				if (currentPageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(cldDetailsProfile);
				}
				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				cldDetailsProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			if (indivSeqBean == null
					&& currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("ChildCare_IndSeqBean"); // Child_care_seqBean
			}
			// if details key bean not null means this bean is comming from the
			// summary page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								cldDetailsProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								AppConstants.CHILD_CARE_BILL);
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != 1
							&& !rnRecordFound) {
						String userEndIndicator = indivSeqBean.getUserEndInd();
						if (userEndIndicator == null) {
							userEndIndicator = FwConstants.ZERO;
						}
						categorySelectionProfileManager
						.updateUserEndSelInd(cldDetailsProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()),
												AppConstants.CHILD_CARE_BILL, Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							cldDetailsProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							AppConstants.CHILD_CARE_BILL);
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()),
													AppConstants.CHILD_CARE_BILL);
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != 1
								&& !rnRecordFound) {
							String userEndIndicator = indivSeqBean
									.getUserEndInd();
							if (userEndIndicator == null) {
								userEndIndicator = FwConstants.ZERO;
							}
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()),
													AppConstants.CHILD_CARE_BILL,
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												AppConstants.CHILD_CARE_BILL);
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						if (indivSeqBean.getType().equals(
								AppConstants.CHILD_CARE_BILL)) {
							// first we are checking rnc in profile exists in
							// the sess
							RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
							if (rmcInPrflColl != null) {
								rmcInPrflCargo = rmcResponseProfileManager
										.getProfile(rmcInPrflColl,
												indivSeqBean.getIndivSeqNum());
							} else {
								rmcInPrflColl = new RMC_IN_PRFL_Collection();
							}
							if (rmcInPrflCargo == null) {
								rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
								rmcInPrflCargo.setApp_num(appNumber);
								rmcInPrflCargo.setIndv_seq_num(indivSeqBean
										.getIndivSeqNum());
								rmcResponseProfileManager
								.createRMCIndividualProfile(rmcInPrflCargo);
								rmcInPrflColl.addCargo(rmcInPrflCargo);
							}
							// now we need to make required the MAPP page
							rmcResponseProfileManager.makeAddNew(
									IRMCResponseProfileManager.CHILD_CARE_RESP,
									rmcInPrflCargo, true);
							CategorySequenceDetail catseqDet = null;
							if (!cldDetailsProfile.isEmpty()) {
								catseqDet = categorySelectionProfileManager
										.getCategorySequenceDetail(
												cldDetailsProfile,
												Short.parseShort(indivSeqBean
														.getIndivSeqNum()),
														(short) 0,
														AppConstants.CHILD_CARE_BILL);
							}

							if (catseqDet == null) {
								categorySelectionProfileManager
								.insertSequenceDetail(
										cldDetailsProfile, appNumber, AppConstants.RMC_CAT_OTHER_BILL_PRFL,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												AppConstants.CHILD_CARE_BILL);
							}
						} else {

							if (indivSeqBean.getType().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)
									|| indivSeqBean.getType().equals(
											AppConstants.CWW_RECORD_IND)) {
								boolean sErowExists = false;
								if (categorySelectionProfileManager != null) {
									final Iterator iter = categorySelectionProfile
											.iterator();
									CategorySequenceDetail catSeqDetail = null;
									while (iter.hasNext()) {
										catSeqDetail = (CategorySequenceDetail) iter
												.next();
										if (catSeqDetail != null) {
											if (catSeqDetail
													.getIndividualSequence() == Short
													.parseShort(indivSeqBean
															.getIndivSeqNum())
															&& catSeqDetail
															.getCategoryType()
															.trim()
															.equals(AppConstants.CHILD_CARE_BILL)
															&& catSeqDetail
															.getChangeSelectionCategoryCd()
															.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
												sErowExists = true;
												break;
											}
										}

									}
								}
								if (sErowExists) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											categorySelectionProfile,
											appNumber,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_BILL);
								}
								categorySelectionProfileManager
								.insertSequenceDetail(
										categorySelectionProfile,
										appNumber,
										AppConstants.RMC_CAT_OTHER_BILL_PRFL,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												AppConstants.CHILD_CARE_BILL);
								categorySelectionProfileManager
								.makeSequenceDetailRequired(
										categorySelectionProfile,
										appNumber,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												Short.parseShort(indivSeqBean
														.getSeqNum()),
														AppConstants.CHILD_CARE_BILL);

								SortedSet pregAddSortedSet = null;
								final String[] catTypePregAdd = { AppConstants.CHILD_CARE_BILL };
								pregAddSortedSet = createPageProfile(
										categorySelectionProfile,
										catTypePregAdd);
								CategorySequenceDetail catseqDet = null;
								if (!cldDetailsProfile.isEmpty()) {
									catseqDet = categorySelectionProfileManager
											.getCategorySequenceDetail(
													cldDetailsProfile,
													Short.parseShort(indivSeqBean
															.getIndivSeqNum()),
															(short) 0,
															AppConstants.CHILD_CARE_BILL);
								}
								if (catseqDet != null) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											cldDetailsProfile,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_BILL);
									cldDetailsProfile.addAll(pregAddSortedSet);
								} else {
									cldDetailsProfile.addAll(pregAddSortedSet);
								}

							} else {
								CategorySequenceDetail catseqDet = null;
								if (!cldDetailsProfile.isEmpty()) {
									catseqDet = categorySelectionProfileManager
											.getCategorySequenceDetail(
													cldDetailsProfile,
													Short.parseShort(indivSeqBean
															.getIndivSeqNum()),
															(short) 0,
															AppConstants.CHILD_CARE_BILL);
								}
								if (catseqDet != null) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											cldDetailsProfile,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_BILL);
									categorySelectionProfileManager
									.insertSequenceDetail(
											cldDetailsProfile,
											null,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													AppConstants.CHILD_CARE_BILL);
								} else {
									categorySelectionProfileManager
									.insertSequenceDetail(
											cldDetailsProfile,
											null,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													AppConstants.CHILD_CARE_BILL);
								}

							}
						}

						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
						
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}
						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								cldDetailsProfile, null,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(cldDetailsProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								categorySelectionProfile, appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("ChildCare_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);

			}
			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					cldDetailsProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(cldDetailsProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(cldDetailsProfile);
			}

			categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());

			indvSeqNumber = Short.toString(categorySeqDetail
					.getIndividualSequence());

			final CP_ABCHS_Collection appInCldCareColl = otherExpenseBO
					.loadCldCareIns(appNumber, indvSeqNumber, categorySeqNum);

			pageCollection.put("CP_ABCHS_Collection", appInCldCareColl);

			CP_ABCHS_Cargo cwwCldCareCargo = otherExpenseBO
					.splitChildCareCargo(appInCldCareColl,
							AppConstants.CWW_RECORD_IND);

			if (cwwCldCareCargo == null) {
				cwwCldCareCargo = new CP_ABCHS_Cargo();
			}
			pageCollection.put("SEC_CHILD",
					otherExpenseBO.settingDefaultValues(cwwCldCareCargo));

			CP_ABCHS_Cargo rmcCldcareCargo = otherExpenseBO
					.splitChildCareCargo(appInCldCareColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcCldcareCargo != null) {
				pageCollection.put("FST_CHILD",
						otherExpenseBO.settingDefaultValues(rmcCldcareCargo));
			} else {
				rmcCldcareCargo = otherExpenseBO.splitChildCareCargo(
						appInCldCareColl, AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcCldcareCargo != null) {
					pageCollection.put("FST_CHILD", otherExpenseBO
							.settingDefaultValues(rmcCldcareCargo));
				} else {
					rmcCldcareCargo = otherExpenseBO.splitChildCareCargo(
							appInCldCareColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcCldcareCargo != null) {
						pageCollection.put("FST_CHILD", otherExpenseBO
								.settingDefaultValues(rmcCldcareCargo));
					} else {
						pageCollection.put("FST_CHILD", otherExpenseBO
								.settingDefaultValues(cwwCldCareCargo));
					}
				}

			}

			String srcAppInd = FwConstants.EMPTY_STRING;

			if (appInCldCareColl != null && !appInCldCareColl.isEmpty()) {
				final CP_ABCHS_Cargo appChildCareCargo = appInCldCareColl
						.getCargo(0);
				srcAppInd = appChildCareCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equals(pageMode) || "E".equals(pageMode))) {
				pageMode = FwConstants.NO;
			}
			CP_ABCHS_Collection reCldCareColl = null;

			// ESDP - CP Start Insured Policy person box
			if (appInCldCareColl != null && !appInCldCareColl.isEmpty()) {
				final CP_ABCHS_Cargo insCldcareCargo = appInCldCareColl
						.getCargo(0);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				final String indSeqNum = insCldcareCargo.getIndv_seq_num();
				insCldcareCargo.getSrc_app_ind();
				if (insCldcareCargo.getSeq_num() != null) {
					final CP_ABCHS_Collection cpAppCldCareColl = otherExpenseBO
							.loadChildcareCoverageIndv((String) session
									.get(AppConstants.APP_NUMBER), indSeqNum,
									insCldcareCargo.getSeq_num());
					if (cpAppCldCareColl != null && !cpAppCldCareColl.isEmpty()) {
						pageCollection.put("CP_ABCHS_Collection",
								cpAppCldCareColl);

						CP_ABCHS_Collection cwwCldcareColl = otherExpenseBO
								.splitCldCareCargo(cpAppCldCareColl,
										AppConstants.CWW_RECORD_IND);
						if (cwwCldcareColl == null) {
							cwwCldcareColl = new CP_ABCHS_Collection();

						}

						pageCollection.put("SEC_CLDCARE", cwwCldcareColl);

						CP_ABCHS_Collection rnCldcareColl = otherExpenseBO
								.splitCldCareCargo(cpAppCldCareColl);
						reCldCareColl = otherExpenseBO.splitCldCareCargo(
								cpAppCldCareColl,
								AppConstants.RMC_END_RECORD_IND);

						if (!rnCldcareColl.isEmpty()) {

							pageCollection.put("FST_CLDCARE", rnCldcareColl);
						} else {
							rnCldcareColl = otherExpenseBO.splitCldCareCargo(
									cpAppCldCareColl,
									AppConstants.RMC_NEW_RECORD_IND);
							if (!rnCldcareColl.isEmpty()) {
								pageCollection
								.put("FST_CLDCARE", rnCldcareColl);
							} else {

								pageCollection.put("FST_CLDCARE",
										cwwCldcareColl);

							}
						}
					}
				}
			}
			// This code is added by EDSP- Team for populating check boxes
			CP_ABCHS_Collection cvrgColl = null;
			CP_ABCHS_Collection cwCvrgColl = null;
			cvrgColl = (CP_ABCHS_Collection) pageCollection.get("FST_CLDCARE");
			cwCvrgColl = (CP_ABCHS_Collection) pageCollection
					.get("SEC_CLDCARE");

			if (reCldCareColl != null && !reCldCareColl.isEmpty()) {
				for (int i = 0; i < reCldCareColl.size(); i++) {
					final CP_ABCHS_Cargo cwCargo = reCldCareColl.getCargo(i);
					final CP_ABCHS_Cargo matchingCargo = otherExpenseBO
							.getMatchingCargo(cvrgColl,
									cwCargo.getPaid_in_seq_num());

					if (matchingCargo != null) {
						cvrgColl.remove(matchingCargo);
						cvrgColl.addCargo(cwCargo);
					}

				}
				pageCollection.put("FST_CLDCARE", cvrgColl);
			}

			final INDIVIDUAL_Custom_Collection indvCustColl = peopleHandler
					.sortIndividuals(peopleHandler.getInHomeIndividuals());
			if (indvCustColl != null && !indvCustColl.isEmpty()) {
				final Map coverageMap = new HashMap();
				for (int i = 0; i < indvCustColl.size(); i++) {
					final INDIVIDUAL_Custom_Cargo custCargo = indvCustColl
							.getResult(i);
					coverageMap.put(custCargo.getIndv_seq_num(),
							FwConstants.SPACE);
					if (cvrgColl != null && !cvrgColl.isEmpty()) {
						for (int j = 0; j < cvrgColl.size(); j++) {
							final CP_ABCHS_Cargo cvrgCargo = cvrgColl
									.getCargo(j);
							if (!"RE".equals(cvrgCargo.getSrc_app_ind())
									&& custCargo.getIndv_seq_num().equals(
											cvrgCargo.getPaid_in_seq_num())) {
								coverageMap.remove(cvrgCargo
										.getPaid_in_seq_num());
								coverageMap.put(custCargo.getIndv_seq_num(),
										"R");
							}
						}
					}
				}
				pageCollection.put("coverageMap", coverageMap);
			}

			if (indvCustColl != null && !indvCustColl.isEmpty()) {
				final Map cwCoverageMap = new HashMap();
				for (int i = 0; i < indvCustColl.size(); i++) {
					final INDIVIDUAL_Custom_Cargo custCargo = indvCustColl
							.getResult(i);
					cwCoverageMap.put(custCargo.getIndv_seq_num(),
							FwConstants.SPACE);
					if (cwCvrgColl != null && !cwCvrgColl.isEmpty()) {
						for (int j = 0; j < cwCvrgColl.size(); j++) {
							final CP_ABCHS_Cargo cvrgCargo = cwCvrgColl
									.getCargo(j);
							if (custCargo.getIndv_seq_num().equals(
									cvrgCargo.getPaid_in_seq_num())) {
								cwCoverageMap.remove(cvrgCargo
										.getPaid_in_seq_num());
								cwCoverageMap.put(custCargo.getIndv_seq_num(),
										"R");
							}
						}
					}
				}
				pageCollection.put("cwCoverageMap", cwCoverageMap);
			}
			// Code end by added by EDSP- CP team for populating check boxes

//			pageCollection.put("CP_ABCHS_Collection", cvrgColl);
			pageCollection.put("PAGE_MODE", pageMode);

			// set first name to page collection
			peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNumber));

			peopleHandler.getIndividual(indvSeqNumber);

			pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,
					indvSeqNumber);
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
					indvSeqNumber);
			// PCR 30421 - Added first name to the pagecollection to use in JSP
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNumber));
			txnBean.setPageCollection(pageCollection);
			beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);

			char typeStatus = 'N';
			String showLoopingQuestionFlag = FwConstants.YES;
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}
			request.put("showLoopingQuestion", showLoopingQuestionFlag);
			session.put("LOOPING_QUESTION", showLoopingQuestionFlag);
			// Calling Component Manager for Page components
			componentManager.getComponents(pageId, txnBean);
			// Checking for Before Collection is Null
			if (beforeColl == null) {
				beforeColl = new HashMap();
			}

			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforeColl);

			log(ILog.INFO, "RMCHousingExpenseEJBBean::loadAdultCareDetails:END");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHouseHoldInfoSchoolEnrollmentDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadAdultCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadAdultCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadAdultCareDetails");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadAdultCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store adult care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeAdultCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeAdultCareDetails() - START");
		String appNumber = null;
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeAdultCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final ABOtherExpensesDetailsBO otherExpenseBO = new ABOtherExpensesDetailsBO();
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final SortedSet cldCareProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final CP_ABCHS_Collection appCldInsColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			CP_ABCHS_Cargo appCldInsCargo = appCldInsColl.getCargo(0);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final CP_ABCHS_Collection cpAppInChildCareColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			beforeColl.get("CP_ABCHS_Collection");
			beforeColl.get("SEC_CLDCARE");

			final RMC_IN_PRFL_Collection sessionAppInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final CP_ABCHS_Collection appChildCareBeforeColl = (CP_ABCHS_Collection) beforeColl
					.get("CP_ABCHS_Collection");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(cldCareProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			categorySeqDetailBean.getCategoryType();

			CP_ABCHS_Cargo appCldCareBeforeCargo = null;
			beforeColl.get("APP_PRFL_Cargo");
			appCldInsCargo.getSeq_num();

			beforeColl.get(AppConstants.CHILD_CARE_STATUS);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			boolean reqInd=false;
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			peopleHandler.getFirstName(indvSeqNum);
			/*
			 * Added validation for another child similar to AFB flow -
			 * Srividhya 05/20/15 - Defect fix - CP-WP sync up
			 */
			final Object loop = request.get("loopingQuestion");
			if (null != loop) {
			}
			final String loopingQuestionFlag = (String) session
					.get("LOOPING_QUESTION");
			otherExpenseBO.validateRMBChildStatus(appCldInsCargo,
					peopleHandler, (String) beforeColl.get("PAGE_MODE"),
					loopingQuestionFlag);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			if (checkBackToMyAccessSelected(request)
					|| otherExpenseBO.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							otherExpenseBO.getMessageList());
				}
				request.put("PAGE_MODE", pageMode);
				pageCollection.put(AppConstants.CHILD_CARE_STATUS,
						beforeColl.get(AppConstants.CHILD_CARE_STATUS));
				pageCollection.put("CP_ABCHS_Collection", appCldInsColl);
				pageCollection.put("CP_ABCHS_Collection", cpAppInChildCareColl);
				// put the first Name into request to avoid null pointer in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				pageCollection.put("showLoopingQuestion",
						session.get("LOOPING_QUESTION"));
				pageCollection.put("LOOPING_QUESTION",
						session.get("LOOPING_QUESTION"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				if (pageCollection != null) {
					final INDIVIDUAL_Custom_Collection indvCustColl = peopleHandler
							.sortIndividuals(peopleHandler
									.getInHomeIndividuals());
					if (indvCustColl != null && !indvCustColl.isEmpty()) {
						final Map coverageMap = new HashMap();
						for (int i = 0; i < indvCustColl.size(); i++) {
							final INDIVIDUAL_Custom_Cargo custCargo = indvCustColl
									.getResult(i);
							coverageMap.put(custCargo.getIndv_seq_num(),
									FwConstants.SPACE);
							if (appCldInsColl != null
									&& !appCldInsColl.isEmpty()) {
								for (int j = 0; j < appCldInsColl.size(); j++) {
									final CP_ABCHS_Cargo cvrgCargo = appCldInsColl
											.getCargo(j);
									if (!"RE"
											.equals(cvrgCargo.getSrc_app_ind())
											&& custCargo
											.getIndv_seq_num()
											.equals(cvrgCargo
													.getPaid_in_seq_num())) {
										coverageMap.remove(cvrgCargo
												.getPaid_in_seq_num());
										coverageMap.put(
												custCargo.getIndv_seq_num(),
												"R");
									}
								}
							}
						}
						pageCollection.put("coverageMap", coverageMap);
					}

				} 
				pageCollection.put("cwCoverageMap",
						beforeColl.get("cwCoverageMap"));
				if (beforeColl.containsKey("SEC_CHILD")) {
					pageCollection
					.put("SEC_CHILD", beforeColl.get("SEC_CHILD"));
				}
				pageCollection.put("FST_CHILD", appCldInsCargo);
				if (beforeColl.containsKey("FST_CLDCARE")) {
					pageCollection.put("FST_CLDCARE",
							beforeColl.get("FST_CLDCARE"));
				}
				if (beforeColl.containsKey("SEC_CLDCARE")) {
					pageCollection.put("SEC_CLDCARE",
							beforeColl.get("SEC_CLDCARE"));
				}

				return;
			}
			FwProgramManager.getInstance();
			appCldInsCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));

			appCldInsCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));
			if (appCldInsCargo.getPaid_in_seq_num() == null
					|| appCldInsCargo.getPaid_in_seq_num().length() == 0) {
				appCldInsCargo.setPaid_in_seq_num(FwConstants.ZERO);
			}
			if (appCldInsCargo.getIndv_seq_num() == null
					|| appCldInsCargo.getIndv_seq_num().length() == 0) {
				appCldInsCargo.setIndv_seq_num(FwConstants.ZERO);
			}

			if (appCldInsCargo.getSeq_num() == null
					|| appCldInsCargo.getSeq_num().length() == 0) {
				appCldInsCargo.setSeq_num(FwConstants.ZERO);
			}
			if (appCldInsCargo.getDpnd_care_exp_amt() == null
					|| appCldInsCargo.getDpnd_care_exp_amt().length() == 0
					|| "0.00".equals(appCldInsCargo.getDpnd_care_exp_amt())) {
				appCldInsCargo.setDpnd_care_exp_amt(FwConstants.ZERO);
			}

			if (appCldInsCargo.getDependent_care_exp_start_dt() == null
					|| appCldInsCargo.getDependent_care_exp_start_dt().trim()
					.length() == 0) {
				appCldInsCargo
				.setDependent_care_exp_start_dt(AppConstants.LOW_DATE);
			} else {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = appCldInsCargo
						.getDependent_care_exp_start_dt();
				dateConverter.append(sAppDate.substring(6, 10)).append("-")
				.append(sAppDate.substring(0, 2)).append("-")
				.append(sAppDate.substring(3, 5));
				appCldInsCargo.setDependent_care_exp_start_dt(dateConverter
						.toString());
			}

			appCldInsCargo.setRec_cplt_ind(FwConstants.ONE);

			// get componet list
			final List componentList = (ArrayList) beforeColl
					.get(FwConstants.PAGE_COMPONENT_LIST);
			if (!componentList.contains("5196")) {
			}

			String sourceAppIndicator = FwConstants.EMPTY_STRING;
			String recordInd = null;
			long childSeqNum = 0;
			boolean cldDetailsUpdate = false;
			if (appChildCareBeforeColl != null
					&& !appChildCareBeforeColl.isEmpty()) {
				final int size = appChildCareBeforeColl.size();
				childSeqNum = categorySeqDetailBean.getCategorySequence();
				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
					recordInd = FwConstants.ROWACTION_UPDATE;
					appCldCareBeforeCargo = otherExpenseBO.splitChildCareCargo(
							appChildCareBeforeColl, sourceAppIndicator);
					if (appCldCareBeforeCargo == null) {
						sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
						recordInd = FwConstants.ROWACTION_UPDATE;
						appCldCareBeforeCargo = otherExpenseBO
								.splitChildCareCargo(appChildCareBeforeColl,
										sourceAppIndicator);
					}

				} else {
					// now we are checking this record is CW or RN
					appCldCareBeforeCargo = otherExpenseBO
							.splitChildCareCargo(appChildCareBeforeColl,
									AppConstants.CWW_RECORD_IND);
					if (appCldCareBeforeCargo != null) {
						if (userEndInd == 1) {
							sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
							recordInd = FwConstants.ROWACTION_INSERT;

						} else {
							sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
							recordInd = FwConstants.ROWACTION_INSERT;
						}

						final CP_ABCHS_Cargo beforeCargo = appChildCareBeforeColl
								.getCargo(0);
						appCldInsCargo.setEcp_id(beforeCargo.getEcp_id());

					} else {
						sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
						recordInd = FwConstants.ROWACTION_UPDATE;
						appCldCareBeforeCargo = otherExpenseBO
								.splitChildCareCargo(appChildCareBeforeColl,
										sourceAppIndicator);
					}
				}

				appCldInsCargo.setApp_num(appNumber);

				appCldInsCargo.setIndv_seq_num(appCldCareBeforeCargo
						.getIndv_seq_num());
				appCldInsCargo.setPaid_in_seq_num(appCldCareBeforeCargo
						.getPaid_in_seq_num());
				appCldInsCargo.setSeq_num(appCldCareBeforeCargo.getSeq_num());
				appCldInsCargo.setSrc_app_ind(sourceAppIndicator);
				appCldInsCargo = (CP_ABCHS_Cargo) isChanged(
						appCldCareBeforeCargo, appCldInsCargo);

				appCldInsCargo.setRowAction(recordInd);
				// PersistData if the cargo is dirty
				if (appCldInsCargo.isDirty()) {

					cldDetailsUpdate = true;

				}

			} else {
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appCldInsCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				childSeqNum = otherExpenseBO.getMaxSeqNumber(appNumber,
						indvSeqNum);
				childSeqNum = childSeqNum + 1;
				appCldInsCargo.setSeq_num(String.valueOf(childSeqNum));

				appCldInsCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appCldInsCargo.setRowAction(recordInd);
				cldDetailsUpdate = true;
				categorySelectionProfileManager.updateSequence(cldCareProfile,
						null, categorySeqDetailBean.getIndividualSequence(),
						childSeqNum, categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), childSeqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
					{
					categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(childSeqNum), categorySeqDetailBean.getCategoryType(), "0");
					}
			}

			if (cldDetailsUpdate) {
				final CP_ABCHS_Collection cpAppInCldCarePersistColl = new CP_ABCHS_Collection();
				cpAppInCldCarePersistColl.addCargo(appCldInsCargo);
				otherExpenseBO.storeAppInCldIns(cpAppInCldCarePersistColl);
			}

			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			boolean outSideTheHomeFlag = false;
			if (indvSeqNum.equals(FwConstants.ZERO)) {
				outSideTheHomeFlag = true;
			}
			if (!outSideTheHomeFlag) {
				rmcResponseProfileManager.getProfile(sessionAppInPrflColl,
						appCldInsCargo.getSeq_num());
			}
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						cldCareProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);

			}

			// now i need to update the rmc_in_prfl if looping question is null
			if (!loopingQuestion) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				short respTyp= IRMCResponseProfileManager.CHILD_CARE_RESP;	
				if (rmcInPrflCargo != null && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					reqInd=true;
					rmcResponseProfileManager.makeComplete(
							respTyp,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					cldCareProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						cldCareProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());	
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(cldCareProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(cldCareProfile);
			}

			session.remove("CP_ABCHS_Collection");
			session.remove("LOOPING_QUESTION");
			session.put("CP_ABCHS_Collection", appCldInsColl);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeAdultCareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAdultCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeAdultCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAdultCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeAdultCareDetails");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeAdultCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load child support details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadChildSupportDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadChildSupportDetails() - START");

		log(ILog.INFO,
				"RMCOt:RMCHousingExpenseEJBBean:loadChildSupportDetails:Start");
		final Map session = txnBean.getSession();
		final Map request = txnBean.getRequest();
		final Map pageCollection = txnBean.getPageCollection();
		request.put("loopingQuestion", FwConstants.NO);
		String pageId = null;
		String previousPageId = null;
		Map beforeColl = null;
		PeopleHandler peopleHandler = null;
		int[] driverArray = null;
		String appNumber = null;
		int currentPageStatus = 0;

		String indvSeqNumber = null;
		String pageMode = FwConstants.NO;
		try {
			peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);
			driverArray = (int[]) session.get(FwConstants.RMC_DRIVER);
			pageId = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			currentPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			previousPageId = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);
			final ABOtherExpensesQuestionsBO othBo = new ABOtherExpensesQuestionsBO();
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			final Map catMappTypes = new HashMap();
			catMappTypes.put(AppConstants.CHILD_CARE_OBLIGATION,
					AppConstants.CHILD_CARE_OBLIGATION);

			if (currentPageStatus == FwConstants.DRIVER_REQUIRED
					|| currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catMappTypes)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			} else if (currentPageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catMappTypes)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}
			// clean Session and BeforeCollection
			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			previousPageId = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);

			final short[] responseType = new short[] { IRMCResponseProfileManager.CHILD_OBLIGATION_RESP };
			SortedSet cldObligationProfile = null;
			boolean rnRecordFound = false;
			final String categType = AppConstants.CHILD_CARE_OBLIGATION;

			if (!pageId.equals(previousPageId)) {
				cldObligationProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl, responseType);
				if (currentPageStatus != FwConstants.DRIVER_REQUIRED) {

					final Cp_App_In_Deduction_Collection oblgColl = othBo
							.loadAppOblgInsForPE(appNumber);
					final Cp_App_In_Deduction_Collection newOblgColl = othBo
							.splitCldOblgColl(oblgColl,
									AppConstants.RMC_NEW_RECORD_IND);

					if (newOblgColl != null && !newOblgColl.isEmpty()) {
						Cp_App_In_Deduction_Cargo appInCldOblgCargo = null;
						final int newOblgCollSize = newOblgColl.size();
						rnRecordFound = true;
						for (int i = 0; i < newOblgCollSize; i++) {
							appInCldOblgCargo = newOblgColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									cldObligationProfile, null, null,
									Short.parseShort(appInCldOblgCargo
											.getIndv_seq_num()),
											Short.parseShort(appInCldOblgCargo
													.getSeq_num()), categType);
						}
					}
				}
				if (currentPageStatus == FwConstants.DRIVER_REQUIRED
						|| currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// When user hits the Back button or comes from the Summary
					// Page
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(cldObligationProfile);
				}
				if (currentPageStatus == FwConstants.DRIVER_COMPLETE) {

					categorySelectionProfileManager
					.setCurrentRecordIndToLast(cldObligationProfile);
				}
				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				cldObligationProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			if (indivSeqBean == null
					&& currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("ChildOblg_IndSeqBean");
			}
			// if details key bean not null means this bean is comming from the
			// summary page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								cldObligationProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								AppConstants.CHILD_CARE_OBLIGATION);
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != 1
							&& !rnRecordFound) {
						String userEndIndicator = indivSeqBean.getUserEndInd();
						if (userEndIndicator == null) {
							userEndIndicator = FwConstants.ZERO;
						}
						categorySelectionProfileManager
						.updateUserEndSelInd(cldObligationProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()),
												AppConstants.CHILD_CARE_OBLIGATION,
												Short.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							cldObligationProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							AppConstants.CHILD_CARE_OBLIGATION);
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()),
													AppConstants.CHILD_CARE_OBLIGATION);
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != 1
								&& !rnRecordFound) {
							String userEndIndicator = indivSeqBean
									.getUserEndInd();
							if (userEndIndicator == null) {
								userEndIndicator = FwConstants.ZERO;
							}
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()),
													AppConstants.CHILD_CARE_OBLIGATION,
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												AppConstants.CHILD_CARE_OBLIGATION);
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						if (indivSeqBean.getType().equals(
								AppConstants.CHILD_CARE_OBLIGATION)) {
							// first we are checking rnc in profile exists in
							// the sess
							RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
							if (rmcInPrflColl != null) {
								rmcInPrflCargo = rmcResponseProfileManager
										.getProfile(rmcInPrflColl,
												indivSeqBean.getIndivSeqNum());
							} else {
								rmcInPrflColl = new RMC_IN_PRFL_Collection();
							}
							if (rmcInPrflCargo == null) {
								rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
								rmcInPrflCargo.setApp_num(appNumber);
								rmcInPrflCargo.setIndv_seq_num(indivSeqBean
										.getIndivSeqNum());
								rmcResponseProfileManager
								.createRMCIndividualProfile(rmcInPrflCargo);
								rmcInPrflColl.addCargo(rmcInPrflCargo);
							}
							rmcResponseProfileManager
							.makeAddNew(
									IRMCResponseProfileManager.CHILD_OBLIGATION_RESP,
									rmcInPrflCargo, true);
							CategorySequenceDetail catseqDet = null;
							if (!cldObligationProfile.isEmpty()) {
								catseqDet = categorySelectionProfileManager
										.getCategorySequenceDetail(
												cldObligationProfile,
												Short.parseShort(indivSeqBean
														.getIndivSeqNum()),
														(short) 0,
														AppConstants.CHILD_CARE_OBLIGATION);
							}

							if (catseqDet == null) {
								categorySelectionProfileManager
								.insertSequenceDetail(
										cldObligationProfile,
										appNumber,
										AppConstants.RMC_CAT_OTHER_BILL_PRFL,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												AppConstants.CHILD_CARE_OBLIGATION);
							}
						} else {

							if (indivSeqBean.getType().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)
									|| indivSeqBean.getType().equals(
											AppConstants.CWW_RECORD_IND)) {
								boolean sErowExists = false;
								if (categorySelectionProfileManager != null) {
									final Iterator iter = categorySelectionProfile
											.iterator();
									CategorySequenceDetail catSeqDetail = null;
									while (iter.hasNext()) {
										catSeqDetail = (CategorySequenceDetail) iter
												.next();
										if (catSeqDetail != null) {
											if (catSeqDetail
													.getIndividualSequence() == Short
													.parseShort(indivSeqBean
															.getIndivSeqNum())
															&& catSeqDetail
															.getCategoryType()
															.trim()
															.equals(AppConstants.CHILD_CARE_OBLIGATION)
															&& catSeqDetail
															.getChangeSelectionCategoryCd()
															.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
												sErowExists = true;
												break;
											}
										}

									}
								}
								if (sErowExists) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											categorySelectionProfile,
											appNumber,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_OBLIGATION);
								}
								categorySelectionProfileManager
								.insertSequenceDetail(
										categorySelectionProfile,
										appNumber,
										AppConstants.RMC_CAT_OTHER_BILL_PRFL,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												AppConstants.CHILD_CARE_OBLIGATION);
								categorySelectionProfileManager
								.makeSequenceDetailRequired(
										categorySelectionProfile,
										appNumber,
										Short.parseShort(indivSeqBean
												.getIndivSeqNum()),
												Short.parseShort(indivSeqBean
														.getSeqNum()),
														AppConstants.CHILD_CARE_OBLIGATION);

								SortedSet oblgAddSortedSet = null;
								final String[] catTypePregAdd = { AppConstants.CHILD_CARE_OBLIGATION };
								oblgAddSortedSet = createPageProfile(
										categorySelectionProfile,
										catTypePregAdd);
								CategorySequenceDetail catseqDet = null;
								if (!cldObligationProfile.isEmpty()) {
									catseqDet = categorySelectionProfileManager
											.getCategorySequenceDetail(
													cldObligationProfile,
													Short.parseShort(indivSeqBean
															.getIndivSeqNum()),
															(short) 0,
															AppConstants.CHILD_CARE_OBLIGATION);
								}
								if (catseqDet != null) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											cldObligationProfile,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_OBLIGATION);
									cldObligationProfile
									.addAll(oblgAddSortedSet);
								} else {
									cldObligationProfile
									.addAll(oblgAddSortedSet);
								}

							} else {
								CategorySequenceDetail catseqDet = null;
								if (!cldObligationProfile.isEmpty()) {
									catseqDet = categorySelectionProfileManager
											.getCategorySequenceDetail(
													cldObligationProfile,
													Short.parseShort(indivSeqBean
															.getIndivSeqNum()),
															(short) 0,
															AppConstants.CHILD_CARE_OBLIGATION);
								}
								if (catseqDet != null) {
									categorySelectionProfileManager
									.removeSequenceDetail(
											cldObligationProfile,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													(short) 0,
													AppConstants.CHILD_CARE_OBLIGATION);
									categorySelectionProfileManager
									.insertSequenceDetail(
											cldObligationProfile,
											null,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													AppConstants.CHILD_CARE_OBLIGATION);
								} else {
									categorySelectionProfileManager
									.insertSequenceDetail(
											cldObligationProfile,
											null,
											null,
											Short.parseShort(indivSeqBean
													.getIndivSeqNum()),
													AppConstants.CHILD_CARE_OBLIGATION);
								}

							}
						}

						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
						session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
								categorySelectionProfile);

					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}
						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								cldObligationProfile, null,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								cldObligationProfile, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType());

						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								categorySelectionProfile, appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("ChildOblg_IndSeqBean", indivSeqBean);
			}
			if(categorySelectionProfile!=null && !categorySelectionProfile.isEmpty())
			{
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}			
			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					cldObligationProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(cldObligationProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(cldObligationProfile);
			}

			categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());

			indvSeqNumber = Short.toString(categorySeqDetail
					.getIndividualSequence());

			final Cp_App_In_Deduction_Collection appInCldOblgColl = othBo
					.loadAppCldOblg(appNumber, indvSeqNumber, categorySeqNum);

			pageCollection.put("Cp_App_In_Deduction_Collection",
					appInCldOblgColl);

			Cp_App_In_Deduction_Cargo cwwCldOblgCargo = othBo
					.splitCldOblgCargo(appInCldOblgColl,
							AppConstants.CWW_RECORD_IND);

			if (cwwCldOblgCargo == null) {
				cwwCldOblgCargo = new Cp_App_In_Deduction_Cargo();
			}
			pageCollection.put("SEC_OBLG",
					othBo.settingDefaultValues(cwwCldOblgCargo));

			Cp_App_In_Deduction_Cargo rmcCldOblgCargo = othBo
					.splitCldOblgCargo(appInCldOblgColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcCldOblgCargo != null) {
				pageCollection.put("FST_OBLG",
						othBo.settingDefaultValues(rmcCldOblgCargo));
			} else {
				rmcCldOblgCargo = othBo.splitCldOblgCargo(appInCldOblgColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcCldOblgCargo != null) {
					pageCollection.put("FST_OBLG",
							othBo.settingDefaultValues(rmcCldOblgCargo));
				} else {

					rmcCldOblgCargo = othBo.splitCldOblgCargo(appInCldOblgColl,
							AppConstants.RMC_END_RECORD_IND);
					if (rmcCldOblgCargo != null) {
						pageCollection.put("FST_OBLG",
								othBo.settingDefaultValues(rmcCldOblgCargo));
					} else {
						pageCollection.put("FST_OBLG",
								othBo.settingDefaultValues(cwwCldOblgCargo));
					}
				}
			}

			String srcAppInd = FwConstants.EMPTY_STRING;

			if (appInCldOblgColl != null && !appInCldOblgColl.isEmpty()) {
				final Cp_App_In_Deduction_Cargo appCldOblgCargo = appInCldOblgColl
						.getCargo(0);
				srcAppInd = appCldOblgCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equals(pageMode) || "E".equals(pageMode))) {
				pageMode = FwConstants.NO;
			}
			// ESDP - CP Start Insured Policy person box
			if (appInCldOblgColl != null && !appInCldOblgColl.isEmpty()) {
				final Cp_App_In_Deduction_Cargo insCldOblgCargo = appInCldOblgColl
						.getCargo(0);
				final String indSeqNum = insCldOblgCargo.getIndv_seq_num();
				insCldOblgCargo.getSrc_app_ind();
				if (insCldOblgCargo.getSeq_num() != null) {
					final Cp_App_In_Deduction_Collection cpAppCldOblgColl = othBo
							.loadChildObligationCoverageIndv((String) session
									.get(AppConstants.APP_NUMBER), indSeqNum,
									insCldOblgCargo.getSeq_num());
					if (cpAppCldOblgColl != null && !cpAppCldOblgColl.isEmpty()) {
						/*
						 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines
						 * Commented Code in this block
						 */

						pageCollection.put("Cp_App_In_Deduction_Collection",
								cpAppCldOblgColl);
						Cp_App_In_Deduction_Collection cwwCpAppCldOblgColl = othBo
								.splitChildOblgCargo(cpAppCldOblgColl,
										AppConstants.CWW_RECORD_IND);
						if (cwwCpAppCldOblgColl == null) {
							cwwCpAppCldOblgColl = new Cp_App_In_Deduction_Collection();

						}

						pageCollection.put("SEC_CLDOBLG", cwwCpAppCldOblgColl);

						Cp_App_In_Deduction_Collection rnCldOblgColl = othBo
								.splitCldOblgCargo(cpAppCldOblgColl);
						othBo.splitChildOblgCargo(cpAppCldOblgColl,
								AppConstants.RMC_END_RECORD_IND);

						if (!rnCldOblgColl.isEmpty()) {

							pageCollection.put("FST_CLDOBLG", rnCldOblgColl);
						} else {
							rnCldOblgColl = othBo.splitChildOblgCargo(
									cpAppCldOblgColl,
									AppConstants.RMC_NEW_RECORD_IND);
							if (!rnCldOblgColl.isEmpty()) {
								pageCollection
								.put("FST_CLDOBLG", rnCldOblgColl);
							} else {

								pageCollection.put("FST_CLDOBLG",
										cwwCpAppCldOblgColl);

							}
						}
					}
				}
			}

			// Code end by added by EDSP- CP team for populating check boxes

			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			pageCollection.put("PAGE_MODE", pageMode);

			// set first name to page collection
			peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNumber));

			peopleHandler.getIndividual(indvSeqNumber);

			pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,
					indvSeqNumber);
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
					indvSeqNumber);
			// PCR 30421 - Added first name to the pagecollection to use in JSP
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNumber));
			
			char typeStatus = 'N';
			String showLoopingQuestionFlag = FwConstants.YES;
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}
			request.put("showLoopingQuestion", showLoopingQuestionFlag);
			session.put("LOOPING_QUESTION", showLoopingQuestionFlag);
			txnBean.setPageCollection(pageCollection);
			beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			// Calling Component Manager for Page components
			componentManager.getComponents(pageId, txnBean);
			// Checking for Before Collection is Null
			if (beforeColl == null) {
				beforeColl = new HashMap();
			}

			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforeColl);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadChildSupportDetails:END");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadChildSupportDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadChildSupportDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadChildSupportDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadChildSupportDetails");
		}

		log(ILog.INFO,
				"RMCOtherBenefitsEJBBean.loadChildSupportDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store child support details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeChildSupportDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeChildSupportDetails() - START");

		String appNumber = null;
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::storeChildSupportDetails");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final ABOtherExpensesQuestionsBO othbo = new ABOtherExpensesQuestionsBO();
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final SortedSet cldOblgProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final Cp_App_In_Deduction_Collection appOblgInsColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");

			Cp_App_In_Deduction_Cargo appOblgInsCargo = appOblgInsColl
					.getCargo(0);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final Cp_App_In_Deduction_Collection cpAppInChildOblgColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			beforeColl.get("Cp_App_In_Deduction_Collection");
			beforeColl.get("SEC_CLDOBLG");

			final RMC_IN_PRFL_Collection sessionAppInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final Cp_App_In_Deduction_Collection appChildOblgBeforeColl = (Cp_App_In_Deduction_Collection) beforeColl
					.get("Cp_App_In_Deduction_Collection");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(cldOblgProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			categorySeqDetailBean.getCategoryType();

			Cp_App_In_Deduction_Cargo appCldOblgBeforeCargo = null;
			beforeColl.get("APP_PRFL_Cargo");
			appOblgInsCargo.getSeq_num();

			beforeColl.get(AppConstants.CHILD_OBLG_STATUS);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final String firstName = peopleHandler.getFirstName(indvSeqNum);
			final String loopingQuestionFlag = (String) session
					.get("LOOPING_QUESTION");
			othbo.validateRMBOblgStatus(appOblgInsCargo, firstName,
					(String) beforeColl.get("PAGE_MODE"), loopingQuestionFlag);

			if (checkBackToMyAccessSelected(request) || othbo.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							othbo.getMessageList());
				}

				pageCollection.put(AppConstants.CHILD_OBLG_STATUS,
						beforeColl.get(AppConstants.CHILD_OBLG_STATUS));
				pageCollection.put("Cp_App_In_Deduction_Collection",
						appOblgInsColl);

				pageCollection.put("Cp_App_In_Deduction_Collection",
						cpAppInChildOblgColl);
				// put the first Name into request to avoid null pointer in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				pageCollection.put("showLoopingQuestion",
						session.get("LOOPING_QUESTION"));
				pageCollection.put("LOOPING_QUESTION",
						session.get("LOOPING_QUESTION"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				pageCollection
				.put("coverageMap", beforeColl.get("coverageMap"));
				pageCollection.put("cwCoverageMap",
						beforeColl.get("cwCoverageMap"));
				if (beforeColl.containsKey("SEC_OBLG")) {
					pageCollection.put("SEC_OBLG", beforeColl.get("SEC_OBLG"));
				}
				pageCollection.put("FST_OBLG", appOblgInsCargo);
				if (beforeColl.containsKey("FST_CLDOBLG")) {
					pageCollection.put("FST_CLDOBLG",
							beforeColl.get("FST_CLDOBLG"));
				}
				if (beforeColl.containsKey("SEC_CLDOBLG")) {
					pageCollection.put("SEC_CLDOBLG",
							beforeColl.get("SEC_CLDOBLG"));
				}

				return;
			}
			FwProgramManager.getInstance();
			appOblgInsCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));

			// EDSP ADDED
			// //////////////////////////////////////////////////////
			appOblgInsCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));

			if (appOblgInsCargo.getIndv_seq_num() == null
					|| appOblgInsCargo.getIndv_seq_num().length() == 0) {
				appOblgInsCargo.setIndv_seq_num(FwConstants.ZERO);
			}

			if (appOblgInsCargo.getSeq_num() == null
					|| appOblgInsCargo.getSeq_num().length() == 0) {
				appOblgInsCargo.setSeq_num(FwConstants.ZERO);
			}
			if (appOblgInsCargo.getExp_amt() == null
					|| appOblgInsCargo.getExp_amt().length() == 0
					|| "0.00".equals(appOblgInsCargo.getExp_amt())) {
				appOblgInsCargo.setExp_amt(FwConstants.ZERO);
			}
			if (appOblgInsCargo.getCourt_order_pay_amt() == null
					|| appOblgInsCargo.getCourt_order_pay_amt().length() == 0
					|| "0.00".equals(appOblgInsCargo.getCourt_order_pay_amt())) {
				appOblgInsCargo.setCourt_order_pay_amt(FwConstants.ZERO);
			}

			appOblgInsCargo.setRec_cplt_ind(FwConstants.ONE);

			// get componet list
			final List componentList = (ArrayList) beforeColl
					.get(FwConstants.PAGE_COMPONENT_LIST);
			if (!componentList.contains("5196")) {
			}

			String sourceAppIndicator = null;
			String recordInd = null;
			long oblgSeqNum = 0;
			boolean oblgDetailsUpdate = false;
			if (appChildOblgBeforeColl != null
					&& !appChildOblgBeforeColl.isEmpty()) {
				final int size = appChildOblgBeforeColl.size();
				oblgSeqNum = categorySeqDetailBean.getCategorySequence();
				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
					recordInd = FwConstants.ROWACTION_UPDATE;
					appCldOblgBeforeCargo = othbo.splitChildObligCargo(
							appChildOblgBeforeColl, sourceAppIndicator);
					if (appCldOblgBeforeCargo == null) {
						sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
						recordInd = FwConstants.ROWACTION_UPDATE;
						appCldOblgBeforeCargo = othbo.splitChildObligCargo(
								appChildOblgBeforeColl, sourceAppIndicator);
					}

				} else {
					// now we are checking this record is CW or RN
					appCldOblgBeforeCargo = othbo
							.splitChildObligCargo(appChildOblgBeforeColl,
									AppConstants.CWW_RECORD_IND);
					if (appCldOblgBeforeCargo != null) {
						if (userEndInd == 1) {
							sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
							recordInd = FwConstants.ROWACTION_INSERT;

						} else {
							sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
							recordInd = FwConstants.ROWACTION_INSERT;
						}
					} else {
						sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
						recordInd = FwConstants.ROWACTION_UPDATE;
						appCldOblgBeforeCargo = othbo.splitChildObligCargo(
								appChildOblgBeforeColl, sourceAppIndicator);
					}
				}

				appOblgInsCargo.setApp_num(appNumber);
				//
				appOblgInsCargo.setIndv_seq_num(appCldOblgBeforeCargo
						.getIndv_seq_num());
				if(appCldOblgBeforeCargo.getExp_typ()!=null && !appCldOblgBeforeCargo.getExp_typ().isEmpty())
				appOblgInsCargo.setExp_typ(appCldOblgBeforeCargo.getExp_typ());
				else appOblgInsCargo.setExp_typ("CT");
				appOblgInsCargo.setSeq_num(appCldOblgBeforeCargo.getSeq_num());
				appOblgInsCargo.setSrc_app_ind(sourceAppIndicator);
				appOblgInsCargo = (Cp_App_In_Deduction_Cargo) isChanged(
						appCldOblgBeforeCargo, appOblgInsCargo);

				appOblgInsCargo.setRowAction(recordInd);
				// PersistData if the cargo is dirty
				if (appOblgInsCargo.isDirty()) {

					oblgDetailsUpdate = true;

				}

				final Cp_App_In_Deduction_Cargo beforeCargo = appChildOblgBeforeColl
						.getCargo(0);
				appOblgInsCargo.setEcp_id(beforeCargo.getEcp_id());

			} else {
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appOblgInsCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				oblgSeqNum = othbo.getMaxSeqNumber(appNumber, indvSeqNum);
				oblgSeqNum = oblgSeqNum + 1;
				appOblgInsCargo.setSeq_num(String.valueOf(oblgSeqNum));
				appOblgInsCargo.setExp_typ("CT");
				appOblgInsCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appOblgInsCargo.setRowAction(recordInd);
				oblgDetailsUpdate = true;
				categorySelectionProfileManager.updateSequence(cldOblgProfile,
						null, categorySeqDetailBean.getIndividualSequence(),
						oblgSeqNum, categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), oblgSeqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(oblgSeqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
			}

			if (oblgDetailsUpdate) {
				final Cp_App_In_Deduction_Collection cpAppInCldOblgPersistColl = new Cp_App_In_Deduction_Collection();
				cpAppInCldOblgPersistColl.addCargo(appOblgInsCargo);
				othbo.storeAppInOblgIns(cpAppInCldOblgPersistColl);
			}

			beforeColl.get("PAGE_MODE");

			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1,1 lines Commented Code in
			 * this block
			 */

			boolean outSideTheHomeFlag = false;
			if (indvSeqNum.equals(FwConstants.ZERO)) {
				outSideTheHomeFlag = true;
			}
			if (!outSideTheHomeFlag) {
				rmcResponseProfileManager.getProfile(sessionAppInPrflColl,
						appOblgInsCargo.getSeq_num());
			}
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						cldOblgProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);

			}
			boolean reqInd=false;
			// now i need to update the rmc_in_prfl if looping question is null
			//make profile 'Complete' only if profile response is 'R'
			if (!loopingQuestion) {
				short respTyp=IRMCResponseProfileManager.CHILD_OBLIGATION_RESP;
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					reqInd=true;
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.CHILD_OBLIGATION_RESP,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					cldOblgProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						cldOblgProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(cldOblgProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(cldOblgProfile);
			}
			session.remove("LOOPING_QUESTION");
			session.remove("Cp_App_In_Deduction_Collection");
			session.put("Cp_App_In_Deduction_Collection", appOblgInsColl);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeChildSupportDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeChildSupportDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeChildSupportDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeChildSupportDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeChildSupportDetails");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeChildSupportDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load housing bills type.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadHousingBillsType(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingBillsType() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadHousingBillsType:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);

			log(ILog.INFO, "RMCHousingExpenseEJBBean::loadHousingBillsType");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHousingBillsType");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingBillsType");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHousingBillsType", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadHousingBillsType");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHousingBillsType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store housing bills type.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHousingBillsType(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingBillsType() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getRelevantIndividuals();

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			session.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARHBT",
					driverArray, appNum);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHousingBillsType");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingBillsType");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHousingBillsType", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHousingBillsType");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHousingBillsType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load medical bills type details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadMedicalBillsTypeDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadMedicalBillsTypeDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadMedicalBillsTypeDetails:Start");
			final Map request = txnBean.getRequest();
			loadTypes(txnBean, IRMCResponseProfileManager.MEDICAL_BILLS_RESP,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadMedicalBillsTypeDetails");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadMedicalBillsTypeDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadMedicalBillsTypeDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadMedicalBillsTypeDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadMedicalBillsTypeDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadMedicalBillsTypeDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store medical bills type details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeMedicalBillsTypeDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeMedicalBillsTypeDetails() - START");
		try {

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeMedicalBillsTypeDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final ABMedicalTypeBO abMedTypeBO = new ABMedicalTypeBO();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.MEDTYP_HSA_CONTRIB,
					IRMCResponseProfileManager.MEDTYP_ATTENDANT_CARE,
					IRMCResponseProfileManager.MEDTYP_DENTAL,
					IRMCResponseProfileManager.MEDTYP_DOCTOR,
					IRMCResponseProfileManager.MEDTYP_MED_EQUIP,
					IRMCResponseProfileManager.MEDTYP_HOSP_BILLS,
					IRMCResponseProfileManager.MEDTYP_INSUR_PREMIUM,
					IRMCResponseProfileManager.MEDTYP_RX_COST,
					IRMCResponseProfileManager.MEDTYP_TRANS_MED,
					IRMCResponseProfileManager.MEDTYP_OTHER,

					IRMCResponseProfileManager.MEDICARE_PART_A,
					IRMCResponseProfileManager.MEDICARE_PART_B,
					IRMCResponseProfileManager.MEDICARE_PART_C,
					IRMCResponseProfileManager.MEDICARE_PART_D,
					IRMCResponseProfileManager.CCSP_PROVIDER_PAYMENT,
					IRMCResponseProfileManager.ANIMALS_TO_ASSIST_DISABLED,
					IRMCResponseProfileManager.FUNERAL_DEATH_EXPENSE,
					IRMCResponseProfileManager.BLIND_WORK_EXPENSE,
					IRMCResponseProfileManager.IMPAIRMENT_WORK_EXPENSE

			};

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ABVAT Other Vehicle Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARMBB_FIRST_NAME_LIST");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARMBB_RMC_IN_PRFL_COLLECTION");

			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = abMedTypeBO.compareAppInPrflColl(
					rmcInPrflBeforeColl, pageColl);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getInHomeIndividuals();

			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			// Get NoOneCollection
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARMBB_NO_ONE_COLLECTION");
			final NO_ONE_Collection noOneOtherIncColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = abMedTypeBO.compareNoOneCollection(noOneBeforeColl,
					noOneOtherIncColl);

			validateInfo = abMedTypeBO.validateMedicalTypes(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);
			if (validateInfo != null && abMedTypeBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARMBB_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARMBB_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARMBB_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			boolean isMedicalDetailPageReguired = false;
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 19;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getMedical_bills_resp().charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);
					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {
						// get responses from request

						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_hsa_contrib());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_attendant_care());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_dental());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_doctor());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_med_equip());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_hosp_bills());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_insur_premium());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_rx_cost());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedtyp_trans_med());
						reqResponse
						.add(rmcInPrflCargoRequest.getMedtyp_other());

						reqResponse.add(rmcInPrflCargoRequest
								.getMedicare_part_a());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedicare_part_b());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedicare_part_c());
						reqResponse.add(rmcInPrflCargoRequest
								.getMedicare_part_d());
						reqResponse.add(rmcInPrflCargoRequest
								.getCssp_provider_payment());
						reqResponse.add(rmcInPrflCargoRequest
								.getAnimals_to_assist_disabled());
						reqResponse.add(rmcInPrflCargoRequest
								.getFuneral_death_expense());
						reqResponse.add(rmcInPrflCargoRequest
								.getBlind_work_expense());
						reqResponse.add(rmcInPrflCargoRequest
								.getImpairment_work_expense());

						// session
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_hsa_contrib());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_attendant_care());
						sesResponse
						.add(rmcInPrflBeforeCargo.getMedtyp_dental());
						sesResponse
						.add(rmcInPrflBeforeCargo.getMedtyp_doctor());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_med_equip());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_hosp_bills());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_insur_premium());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_rx_cost());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedtyp_trans_med());
						sesResponse.add(rmcInPrflBeforeCargo.getMedtyp_other());

						sesResponse.add(rmcInPrflBeforeCargo
								.getMedicare_part_a());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedicare_part_b());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedicare_part_c());
						sesResponse.add(rmcInPrflBeforeCargo
								.getMedicare_part_d());
						sesResponse.add(rmcInPrflBeforeCargo
								.getCssp_provider_payment());
						sesResponse.add(rmcInPrflBeforeCargo
								.getAnimals_to_assist_disabled());
						sesResponse.add(rmcInPrflBeforeCargo
								.getFuneral_death_expense());
						sesResponse.add(rmcInPrflBeforeCargo
								.getBlind_work_expense());
						sesResponse.add(rmcInPrflBeforeCargo
								.getImpairment_work_expense());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.MEDICAL_BILLS_RESP);
						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getMedical_bills_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getMedtyp_hsa_contrib()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getMedtyp_dental()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getMedtyp_attendant_care()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getMedtyp_doctor()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getMedtyp_med_equip()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getMedtyp_hosp_bills()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getMedtyp_insur_premium()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getMedtyp_rx_cost()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																										&& rmcInPrflBeforeCargo
																										.getMedtyp_trans_med()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																												&& rmcInPrflBeforeCargo
																												.getMedtyp_other()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

																														&& rmcInPrflBeforeCargo
																														.getMedicare_part_a()
																														.equals(String
																																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																&& rmcInPrflBeforeCargo
																																.getMedicare_part_b()
																																.equals(String
																																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																		&& rmcInPrflBeforeCargo
																																		.getMedicare_part_c()
																																		.equals(String
																																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																				&& rmcInPrflBeforeCargo
																																				.getMedicare_part_d()
																																				.equals(String
																																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																						&& rmcInPrflBeforeCargo
																																						.getCssp_provider_payment()
																																						.equals(String
																																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																								&& rmcInPrflBeforeCargo
																																								.getAnimals_to_assist_disabled()
																																								.equals(String
																																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																										&& rmcInPrflBeforeCargo
																																										.getFuneral_death_expense()
																																										.equals(String
																																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																												&& rmcInPrflBeforeCargo
																																												.getBlind_work_expense()
																																												.equals(String
																																														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																														&& rmcInPrflBeforeCargo
																																														.getImpairment_work_expense()
																																														.equals(String
																																																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

								) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.MEDICAL_BILLS_RESP,
									rmcInPrflBeforeCargo, true);

							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARMBB" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getMedtyp_hsa_contrib()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getMedtyp_dental()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getMedtyp_attendant_care()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getMedtyp_doctor()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																|| rmcInPrflBeforeCargo
																.getMedtyp_med_equip()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getMedtyp_hosp_bills()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getMedtyp_insur_premium()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																						|| rmcInPrflBeforeCargo
																						.getMedtyp_rx_cost()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																								|| rmcInPrflBeforeCargo
																								.getMedtyp_trans_med()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																										|| rmcInPrflBeforeCargo
																										.getMedtyp_other()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))

																												|| rmcInPrflBeforeCargo
																												.getMedicare_part_a()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																														|| rmcInPrflBeforeCargo
																														.getMedicare_part_b()
																														.equals(String
																																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																|| rmcInPrflBeforeCargo
																																.getMedicare_part_c()
																																.equals(String
																																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																		|| rmcInPrflBeforeCargo
																																		.getMedicare_part_d()
																																		.equals(String
																																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																				|| rmcInPrflBeforeCargo
																																				.getCssp_provider_payment()
																																				.equals(String
																																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																						|| rmcInPrflBeforeCargo
																																						.getAnimals_to_assist_disabled()
																																						.equals(String
																																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																								|| rmcInPrflBeforeCargo
																																								.getFuneral_death_expense()
																																								.equals(String
																																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																										|| rmcInPrflBeforeCargo
																																										.getBlind_work_expense()
																																										.equals(String
																																												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																												|| rmcInPrflBeforeCargo
																																												.getImpairment_work_expense()
																																												.equals(String
																																														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}

				}
			}

			// persist the data
			final int persistArraySize = persistArray.size();
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = { cargo.getMedtyp_hsa_contrib(),
						cargo.getMedtyp_attendant_care(),
						cargo.getMedtyp_dental(), cargo.getMedtyp_doctor(),
						cargo.getMedtyp_med_equip(),
						cargo.getMedtyp_hosp_bills(),
						cargo.getMedtyp_insur_premium(),
						cargo.getMedtyp_rx_cost(), cargo.getMedtyp_trans_med(),
						cargo.getMedtyp_other(), cargo.getMedicare_part_a(),
						cargo.getMedicare_part_b(), cargo.getMedicare_part_c(),
						cargo.getMedicare_part_d(),
						cargo.getCssp_provider_payment(),
						cargo.getAnimals_to_assist_disabled(),
						cargo.getFuneral_death_expense(),
						cargo.getBlind_work_expense(),
						cargo.getImpairment_work_expense()

				};

				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);
				if (String.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED)
						.equals(cargo.getMedtyp_hsa_contrib())
						|| String.valueOf(
								IRMCResponseProfileManager.STATUS_REQUIRED)
								.equals(cargo.getMedtyp_dental())
								|| String.valueOf(
										IRMCResponseProfileManager.STATUS_REQUIRED)
										.equals(cargo.getMedtyp_attendant_care())
										|| String.valueOf(
												IRMCResponseProfileManager.STATUS_REQUIRED)
												.equals(cargo.getMedtyp_doctor())
												|| String.valueOf(
														IRMCResponseProfileManager.STATUS_REQUIRED)
														.equals(cargo.getMedtyp_med_equip())
														|| String.valueOf(
																IRMCResponseProfileManager.STATUS_REQUIRED)
																.equals(cargo.getMedtyp_hosp_bills())
																|| String.valueOf(
																		IRMCResponseProfileManager.STATUS_REQUIRED)
																		.equals(cargo.getMedtyp_insur_premium())
																		|| String.valueOf(
																				IRMCResponseProfileManager.STATUS_REQUIRED)
																				.equals(cargo.getMedtyp_rx_cost())
																				|| String.valueOf(
																						IRMCResponseProfileManager.STATUS_REQUIRED)
																						.equals(cargo.getMedtyp_trans_med())
																						|| String.valueOf(
																								IRMCResponseProfileManager.STATUS_REQUIRED)
																								.equals(cargo.getMedtyp_other())
																								|| String.valueOf(
																										IRMCResponseProfileManager.STATUS_REQUIRED)
																										.equals(cargo.getMedicare_part_a())
																										|| String.valueOf(
																												IRMCResponseProfileManager.STATUS_REQUIRED)
																												.equals(cargo.getMedicare_part_b())
																												|| String.valueOf(
																														IRMCResponseProfileManager.STATUS_REQUIRED)
																														.equals(cargo.getMedicare_part_c())
																														|| String.valueOf(
																																IRMCResponseProfileManager.STATUS_REQUIRED)
																																.equals(cargo.getMedicare_part_d())
																																|| String.valueOf(
																																		IRMCResponseProfileManager.STATUS_REQUIRED)
																																		.equals(cargo.getCssp_provider_payment())
																																		|| String.valueOf(
																																				IRMCResponseProfileManager.STATUS_REQUIRED)
																																				.equals(cargo.getAnimals_to_assist_disabled())
																																				|| String.valueOf(
																																						IRMCResponseProfileManager.STATUS_REQUIRED)
																																						.equals(cargo.getFuneral_death_expense())
																																						|| String.valueOf(
																																								IRMCResponseProfileManager.STATUS_REQUIRED)
																																								.equals(cargo.getBlind_work_expense())
																																								|| String.valueOf(
																																										IRMCResponseProfileManager.STATUS_REQUIRED)
																																										.equals(cargo.getImpairment_work_expense()))

				{
					isMedicalDetailPageReguired = true;
				}
			}

			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARMBB",
						driverArray, appNum);
			}

			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (isMedicalDetailPageReguired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARMBD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARMBD", driverArray);
				if (!houseDetailPageStat.equals(IDriver.DRIVER_STATUS_COMPLETE)
						&& !houseDetailPageStat
						.equals(IDriver.DRIVER_STATUS_REQUIRED)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& houseDetailPageStat
						.equals(IDriver.DRIVER_STATUS_REQUIRED)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARMBD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARMBD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARMBD",
						driverArray, appNum);
			}

			if (!isMedicalDetailPageReguired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBB", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeMedicalBillsTypeDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeMedicalBillsTypeDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeMedicalBillsTypeDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeMedicalBillsTypeDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeMedicalBillsTypeDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeMedicalBillsTypeDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Check asset details page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @param catCd the cat cd
	 * @return true, if successful
	 */
	public boolean checkAssetDetailsPageRequired(
			final SortedSet categorySelectionProfile, final Map catType,
			final String catCd) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkAssetDetailsPageRequired() - START");
		try {
			boolean isAssetDetailPageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND
							&& categorySeqDtl.getChangeSelectionCategoryCd()
							.equals(catCd)) {
						isAssetDetailPageRequired = true;
						break;
					}
				}
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkAssetDetailsPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isAssetDetailPageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkAssetDetailsPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkAssetDetailsPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkAssetDetailsPageRequired");
		}
	}

	/**
	 * Load authorized representative.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadAuthorizedRepresentative(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"xxxxxxxRMCHousingExpenseEJBBean::loadAuthorizedRepresentative() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadAuthorizedRepresentative:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			CP_APP_AUTH_REP_Collection cpAppAuthRepColl = new CP_APP_AUTH_REP_Collection();
			final ABAuthorizedRepresentativeBO abAuthorizedRepresentativeBO = new ABAuthorizedRepresentativeBO();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			cpAppAuthRepColl = abAuthorizedRepresentativeBO
					.loadAuthorizedRepresentativeInformation(appNum, "AR");
			if (cpAppAuthRepColl != null && !cpAppAuthRepColl.isEmpty()) {
				pageCollection.put("ShowLoopingQuestionFlag", FwConstants.NO);
			} else {
				pageCollection.put("ShowLoopingQuestionFlag", FwConstants.YES);
			}
			if (pageCollection.get(FwConstants.DETAIL_KEY_BEAN) != null) {
				if (cpAppAuthRepColl != null && cpAppAuthRepColl.size() > 1) {
					pageCollection.put("ShowLoopingQuestionFlag",
							FwConstants.NO);
				} else {
					pageCollection.put("ShowLoopingQuestionFlag",
							FwConstants.YES);
				}
				final IndivTypeSeqBean indvBean = (IndivTypeSeqBean) pageCollection
						.get(FwConstants.DETAIL_KEY_BEAN);
				cpAppAuthRepColl = abAuthorizedRepresentativeBO
						.loadAuthorizedRepresentativeInformation(appNum,
								indvBean.getSeqNum(), "AR");
				pageCollection.put("CP_APP_AUTH_REP_Collection",
						cpAppAuthRepColl);
			}

			// Assingning before collection from before collection if exists
			request.put("loopingQuestion", FwConstants.NO);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			txnBean.setPageCollection(pageCollection);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::getAuthorizedRepresentativeDetails:End");

			pageCollection.put("CP_APP_AUTH_REP_Collection", cpAppAuthRepColl);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadAuthorizedRepresentative");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadAuthorizedRepresentative");
		} catch (final Exception e) {
			log(ILog.ERROR, e.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadAuthorizedRepresentative", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadAuthorizedRepresentative");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadAuthorizedRepresentative() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store authorized representative.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeAuthorizedRepresentative(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeAuthorizedRepresentativeDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeAuthorizedRepresentativeDetails:Start");
			String appNumber = FwConstants.EMPTY_STRING;

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			FwMessageList validateInfo = null;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final ABAuthorizedRepresentativeBO abAuthorizedRepresentativeBO = new ABAuthorizedRepresentativeBO();
			final CP_APP_AUTH_REP_Collection cpAppAuthRepColl = (CP_APP_AUTH_REP_Collection) pageCollection
					.get("CP_APP_AUTH_REP_Collection");
			CP_APP_AUTH_REP_Cargo cpAppAuthRepCargo = cpAppAuthRepColl
					.getCargo(0);
			cpAppAuthRepCargo.setApp_num(appNumber);
			if (!StringUtils.isEmpty((String) request.get("seqNumARARP"))
					&& !"null".equals(request.get("seqNumARARP"))) {
				cpAppAuthRepCargo.setSeq_num((String) request
						.get("seqNumARARP"));
			}

			final CP_APP_AUTH_REP_Collection cpAppAuthRepBeforeColl = (CP_APP_AUTH_REP_Collection) beforeColl
					.get("CP_APP_AUTH_REP_Collection");
			CP_APP_AUTH_REP_Cargo cpAppAuthRepBeforeCargo = new CP_APP_AUTH_REP_Cargo();

			if (cpAppAuthRepBeforeColl != null
					&& !cpAppAuthRepBeforeColl.isEmpty()
					&& cpAppAuthRepBeforeColl.getCargo(0) != null) {
				cpAppAuthRepBeforeCargo = cpAppAuthRepBeforeColl.getCargo(0);
				cpAppAuthRepBeforeCargo.setApp_num(appNumber);
			}

			final String loopingQ = (String) request.get("loopingQuestion");
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			validateInfo = abAuthorizedRepresentativeBO
					.validateAuthorizedRepresentativeInformation(
							cpAppAuthRepCargo, FwConstants.EMPTY_STRING,
							request);
			if (validateInfo != null && validateInfo.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("CP_APP_AUTH_REP_Collection",
						cpAppAuthRepColl);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put("ShowLoopingQuestionFlag",
						beforeColl.get("ShowLoopingQuestionFlag"));
				return;
			}

			if (cpAppAuthRepBeforeColl != null
					&& !cpAppAuthRepBeforeColl.isEmpty()
					&& cpAppAuthRepBeforeCargo.getSeq_num() != null
					&& cpAppAuthRepBeforeCargo.getSeq_num().equals(
							cpAppAuthRepCargo.getSeq_num())) {

				cpAppAuthRepCargo = (CP_APP_AUTH_REP_Cargo) isChanged(
						cpAppAuthRepBeforeCargo, cpAppAuthRepCargo);

				if (cpAppAuthRepCargo.isDirty()) {
					cpAppAuthRepCargo
					.setRowAction(FwConstants.ROWACTION_UPDATE);
				}

			} else if (cpAppAuthRepColl != null && !cpAppAuthRepColl.isEmpty()) {
				cpAppAuthRepCargo.setRowAction(FwConstants.ROWACTION_INSERT);
				cpAppAuthRepCargo.setDirty(true);
				cpAppAuthRepCargo.setModuleType("RMB");
			}

			boolean authRepDetailsFilledFlag = false;

			cpAppAuthRepCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));
			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			if (cpAppAuthRepCargo.getSeq_num() == null
					|| cpAppAuthRepCargo.getSeq_num().equalsIgnoreCase(
							FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setSeq_num(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_nam() == null
					|| cpAppAuthRepCargo.getAuth_rep_nam().equalsIgnoreCase(
							FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_nam(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_l1_adr() == null
					|| cpAppAuthRepCargo.getAuth_rep_l1_adr().equalsIgnoreCase(
							FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_l1_adr(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_l2_adr() == null
					|| cpAppAuthRepCargo.getAuth_rep_l2_adr().equalsIgnoreCase(
							FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_l2_adr(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_id_num() == null
					|| cpAppAuthRepCargo.getAuth_rep_id_num().equalsIgnoreCase(
							FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_id_num(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getRel_to_auth_rep_typ_cd() == null
					|| cpAppAuthRepCargo.getRel_to_auth_rep_typ_cd()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)
					|| FwConstants.DEFAULT_DROPDOWN_SEL
					.equals(cpAppAuthRepCargo
							.getRel_to_auth_rep_typ_cd())) {
				cpAppAuthRepCargo.setRel_to_auth_rep_typ_cd(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_org_nam() == null
					|| cpAppAuthRepCargo.getAuth_rep_org_nam()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_org_nam(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_city_adr() == null
					|| cpAppAuthRepCargo.getAuth_rep_city_adr()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_city_adr(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_sta_adr() == null
					|| cpAppAuthRepCargo.getAuth_rep_sta_adr()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)
					|| FwConstants.DEFAULT_DROPDOWN_SEL
					.equals(cpAppAuthRepCargo.getAuth_rep_sta_adr())) {
				cpAppAuthRepCargo.setAuth_rep_sta_adr(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_zip_adr() == null
					|| cpAppAuthRepCargo.getAuth_rep_zip_adr()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_zip_adr(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_phn_num() == null
					|| cpAppAuthRepCargo.getAuth_rep_phn_num()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_phn_num(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_duty_afb_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_duty_afb_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_duty_afb_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_duty_benefits_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_duty_benefits_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo
				.setAuth_rep_duty_benefits_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_duty_receive_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_duty_receive_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo
				.setAuth_rep_duty_receive_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_duty_request_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_duty_request_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo
				.setAuth_rep_duty_request_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_duty_other_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_duty_other_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_duty_other_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_info_share_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_info_share_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setAuth_rep_info_share_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getAuth_rep_medical_assist_ind() == null
					|| cpAppAuthRepCargo.getAuth_rep_medical_assist_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo
				.setAuth_rep_medical_assist_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getTanf_auth_rep_ind() == null
					|| cpAppAuthRepCargo.getTanf_auth_rep_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setTanf_auth_rep_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}
			if (cpAppAuthRepCargo.getSnap_auth_rep_ind() == null
					|| cpAppAuthRepCargo.getSnap_auth_rep_ind()
					.equalsIgnoreCase(FwConstants.EMPTY_STRING)) {
				cpAppAuthRepCargo.setSnap_auth_rep_ind(FwConstants.SPACE);
			} else {
				authRepDetailsFilledFlag = true;
			}

			cpAppAuthRepCargo.setRec_cplt_ind(FwConstants.ONE);
			cpAppAuthRepCargo.setRep_code("AR");

			if (authRepDetailsFilledFlag && cpAppAuthRepCargo.isDirty()) {

				abAuthorizedRepresentativeBO
				.storeAuthorizedRepresentativeInformation(cpAppAuthRepColl);
				// //CALL
			}
			if (FwConstants.YES.equals(loopingQ)) {
				final String[] pageId = { "ARARP" };
				driverManager.makeRequired(FwConstants.RMC_DRIVER, pageId,
						driverArray, appNum);
				pageCollection.put("CP_APP_AUTH_REP_Collection",
						new CP_APP_AUTH_REP_Collection());
				session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			} else {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray,
						(String) session.get(AppConstants.APP_NUMBER));
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARFIN",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeAuthorizedRepresentativeDetails:End");
		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAuthorizedRepresentativeDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeAuthorizedRepresentative");
		} catch (final Exception e) {
			log(ILog.ERROR, e.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAuthorizedRepresentativeDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeAuthorizedRepresentative");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeAuthorizedRepresentativeDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Add Authorized Representative.
	 *
	 * @param txnBean the txn bean
	 */
	public void addAuthorizedRepresentativeDetails(final FwTransaction txnBean) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"BenefitsEJBBean.addAuthorizedRepresentativeDetails() - START");
		try {
			log(ILog.INFO, "BenefitsEJBBean::addAuthorizedRepresentativeDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// make summary page as required
			driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARFIN",
					driverArray, appNum);

			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray, appNum);

			session.put("cancelFlag", true);

			log(ILog.INFO, "BenefitsEJBBean::addAuthorizedRepresentativeDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addAuthorizedRepresentativeDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addAuthorizedRepresentativeDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addAuthorizedRepresentativeDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addAuthorizedRepresentativeDetails");
		}

		log(ILog.INFO,
				"BenefitsEJBBean.addAuthorizedRepresentativeDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Change/Edit Authorized Rep Details when clicked from Summary page.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void changeAuthorizedRepresentative(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"BenefitsEJBBean.changeAuthorizedRepresentative() - START");
		try {
			log(ILog.INFO,
					"BenefitsEJBBean::changeAuthorizedRepresentative:Start");

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			final CP_APP_AUTH_REP_Collection cpAppAuthRepColl = (CP_APP_AUTH_REP_Collection) pageCollection
					.get("CP_APP_AUTH_REP_Collection");
			final CP_APP_AUTH_REP_Cargo cpAppAuthRepCargo = cpAppAuthRepColl
					.getCargo(0);
			final String seqNum = cpAppAuthRepCargo.getSeq_num();

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			final IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			indivTypeSeqBean.setSeqNum(seqNum);

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
			final String[] requiredPages = {"ARARP", "ARFIN"};
			driverManager.makeRequired(FwConstants.RMC_DRIVER, 
					requiredPages, driverArray, appNum);

			txnBean.setPageCollection(pageCollection);

			log(ILog.INFO,
					"BenefitsEJBBean::changeAuthorizedRepresentative:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeAuthorizedRepresentative");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "changeAuthorizedRepresentative");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"changeAuthorizedRepresentative", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "changeAuthorizedRepresentative");
		}

		log(ILog.INFO,
				"BenefitsEJBBean.changeAuthorizedRepresentative() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Delete Authorized Rep Details when clicked from Summary page.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseAuthorizedRepresentative(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"BenefitsEJBBean.eraseAuthorizedRepresentative() - START");
		try {
			log(ILog.INFO,
					"BenefitsEJBBean::eraseAuthorizedRepresentative:Start");

			final Map request = txnBean.getRequest();
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			final CP_APP_AUTH_REP_Collection appAuthRepColl = (CP_APP_AUTH_REP_Collection) pageCollection
					.get("CP_APP_AUTH_REP_Collection");
			final CP_APP_AUTH_REP_Cargo appAuthRepCargo = appAuthRepColl
					.getCargo(0);
			appAuthRepCargo.getSeq_num();
			appAuthRepCargo.setRep_code("AR");

			final ABHouseholdInformationSummaryBO summaryBO = new ABHouseholdInformationSummaryBO();
			// getting warning from the request
			boolean warningMsgFlag = false;

			summaryBO.validateAuthRepErase();
			if (summaryBO.hasMessages()) {

				final String reqWarningMsgs = (String) request
						.get(FwConstants.WARNING_MSG_DETAILS);

				warningMsgFlag = checkForWarningMesgs(reqWarningMsgs,
						summaryBO.getMessageList());

				if (!warningMsgFlag) {

					request.put(FwConstants.MESSAGE_LIST,
							summaryBO.getMessageList());

					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));

					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
							beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
					return;
				}
			}

			appAuthRepCargo.setApp_num(appNum);
			appAuthRepCargo.setRowAction(FwConstants.ROWACTION_DELETE);
			final CP_APP_AUTH_REP_Collection deleteColl = new CP_APP_AUTH_REP_Collection();
			deleteColl.add(appAuthRepCargo);
			summaryBO.deleteAuthRep(deleteColl);

			// make detail page as not required
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARARP", driverArray, appNum);
			// make summary page as required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARFIN",
					driverArray, appNum);

			log(ILog.INFO, "BenefitsEJBBean::eraseAuthorizedRepresentative:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseAuthorizedRepresentative");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseAuthorizedRepresentative");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseAuthorizedRepresentative", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseAuthorizedRepresentative");
		}

		log(ILog.INFO,
				"BenefitsEJBBean.eraseAuthorizedRepresentative() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Load finish summary.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadFinishSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.loadFinishSummary() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::loadFinishSummary:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);


			// set language
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);
			if (language == null || language.trim().length() == 0) {
				language = "EN";
			}

			final ABAuthorizedRepresentativeBO abAuthorizedRepresentativeBO = new ABAuthorizedRepresentativeBO();
			// get Auth Rep from database
			CP_APP_AUTH_REP_Collection cpAppAuthRepColl = null;
			cpAppAuthRepColl = abAuthorizedRepresentativeBO
					.loadAuthorizedRepresentativeInformation(appNum, "AR");
			final RMBAuthorizedRepresentativeListView listviewAuthorizedRepresentative = new RMBAuthorizedRepresentativeListView();
			listviewAuthorizedRepresentative.setLanguage(language);
			listviewAuthorizedRepresentative.setCollection(cpAppAuthRepColl);
			listviewAuthorizedRepresentative.setName("ARFIN_AUTHREP_LISTVIEW");
			if (cpAppAuthRepColl != null) {
				listviewAuthorizedRepresentative
				.setDisplayData(cpAppAuthRepColl);
			}

			pageCollection.put("ARFIN_AUTHREP_LISTVIEW",
					listviewAuthorizedRepresentative);

			pageCollection.put("CP_APP_AUTH_REP_Collection", cpAppAuthRepColl);
			componentManager.getComponents(
					(String) request.get(FwConstants.CURRENT_PAGE_ID), txnBean);
			txnBean.setPageCollection(pageCollection);
			// get the pagecollection
			pageCollection = txnBean.getPageCollection();
			if (cpAppAuthRepColl != null) {
				boolean flag = true;
				if (cpAppAuthRepColl.size() == 1
						&& !cpAppAuthRepColl.isEmpty()) {
					flag = false;
				}
				pageCollection.put("flag", flag);
			}

			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadFinishSummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadFinishSummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadFinishSummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadFinishSummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadFinishSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store finish summary.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeFinishSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.storeFinishSummary() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getRelevantIndividuals();

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			session.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARFIN",
					driverArray, appNum);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeFinishSummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeFinishSummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeFinishSummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeFinishSummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeFinishSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load id proofing questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadIDProofingQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadIDProofingQuestions() - START");
		try {
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadIDProofingQuestions:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			 String appNumber = null;
	            final PeopleHandler peopleHandler = (PeopleHandler) session
	                    .get(AppConstants.INDIV_MASTER_HANDLER);

			if (null == session.get(AppConstants.CHALLENGE_QUESTION_LIST)) {
				/* invoke id proofing again */
				final ABIdentityProofingtBO idProofBO = new ABIdentityProofingtBO();
				idProofBO.processIdProofing(session,
						AppConstants.RMC_MODIFIED_RECORD_IND);
			}

			final List<ChallengeQuestion> questinList = (List<ChallengeQuestion>) session
					.get(AppConstants.CHALLENGE_QUESTION_LIST);

			final IDProofingResponse idpResp = (IDProofingResponse) session
					.get("IDP_RESP");

			pageCollection.put(AppConstants.CHALLENGE_QUESTION_LIST,
					questinList);

			txnBean.setPageCollection(pageCollection);
			session.put("IDP_RESP", idpResp);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);
			final INDIVIDUAL_Custom_Collection indvCustomColl = peopleHandler
			        .getInAndOutOfHomeIndividuals(appNumber);
			final String indvSeqNum = indvCustomColl.getResult(0)
			        .getIndv_seq_num();

			pageCollection.put(AppConstants.FIRST_NAME,
			        peopleHandler.getFirstName(indvSeqNum));

			txnBean.setPageCollection(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO, "HousingExpenseEJBBean::loadIDProofingQuestions:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadIDProofingQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadIDProofingQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadIDProofingQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadIDProofingQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadIDProofingQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store id proofing questions.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeIDProofingQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeIDProofingQuestions() - START");
		try {

			FwMessageList validateInfo = null;
			final Map session = txnBean.getSession();
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getRelevantIndividuals();
			final Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);

			request.get(FwConstants.CURRENT_PAGE_ID);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			/* check for id proofing questions */
			final List<ChallengeQuestion> questinList = (List<ChallengeQuestion>) session
					.get(AppConstants.CHALLENGE_QUESTION_LIST);
			if (null != questinList && !questinList.isEmpty()) {
				final Map<Integer, Integer> respMap = new HashMap<>();

				for (final Object key : request.keySet()) {
					final String param = (String) key;
					if (param.startsWith("radioGroup_QUESTION")) {
						final String[] p = param.split("_");
						final String value = (String) request.get(key);
						respMap.put(Integer.parseInt(p[2]),
								Integer.parseInt(value));
					}
				}
				final ABIdentityProofingtBO idProofBO = new ABIdentityProofingtBO();
				
				
				final IDProofingResponse resp = (IDProofingResponse) session
                        .get("IDP_RESP");
				validateInfo = idProofBO.validateQuestions(respMap,resp.getChallengeQuestions().size());

				if (validateInfo != null && validateInfo.hasMessages()) {
					request.put(FwConstants.MESSAGE_LIST, validateInfo);
					
					pageCollection.put(AppConstants.CHALLENGE_QUESTION_LIST,
							resp.getChallengeQuestions());
					pageCollection.put("selectedMap", respMap);
					pageCollection.put(AppConstants.FIRST_NAME, beforeColl.get(AppConstants.FIRST_NAME));
					return;

				}

				final IDProofingRequest idpRequest = new IDProofingRequest();

				idpRequest.setQuestionResp(respMap);
				idpRequest.setIdpSessionId(resp.getIdpSessionId());
				final IDProofingResponse idpResp = idProofBO
						.finalInquiry(idpRequest);

				final int kbaScore = idpResp.getKbaScore();

				// store kba Score in cp_app_rqst
				final RMBRequestManager rmbManager = new RMBRequestManager();
				final RMB_RQST_Cargo rqstCargo = rmbManager
						.loadRMBRequest(appNum);

				if (null != rqstCargo) {
					rqstCargo.setPrimaryIndvScore(idpResp.getIdProofingStatus());
					rqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					final RMB_RQST_Collection rqStColl = new RMB_RQST_Collection();
					rqStColl.add(rqstCargo);
					rqStColl.persist(FwConstants.DAO);
					//need to update session collection as well 
					session.put(AppConstants.RMB_RQST_COLLECTION,rqStColl);
				}
			}

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			session.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);

			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARIDP", driverArray, appNum);
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARIDP",
					driverArray, appNum);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeIDProofingQuestions");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeIDProofingQuestions");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeIDProofingQuestions", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeIDProofingQuestions");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeIDProofingQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load before you submit.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadBeforeYouSubmit(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.loadBeforeYouSubmit() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::loadBeforeYouSubmit:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get appNumber from the session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Getting people handler from session
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final ARPreSubmitBO preSubmitBO = new ARPreSubmitBO();
			List notCompleteList = new ArrayList();
			if (pageCollection.get("INCOMLPETE_PAGE_LIST") == null) {
				notCompleteList = preSubmitBO.loadPreApplicationSubmission(
						appNum, peopleHandler,
						(short[]) session.get(FwConstants.RMC_PROGRAM_KEY));
			} else {
				notCompleteList = (List) pageCollection
						.get("INCOMLPETE_PAGE_LIST");
			}
			final String token = session != null ? (String) session
					.get(FwConstants.SECURITY_TOKEN) : "";
					final List dataList = new ArrayList<>();
					dataList.add(notCompleteList);
					dataList.add(token);
					final ARPreSubmitSummaryListView preSubmitListViewVO = new ARPreSubmitSummaryListView();
					final Map httpSessionMap = (Map) session
							.get(FwConstants.HTTP_SESSION);
					final String language = (String) httpSessionMap
							.get(AppConstants.LANGUAGE);
					preSubmitListViewVO.setLanguage(language);
					preSubmitListViewVO.setName("PRESUBMIT");
					preSubmitListViewVO.setDisplayData(dataList);
					pageCollection.put("PRESUBMIT_LISTVIEW", preSubmitListViewVO);
					txnBean.setPageCollection(pageCollection);
					session.put(FwConstants.BEFORE_COLLECTION,
							txnBean.getPageCollection());
					txnBean.setSession(session);

					log(ILog.INFO, "HousingExpenseEJBBean::loadBeforeYouSubmit:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadBeforeYouSubmit");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadBeforeYouSubmit");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadBeforeYouSubmit", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadBeforeYouSubmit");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadBeforeYouSubmit() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store before you submit.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeBeforeYouSubmit(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeBeforeYouSubmit() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeBeforeYouSubmit");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeBeforeYouSubmit");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeBeforeYouSubmit", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeBeforeYouSubmit");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeBeforeYouSubmit() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Invoke id proofing.
	 *
	 * @param session the session
	 * @param appNum the app num
	 * @param driverArray the driver array
	 * @throws MalformedURLException the malformed url exception
	 */
	private void invokeIdProofing(final Map session, final String appNum,
			final int[] driverArray) throws MalformedURLException {
		/* Invoke id proofing* */
		final ABIdentityProofingtBO idProofBO = new ABIdentityProofingtBO();
		final boolean idproofing = idProofBO.processIdProofing(session,
				AppConstants.RMC_MODIFIED_RECORD_IND);

		/* schedule the driver as per the idproofing flag */
		if (!idproofing) {
			driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
					"ARIPI", driverArray, appNum);
			/* check ABIPQ for completion */
			final Object object = session
					.get(AppConstants.CHALLENGE_QUESTION_LIST);
			boolean questionsAvailable = false;
			if (null != object) {
				final List<ChallengeQuestion> qList = (List<ChallengeQuestion>) object;
				questionsAvailable = qList.size() > 0;
			}
			if (questionsAvailable
					&& FwConstants.DRIVER_COMPLETE != driverManager
					.getAFBStatus(FwConstants.RMC_DRIVER, "ARIDP",
							driverArray)) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIDP",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARIDP", driverArray, appNum);
			}

		} else {
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIPI",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIDP",
					driverArray, appNum);
		}
	}

	/**
	 * Load hipaa.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadHIPAA(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.loadHIPAA() - START");
		try {
			log(ILog.INFO, "HousingExpenseEJBBean::loadHIPAA:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			CP_APP_ESGIN_Collection appEsignColl = null;
			String appNumber = (String) session.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final ABHouseHoldMemberBO hmbo = new ABHouseHoldMemberBO();
			appNumber = (String) session.get(AppConstants.APP_NUMBER);

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			log(ILog.INFO, "BenefitsEJBBean::getHIPAA:End");

			appEsignColl = hmbo.getCitizenshipDetails(appNumber);
			pageCollection.put("CP_APP_ESGIN_Collection", appEsignColl);

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeColl = new HashMap();
				beforeColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}

			log(ILog.INFO, "HousingExpenseEJBBean::loadHIPAA:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadHIPAA");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "invokeIdProofing");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadHIPAA", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "invokeIdProofing");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadHIPAA() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store hipaa.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeHIPAA(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.storeHIPAA() - START");

		String appNumber = FwConstants.EMPTY_STRING;
		CP_APP_ESGIN_Collection esignColl = null;
		CP_APP_ESGIN_Collection esignBeforeColl = null;
		CP_APP_ESGIN_Cargo appEsignCargo = null;
		CP_APP_ESGIN_Cargo appEsignBeforeCargo = null;

		FwMessageList validateInfo = null;
		

		final ABHouseHoldMemberBO hmBo = new ABHouseHoldMemberBO();
		final ABHouseholdMembersSummaryBO hmSummarybo = new ABHouseholdMembersSummaryBO();
		int age = 0;
		final APP_INDV_Collection appIndvChildrenColl = new APP_INDV_Collection();
		try {
			log(ILog.INFO, "BenefitsEJBBean::storeHIPAA:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);

			final Map httpSession = (Map) session.get(FwConstants.HTTP_SESSION);
			String languageCd = (String) httpSession.get(AppConstants.LANGUAGE);
			if (languageCd == null || languageCd.trim().length() == 0) {
				languageCd = "EN";
			}

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			
			final IProgramManager programManager = FwProgramManager
					.getInstance();
			final Map pgmKey = programManager.loadProgramKey(appNumber);
			final short[] programKeyArray = (short[]) pgmKey
					.get(AppConstants.ZERO);

			// Get The before collection from session
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			beforeColl.get("CP_APP_ESGIN_Collection");
			if (beforeColl != null && !beforeColl.isEmpty()) {
				if (beforeColl.containsKey("CP_APP_ESGIN_Collection")) {
					esignBeforeColl = (CP_APP_ESGIN_Collection) beforeColl
							.get("CP_APP_ESGIN_Collection");
				}
			}
			if (esignBeforeColl != null && !esignBeforeColl.isEmpty()) {
				appEsignBeforeCargo = (CP_APP_ESGIN_Cargo) esignBeforeColl
						.get(0);
			}

			// Get the Esign page level collection from page collection
			esignColl = (CP_APP_ESGIN_Collection) pageCollection
					.get("CP_APP_ESGIN_Collection");

			if (esignColl != null && !esignColl.isEmpty()) {
				appEsignCargo = (CP_APP_ESGIN_Cargo) esignColl.get(0);
			}

			final java.util.Date date = new java.util.Date();

			final Timestamp currentTimestamp = new Timestamp(date.getTime());
			final String applHipaaEsignDate = currentTimestamp.toString();

			appEsignCargo.setApp_num(appNumber);
			appEsignCargo.setSeq_num(FwConstants.ONE);
			appEsignCargo.setSrc_app_ind("RM");
			appEsignCargo.setAppl_hipaa_esign_date(applHipaaEsignDate);
			
			boolean fmaRequested = false;
			if(programKeyArray[0] == 1){
				fmaRequested = true;
			}

			validateInfo = hmBo.validateHippaDetails(esignColl,fmaRequested);
			if (validateInfo != null && validateInfo.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("CP_APP_ESGIN_Collection", esignColl);

				final APP_INDV_Collection appIndvColl = hmSummarybo
						.loadHouseholdMembers(appNumber);
				for (int i = 0; i < appIndvColl.size(); i++) {
					final APP_INDV_Cargo tempCargo = (APP_INDV_Cargo) appIndvColl
							.get(i);
					age = AgeUtil.calculateAge(tempCargo.getBrth_dt());
					if (age > 16) {
						continue;
					} else {
						appIndvChildrenColl.add(tempCargo);
					}
				}

				return;
			}

			if (appEsignBeforeCargo != null) {
				appEsignCargo = (CP_APP_ESGIN_Cargo) isChanged(
						appEsignBeforeCargo, appEsignCargo);
			}
			if (appEsignCargo.isDirty()) {
				appEsignCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
			} else {
				appEsignCargo.setRowAction(FwConstants.ROWACTION_INSERT);
			}
			final CP_APP_ESGIN_Collection storeAppEsginColl = new CP_APP_ESGIN_Collection();
			storeAppEsginColl.add(appEsignCargo);
			hmBo.storeCitizenship(storeAppEsginColl);

			if (driverStatus != FwConstants.DRIVER_COMPLETE) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			}

			log(ILog.INFO, "BenefitsEJBBean::storeHIPAA:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHIPAA");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHIPAA");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeHIPAA", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeHIPAA");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHIPAA() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load id proofing instructions details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadIDProofingInstructionsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadIDProofingInstructionsDetails() - START");
		try {
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadIDProofingInstructionsDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);

			log(ILog.INFO,
					"HousingExpenseEJBBean::loadIDProofingInstructionsDetails:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadIDProofingInstructionsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadIDProofingInstructionsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadIDProofingInstructionsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadIDProofingInstructionsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadIDProofingInstructionsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store id proofing instructions details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeIDProofingInstructionsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeIDProofingInstructionsDetails() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getRelevantIndividuals();

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			session.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARIPI",
					driverArray, appNum);

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeIDProofingInstructionsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeIDProofingInstructionsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeIDProofingInstructionsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeIDProofingInstructionsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeHouseHoldInfoContactDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load other bills summary.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadOtherBillsSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadOtherBillsSummary() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadOtherBillsSummary:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			// Getting App Number
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			// Getting PeopleHandler from sesssion
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);

			// For Child Care
			boolean loadChildCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadChildCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is liquid resources
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& catSeqDetail
							.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
						loadChildCatSelProfile = false;
					} else {
						loadChildCatSelProfile = true;
					}
				}
			}

			// For Child Obligation
			boolean loadObligCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadObligCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is liquid resources
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& catSeqDetail
							.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
						loadObligCatSelProfile = false;
					} else {
						loadObligCatSelProfile = true;
					}
				}
			}

			// For Medical Bills
			boolean loadMedicalBillSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadMedicalBillSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is liquid resources
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& catSeqDetail
							.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
						loadMedicalBillSelProfile = false;
					} else {
						loadMedicalBillSelProfile = true;
					}
				}
			}

			// For before tax deduction
			boolean loadBeforeTaxDeductionSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadBeforeTaxDeductionSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);
					if (catSeqDetail != null
							&& catSeqDetail
							.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
						loadBeforeTaxDeductionSelProfile = false;
					} else {
						loadBeforeTaxDeductionSelProfile = true;
					}
				}
			}

			// For income tax deduction
			boolean loadIncomeTaxDeductionSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadIncomeTaxDeductionSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);
					if (catSeqDetail != null
							&& catSeqDetail
							.getChangeSelectionCategoryCd()
							.equals(AppConstants.RMC_CAT_OTHER_BILL_PRFL)) {
						loadIncomeTaxDeductionSelProfile = false;
					} else {
						loadIncomeTaxDeductionSelProfile = true;
					}
				}
			}

			// now loading the cat selection profile form the data base

			if (loadChildCatSelProfile || loadObligCatSelProfile
					|| loadMedicalBillSelProfile
					|| loadIncomeTaxDeductionSelProfile
					|| loadBeforeTaxDeductionSelProfile) {
				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}
			categorySelectionProfileManager
			.resetCurrentSeqeunceDetail(selectionProfile);
			final ABOtherExpensesSummaryBO otherBillBO = new ABOtherExpensesSummaryBO();

			// Getting language from http session
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);

			final CP_ABCHS_Collection childcoll = otherBillBO
					.loadChildCareDetails(appNumber);
			final Cp_App_In_Deduction_Collection obligcoll = otherBillBO
					.loadChildObligDetails(appNumber);
			final CP_APP_IN_MED_BILLS_Collection medBillDtl = otherBillBO
					.loadMedialBillDetailsSummary(appNumber);
			otherBillBO.splitOtherMedBillType(medBillDtl);
			final ABBeforeTaxDeductionBO bfrTxDedBO = new ABBeforeTaxDeductionBO();
			final CP_APP_IN_BEF_TAX_DED_Collection bfrTxDedColl = bfrTxDedBO
					.getBeforeTaxDeductionDetails(appNumber);
			final ABIncomeTaxDeductionBO incomeTxDedBO = new ABIncomeTaxDeductionBO();
			final CP_APP_IN_INCOME_TAX_DED_Collection incomeTxDedColl = incomeTxDedBO
					.getIncomeTaxDeductionDetails(appNumber);

			final int sizeChildCareColl = childcoll.size();
			final int sizeChildObligColl = obligcoll.size();
			final int sizeMediBillColl = medBillDtl.size();
			final int sizeBfrTxDedColl = bfrTxDedColl.size();
			final int sizeIncomeTxDedColl = incomeTxDedColl.size();

			String newOrModifiedChildCareExists = FwConstants.NO;
			String newOrModifiedChildObligExists = FwConstants.NO;
			String newOrModifiedMediBillExists = FwConstants.NO;
			String newOrModifiedBeforeTaxDedExists = FwConstants.NO;
			String newOrModifiedIncomeTaxDedExists = FwConstants.NO;

			for (int i = 0; i < sizeChildCareColl; i++) {
				CP_ABCHS_Cargo childCareCargo = new CP_ABCHS_Cargo();
				childCareCargo = childcoll.getCargo(i);
				if (newOrModifiedChildCareExists.equals(FwConstants.NO)) {
					if (childCareCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| childCareCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedChildCareExists = FwConstants.YES;
					}
				}
			}

			for (int i = 0; i < sizeChildObligColl; i++) {
				Cp_App_In_Deduction_Cargo childObligCargo = new Cp_App_In_Deduction_Cargo();
				childObligCargo = obligcoll.getCargo(i);
				if (newOrModifiedChildObligExists.equals(FwConstants.NO)) {
					if (childObligCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| childObligCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedChildObligExists = FwConstants.YES;
					}
				}
			}

			for (int i = 0; i < sizeMediBillColl; i++) {
				CP_APP_IN_MED_BILLS_Cargo mediBillCargo = new CP_APP_IN_MED_BILLS_Cargo();
				mediBillCargo = medBillDtl.getCargo(i);
				if (newOrModifiedMediBillExists.equals(FwConstants.NO)) {
					if (mediBillCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| mediBillCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedMediBillExists = FwConstants.YES;
					}
				}
			}

			for (int i = 0; i < sizeBfrTxDedColl; i++) {
				CP_APP_IN_BEF_TAX_DED_Cargo beforeTaxDeductionCargo = new CP_APP_IN_BEF_TAX_DED_Cargo();
				beforeTaxDeductionCargo = bfrTxDedColl.getCargo(i);
				if (newOrModifiedBeforeTaxDedExists.equals(FwConstants.NO)) {
					if (beforeTaxDeductionCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| beforeTaxDeductionCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedBeforeTaxDedExists = FwConstants.YES;
					}
				}
			}

			for (int i = 0; i < sizeIncomeTxDedColl; i++) {
				CP_APP_IN_INCOME_TAX_DED_Cargo incomeTaxDeductionCargo = new CP_APP_IN_INCOME_TAX_DED_Cargo();
				incomeTaxDeductionCargo = incomeTxDedColl.getCargo(i);
				if (newOrModifiedIncomeTaxDedExists.equals(FwConstants.NO)) {
					if (incomeTaxDeductionCargo.getSrc_app_ind().equals(
							AppConstants.RMC_NEW_RECORD_IND)
							|| incomeTaxDeductionCargo.getSrc_app_ind().equals(
									AppConstants.RMC_MODIFIED_RECORD_IND)) {
						newOrModifiedIncomeTaxDedExists = FwConstants.YES;
					}
				}
			}

			final AROtherBillsChildCareBillSummaryListView otherBillChildCareSummary = new AROtherBillsChildCareBillSummaryListView();
			final AROtherBillsChildObligationSummaryListView otherBillChildObligSummary = new AROtherBillsChildObligationSummaryListView();
			final AROtherBillsMedicalBillsTypeSummaryListView otherBillMediBillSummary = new AROtherBillsMedicalBillsTypeSummaryListView();
			final AROtherBillsBeforeTaxDeductionSummaryListView otherBillBeforeTaxDeductionSummary = new AROtherBillsBeforeTaxDeductionSummaryListView();
			final AROtherBillsIncomeTaxDeductionSummaryListView otherBillIncomeTaxDeductionSummary = new AROtherBillsIncomeTaxDeductionSummaryListView();

			// Preparing listView for Child Care selection
			otherBillChildCareSummary.setAppType(appType);
			otherBillChildCareSummary.setLanguage(language);
			otherBillChildCareSummary
			.setName("RMB_CHILD_CARE_DETAILS_LISTVIEW");
			otherBillChildCareSummary.setCollection(childcoll);
			otherBillChildCareSummary.setDisplayData(childcoll);
			otherBillChildCareSummary.setPageSize(1000);

			// Preparing listView for Child Obligation selection
			otherBillChildObligSummary.setAppType(appType);
			otherBillChildObligSummary.setLanguage(language);
			otherBillChildObligSummary
			.setName("RMB_CHILD_SUPPORT_OBLIGATION_LISTVIEW");
			otherBillChildObligSummary.setCollection(obligcoll);
			otherBillChildObligSummary.setDisplayData(obligcoll);
			otherBillChildObligSummary.setPageSize(1000);

			// Preparing listView for Medical Bill selection
			otherBillMediBillSummary.setAppType(appType);
			otherBillMediBillSummary.setLanguage(language);
			otherBillMediBillSummary
			.setName("RMB_MEDICAL_BILL_DETAILS_LISTVIEW");
			otherBillMediBillSummary.setCollection(medBillDtl);
			otherBillMediBillSummary.setDisplayData(medBillDtl);
			otherBillMediBillSummary.setPageSize(1000);

			otherBillBeforeTaxDeductionSummary.setAppType(appType);
			otherBillBeforeTaxDeductionSummary.setLanguage(language);
			otherBillBeforeTaxDeductionSummary
			.setName(AppConstants.RMB_BEFORE_TAX_DEDUCTION_LISTVIEW);
			otherBillBeforeTaxDeductionSummary.setCollection(bfrTxDedColl);
			otherBillBeforeTaxDeductionSummary.setDisplayData(bfrTxDedColl);
			otherBillBeforeTaxDeductionSummary.setPageSize(1000);

			otherBillIncomeTaxDeductionSummary.setAppType(appType);
			otherBillIncomeTaxDeductionSummary.setLanguage(language);
			otherBillIncomeTaxDeductionSummary
			.setName(AppConstants.RMB_INCOME_TAX_DEDUCTION_LISTVIEW);
			otherBillIncomeTaxDeductionSummary.setCollection(incomeTxDedColl);
			otherBillIncomeTaxDeductionSummary.setDisplayData(incomeTxDedColl);
			otherBillIncomeTaxDeductionSummary.setPageSize(1000);

			// Put into session of these collections
			pageCollection.put("CP_ABCHS_Collection", childcoll);
			pageCollection.put("NEW_OR_MOD_CHILD_CARE_EXISTS",
					newOrModifiedChildCareExists);
			pageCollection.put("Cp_App_In_Deduction_Collection", obligcoll);
			pageCollection.put("NEW_OR_MOD_CHILD_OBLIG_EXISTS",
					newOrModifiedChildObligExists);
			pageCollection.put("CP_APP_IN_MED_BILLS_Collection", medBillDtl);
			pageCollection.put("NEW_OR_MOD_OTHER_MEDBILL_EXISTS",
					newOrModifiedMediBillExists);
			pageCollection.put(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
					bfrTxDedColl);
			pageCollection.put(AppConstants.NEW_OR_MOD_BEF_TAX_DED_EXISTS,
					newOrModifiedBeforeTaxDedExists);
			pageCollection.put(
					AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
					incomeTxDedColl);
			pageCollection.put(AppConstants.NEW_OR_MOD_INCOME_TAX_DED_EXISTS,
					newOrModifiedIncomeTaxDedExists);

			// Poupulating pageCollection with respective response maps
			pageCollection.put("RMB_CHILD_CARE_DETAILS_LISTVIEW",
					otherBillChildCareSummary);
			pageCollection.put("RMB_CHILD_SUPPORT_OBLIGATION_LISTVIEW",
					otherBillChildObligSummary);
			pageCollection.put("RMB_MEDICAL_BILL_DETAILS_LISTVIEW",
					otherBillMediBillSummary);
			pageCollection.put(AppConstants.RMB_BEFORE_TAX_DEDUCTION_LISTVIEW,
					otherBillBeforeTaxDeductionSummary);
			pageCollection.put(AppConstants.RMB_INCOME_TAX_DEDUCTION_LISTVIEW,
					otherBillIncomeTaxDeductionSummary);

			// run component manager
			componentManager.getComponents(AppConstants.ARBBS, txnBean);

			final RMC_IN_PRFL_Collection rmcInprflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			getPeopleCollectionAndUpdateMapsForSummary(rmcInprflColl,
					pageCollection, peopleHandler, "411",
					IRMCResponseProfileManager.UNPAID_MEDBILL, true, true);

			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			pageCollection.put("INDV_SRC_CUST_Collection", indvColl);
			pageCollection.put(AppConstants.PEOPLE_9000, indvColl);
			pageCollection.put(AppConstants.PEOPLE_9001, indvColl);

			txnBean.setPageCollection(pageCollection);

			final Map newAssetMap = new HashMap();
			pageCollection.put("NEW_ASSET_MAP", newAssetMap);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			txnBean.setSession(session);

			log(ILog.INFO, "RMCHousingExpenseEJBBean::loadOtherBillsSummary");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherBillsSummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadOtherBillsSummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherBillsSummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadOtherBillsSummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadOtherBillsSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store other bills summary.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeOtherBillsSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeOtherBillsSummary() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			pageCollection.get("NO_ONE_Collection");
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getRelevantIndividuals();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}
			final Map noOneCheckedMap = (Map) beforeColl
					.get(AppConstants.NO_ONE_CHECKED_MAP);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray);
			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			final RMB_RQST_Collection sessRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (sessRqstColl != null) {
				sessRqstColl.getCargo(0);
			}
			final RMC_IN_PRFL_Collection beforePrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final RMC_IN_PRFL_Collection rmcPrflColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");
			rmcResponseProfileManager.getMaxIndvSeqNumber(beforePrflColl);
			final ABOtherExpensesSummaryBO otherBillBO = new ABOtherExpensesSummaryBO();
			if (otherBillBO.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST,
						otherBillBO.getMessageList());
				final Map indvSelectedMap = new HashMap();
				for (int a = 0; a < rmcPrflColl.size(); a++) {
					final RMC_IN_PRFL_Cargo cargo = rmcPrflColl.getCargo(a);
					if (cargo.getOther_asset_transfer_resp().equalsIgnoreCase(
							AppConstants.YES)) {
						indvSelectedMap
						.put(cargo.getIndv_seq_num(),
								String.valueOf(ICategorySelectionProfileManager.STATUS_REQUIRED));
					}
				}
				pageCollection.put("CP_ABCHS_Collection",
						beforeColl.get("CP_ABCHS_Collection"));
				pageCollection.put("Cp_App_In_Deduction_Collection",
						beforeColl.get("Cp_App_In_Deduction_Collection"));
				pageCollection.put("CP_APP_IN_MED_BILLS_Collection",
						beforeColl.get("CP_APP_IN_MED_BILLS_Collection"));
				pageCollection.put("NEW_OR_MOD_LIQUID_EXISTS",
						beforeColl.get("NEW_OR_MOD_LIQUID_EXISTS"));
				pageCollection
				.put(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
						beforeColl
						.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION));
				pageCollection
				.put(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
						beforeColl
						.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION));
				pageCollection.put(AppConstants.PEOPLE_9000,
						beforeColl.get(AppConstants.PEOPLE_9000));
				pageCollection.put(AppConstants.PEOPLE_9001,
						beforeColl.get(AppConstants.PEOPLE_9001));
				pageCollection.put("INDV_SRC_CUST_Collection",
						beforeColl.get("INDV_SRC_CUST_Collection"));
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);
				componentManager.getComponents("ARBBS", txnBean);
				return;

			}
			session.put(AppConstants.RMB_RQST_COLLECTION, sessRqstColl);
			final ChangingValidation cv = new ChangingValidation();
			cv.setDependentCareInd(txnBean);
			cv.setChildSupportInd(txnBean);
			cv.setMedicalExpenseInd(txnBean);
			cv.setBfrTaxChgInd(txnBean);
			cv.setIncTaxChgInd(txnBean);

			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);
			session.put(FwConstants.RMC_DRIVER, driverArray);

			// End
			
			
         /* invoke id proofing */
            
            final String appType = (String) session.get(FwConstants.ACCESS_APPLICATION_TYPE);
            final short[] pgmKeyArr = (short[]) session.get(FwConstants.RMC_PROGRAM_KEY);
            boolean maOnly = false;
            if(pgmKeyArr[FwConstants.FMA_INDEX]== 1
               && pgmKeyArr[FwConstants.FS_INDEX]== 0
               && pgmKeyArr[FwConstants.TANF_INDEX]== 0){
                maOnly = true;
            }
            
          //Enable based on flag in properties
			final String enableIDProofingFlag = FwConfigurationManager.getInstance()
					.getEnvironmentProperty(AppConstants.ENABLE_IDPROOFING);
			boolean enableIdproof = FwConstants.YES.equalsIgnoreCase(enableIDProofingFlag);
			
            /* skip id proofing for RMC calls */
            if (AppConstants.RMB_APPLICATION.equals(appType) && maOnly && enableIdproof) {
                invokeIdProofing(session, appNum, driverArray);
            }else {
            	driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
    					"ARIPI", driverArray, appNum);
            	driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
    					"ARIDP", driverArray, appNum);
            }

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeOtherBillsSummary:End");

		} catch (final FwException fe) {
			log(ILog.ERROR, fe.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherBillsSummary");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeOtherBillsSummary");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherBillsSummary", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeOtherBillsSummary");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeOtherBillsSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/* Child Care Summary Page Method ---------------------------- Starts */

	/**
	 * Edits the child care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editChildCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editChildCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editChildCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final CP_ABCHS_Collection appInChildColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			final CP_ABCHS_Cargo appInChildCargo = appInChildColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInChildCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInChildCargo.getSeq_num());
			seqBean.setType("CCB");

			// setting user end indicator

			if ("RE".equals(appInChildCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCCC",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editChildCareDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editChildCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editChildCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editChildCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editChildCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editChildCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase child care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseChildCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final CP_ABCHS_Collection childColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			final CP_ABCHS_Cargo childCargo = childColl.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = childCargo.getIndv_seq_num();
			seqNum = childCargo.getSeq_num();

			CP_ABCHS_Cargo beforeChildCareCargo = (CP_ABCHS_Cargo) beforeColl
					.get("CP_ABCHS_Cargo");

			final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

			if (beforeChildCareCargo == null
					|| otherBo.isDifferentAsset(childCargo,
							beforeChildCareCargo)) {

				otherBo.validateErase();
				request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
				beforeChildCareCargo = new CP_ABCHS_Cargo();
				beforeChildCareCargo.setIndv_seq_num(indvSeqNum);
				beforeChildCareCargo.setSeq_num(seqNum);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1,1 lines Commented Code
				 * in this block
				 */

				beforeColl.put("CP_ABCHS_Cargo", beforeChildCareCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			otherBo.deleteChildCareRecords(indvSeqNum, seqNum, appNum);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_OTHER_BILL_PRFL , AppConstants.CHILD_CARE_BILL);
			// delete record from rmc selection profile
						final SortedSet rmcSelPrfl = (SortedSet) session
								.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.CHILD_CARE_RESP };

			if (beforeColl != null) {
				int count = 0;
				CP_ABCHS_Collection cld1Col = null;
				CP_ABCHS_Cargo cld1Cargo = null;
				cld1Col = (CP_ABCHS_Collection) beforeColl
						.get("CP_ABCHS_Collection");

				if (cld1Col != null && !cld1Col.isEmpty()) {
					final int utilityCollSize = cld1Col.size();
					for (int i = 0; i < utilityCollSize; i++) {
						cld1Cargo = cld1Col.getCargo(i);
						if (cld1Cargo.getIndv_seq_num().equals(indvSeqNum) /*
						 * &&
						 * asset1Cargo
						 * .
						 * getVeh_aset_typ
						 * (
						 * )
						 * .
						 * equals
						 * (
						 * vehicleAssetType
						 * )
						 */
								&& cld1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);

				}
			}

			boolean rmcPrflChildCareNotReq = false;
			// here we need to check we have no entrys in rmcPrfl for the Life
			// Insurance detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_CARE_RESP)) {
					rmcPrflChildCareNotReq = true;
				}
			} else {

				rmcPrflChildCareNotReq = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TRLE", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map childCareTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				childCareTypeMap.put(codeValues[i], codeValues[i]);
			}

			if (categorySelectionProfileManager.isEmpty(rmcSelPrfl,
					childCareTypeMap) && rmcPrflChildCareNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCCC", driverArray, appNum);
			}

			if (!checkAssetDetailsPageRequired(rmcSelPrfl, childCareTypeMap,
					AppConstants.CHILD_CARE_BILL) && rmcPrflChildCareNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCCC", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildCareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseChildCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseChildCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase child care changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseChildCareChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildCareChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildCareChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String childCareType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final CP_ABCHS_Collection childColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			final CP_ABCHS_Cargo childCareCargo = childColl.getCargo(0);

			// Get the results from the APP_IN_VEH_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = childCareCargo.getIndv_seq_num();
			seqNum = childCareCargo.getSeq_num();
			childCareType = "CCB";
			CP_ABCHS_Cargo beforeChildCargo = (CP_ABCHS_Cargo) beforeColl
					.get("CP_ABCHS_Cargo");

			final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

			if (beforeChildCargo == null
					|| otherBo.isDifferentAsset(childCareCargo,
							beforeChildCargo)) {
				otherBo.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
				beforeChildCargo = new CP_ABCHS_Cargo();
				beforeChildCargo.setIndv_seq_num(indvSeqNum);
				beforeChildCargo.setSeq_num(seqNum);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1,3 lines Commented Code
				 * in this block
				 */

				beforeColl.put("CP_ABCHS_Cargo", beforeChildCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			otherBo.deleteChildCareRecords(indvSeqNum, seqNum, appNum);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), "OBP", childCareType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, "OBP", Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), childCareType, (short) 2, 'N');

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_CARE_RESP)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TRLE", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map childCareTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				childCareTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean childDetlPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, childCareTypeMap, AppConstants.CHILD_CARE_BILL);

			if (!childDetlPageReg && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCCC", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildCareChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseChildCareChanges");
			we.setFwException(fe);
			throw we;
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseChildCareChanges", e);
			throw fe;
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildCareChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * End child care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endChildCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.endChildCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endChildCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_ABCHS_Collection childColl = (CP_ABCHS_Collection) pageCollection
					.get("CP_ABCHS_Collection");
			final CP_ABCHS_Cargo childCareCargo = childColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(childCareCargo.getIndv_seq_num());
			seqBean.setSeqNum(childCareCargo.getSeq_num());
			seqBean.setType("CCB");
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC pages
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCCC",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endChildCareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endChildCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildCareChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endChildCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildCareChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endChildCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the child care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addChildCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.addChildCareDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String childIndvSeq = request.get("firstName_childcare") != null ? (String) request
					.get("firstName_childcare") : FwConstants.EMPTY_STRING;
					/*
					 * VG SONAR Cleanup - 09/1/2015 Deleted 1 looooong lines Commented
					 * Code in this block
					 */

					final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();
					// validate selections
					if (childIndvSeq == null
							|| childIndvSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						otherBo.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);

					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(childIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType("CCB");
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARCCC", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addChildCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addChildCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addChildCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addChildCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addChildCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/* Child Care Summary Page Method ---------------------------- Ends */

	/* --- Child Obligation Summary -------------------------------Starts */

	/**
	 * Edits the child obligation details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editChildObligationDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editChildObligationDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editChildObligationDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final Cp_App_In_Deduction_Collection appInObligColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo appInObligCargo = appInObligColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInObligCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInObligCargo.getSeq_num());
			if(("null").equals(appInObligCargo.getExp_typ()) || null == appInObligCargo.getExp_typ())
				seqBean.setType("CT");
			else
				seqBean.setType(appInObligCargo.getExp_typ());

			// setting user end indicator

			if ("RE".equals(appInObligCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 3 lines Commented Code in
			 * this block
			 */

			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCSC",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editChildObligationDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editChildObligationDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editChildObligationDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editChildObligationDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editChildObligationDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editChildObligationDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase child obligation details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseChildObligationDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildObligationDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildObligationDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String childObligType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			final Cp_App_In_Deduction_Collection obligColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo childObligCargo = obligColl
					.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = childObligCargo.getIndv_seq_num();
			seqNum = childObligCargo.getSeq_num();
			childObligType = childObligCargo.getExp_typ();

			Cp_App_In_Deduction_Cargo beforeDeductionCargo = (Cp_App_In_Deduction_Cargo) beforeColl
					.get("Cp_App_In_Deduction_Cargo");

			final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

			if (beforeDeductionCargo == null
					|| otherBo.isDifferentOblig(childObligCargo,
							beforeDeductionCargo)) {

				otherBo.validateErase();
				request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
				beforeDeductionCargo = new Cp_App_In_Deduction_Cargo();
				beforeDeductionCargo.setIndv_seq_num(indvSeqNum);
				beforeDeductionCargo.setSeq_num(seqNum);
				beforeDeductionCargo.setExp_typ(childObligType);
				beforeColl.put("Cp_App_In_Deduction_Cargo",
						beforeDeductionCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			otherBo.deleteChildObligRecords(indvSeqNum, seqNum, appNum);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_OTHER_BILL_PRFL , AppConstants.CHILD_CARE_OBLIGATION);
			// delete record from rmc selection profile
						final SortedSet rmcSelPrfl = (SortedSet) session
								.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final short[] responseArray = new short[] { IRMCResponseProfileManager.CHILD_OBLIGATION_RESP };

			if (beforeColl != null) {
				int count = 0;
				Cp_App_In_Deduction_Collection oblig1Col = null;
				Cp_App_In_Deduction_Cargo oblig1Cargo = null;
				oblig1Col = (Cp_App_In_Deduction_Collection) beforeColl
						.get("Cp_App_In_Deduction_Collection");

				if (oblig1Col != null && !oblig1Col.isEmpty()) {
					final int utilityCollSize = oblig1Col.size();
					for (int i = 0; i < utilityCollSize; i++) {
						oblig1Cargo = oblig1Col.getCargo(i);
						if (oblig1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& oblig1Cargo.getExp_typ().equals(
										childObligType)
										&& oblig1Cargo.getSrc_app_ind().equals(
												AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);

				}
			}

			boolean rmcPrflCldObligNotReq = false;
			// here we need to check we have no entrys in rmcPrfl for the Life
			// Insurance detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_OBLIGATION_RESP)) {
					rmcPrflCldObligNotReq = true;
				}
			} else {

				rmcPrflCldObligNotReq = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TYAN", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map childObligMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				childObligMap.put(codeValues[i], codeValues[i]);
			}

			if (categorySelectionProfileManager.isEmpty(rmcSelPrfl,
					childObligMap) && rmcPrflCldObligNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCSC", driverArray, appNum);
			}
			if (!checkAssetDetailsPageRequired(rmcSelPrfl, childObligMap,
					AppConstants.RMC_CAT_OTHER_BILL_PRFL)
					&& rmcPrflCldObligNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCSC", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildObligationDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildObligationDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseChildObligationDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildObligationDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildObligationDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase child obligation changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseChildObligationChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildObligationChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildObligationChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String childObligType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			final Cp_App_In_Deduction_Collection obligColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo childObligCargo = obligColl
					.getCargo(0);

			// Get the results from the APP_IN_LQD_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = childObligCargo.getIndv_seq_num();
			seqNum = childObligCargo.getSeq_num();
			childObligType = childObligCargo.getExp_typ();
			Cp_App_In_Deduction_Cargo beforeObligCargo = (Cp_App_In_Deduction_Cargo) beforeColl
					.get("Cp_App_In_Deduction_Cargo");

			final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

			if (beforeObligCargo == null
					|| otherBo.isDifferentOblig(childObligCargo,
							beforeObligCargo)) {
				otherBo.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
				beforeObligCargo = new Cp_App_In_Deduction_Cargo();
				beforeObligCargo.setIndv_seq_num(indvSeqNum);
				beforeObligCargo.setSeq_num(seqNum);
				beforeObligCargo.setExp_typ(childObligType);
				beforeColl.put("Cp_App_In_Deduction_Cargo", beforeObligCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			otherBo.deleteChildObligRecords(indvSeqNum, seqNum, appNum);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), "OBP", childObligType);

			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, "OBP", Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum),
					AppConstants.CHILD_CARE_OBLIGATION, (short) 2, 'N');

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_OBLIGATION_RESP)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TYAN", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map liquidAssetAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				liquidAssetAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean lqdDetlPageReq = checkAssetDetailsPageRequired(
					rmcSelPrfl, liquidAssetAssetTypeMap,
					AppConstants.CHILD_CARE_OBLIGATION);

			if (!lqdDetlPageReq && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARCSC", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseChildObligationChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseChildObligationChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildObligationChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			};
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseChildObligationChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseChildObligationChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseChildObligationChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Check change selection page required.
	 *
	 * @param rmcSelPrfl the rmc sel prfl
	 * @param rmcInPrflColl the rmc in prfl coll
	 * @param rmbRqstColl the rmb rqst coll
	 * @return true, if successful
	 */
	public boolean checkChangeSelectionPageRequired(final SortedSet rmcSelPrfl,
			final RMC_IN_PRFL_Collection rmcInPrflColl,
			final RMB_RQST_Collection rmbRqstColl) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.checkChangeSelectionPageRequired() - START");
		try {

			final RMB_RQST_Cargo rmbRqstCargo = rmbRqstColl.getCargo(0);
			if (rmbRqstCargo.getChild_care_stat_ind().equalsIgnoreCase(
					AppConstants.YES)
					|| rmbRqstCargo.getChild_obligation_stat_ind()
					.equalsIgnoreCase(AppConstants.YES)
					|| rmbRqstCargo.getMed_bill_stat_ind().equalsIgnoreCase(
							AppConstants.YES)) {
				return true;
			}

			final boolean isChgSelPageReq = false;

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.checkChangeSelectionPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isChgSelPageReq;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkChangeSelectionPageRequired");
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkChangeSelectionPageNotRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "checkChangeSelectionPageRequired");
		}
	}

	/**
	 * End child obligation details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endChildObligationDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endChildObligationDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endChildObligationDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final Cp_App_In_Deduction_Collection obligColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo obligCargo = obligColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(obligCargo.getIndv_seq_num());
			seqBean.setSeqNum(obligCargo.getSeq_num());
			if(("null").equals(obligCargo.getExp_typ()) || null == obligCargo.getExp_typ())
				seqBean.setType("CT");
			else
				seqBean.setType(obligCargo.getExp_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMB Asset Details page - make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARCSC",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endChildObligationDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endChildObligationDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endChildObligationDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endChildObligationDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endChildObligationDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the child obligation details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addChildObligationDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addChildObligationDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String obligIndvSeq = request.get("firstName_dependentcare") != null ? (String) request
					.get("firstName_dependentcare") : FwConstants.EMPTY_STRING;
					/*
					 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
					 * this block
					 */

					final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();
					// validate selections
					if (obligIndvSeq == null
							|| obligIndvSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						otherBo.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);

					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(obligIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType("CT");
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARCSC", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addChildObligationDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addChildObligationDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addChildObligationDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addChildObligationDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addChildObligationDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/*---- Child Obligation Summary ----------------------------------Ends*/

	/**
	 * Edits the medical bille details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	/*---- Medical Bill Summary -----------------Start*/
	public void editMedicalBilleDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editMedicalBilleDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editMedicalBilleDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			final CP_APP_IN_MED_BILLS_Collection appInmedColl = (CP_APP_IN_MED_BILLS_Collection) pageCollection
					.get("CP_APP_IN_MED_BILLS_Collection");
			final CP_APP_IN_MED_BILLS_Cargo appInmedCargo = appInmedColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInmedCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInmedCargo.getSeq_num());
			seqBean.setType(appInmedCargo.getMed_bill_type());

			// setting user end indicator

			if ("RE".equals(appInmedCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editMedicalBilleDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editMedicalBilleDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editMedicalBilleDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editMedicalBilleDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editMedicalBilleDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editMedicalBilleDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase medical bill details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicalBillDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String medbillType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_L_INS_ASET_Collection from pageCollection.
			final CP_APP_IN_MED_BILLS_Collection medbillColl = (CP_APP_IN_MED_BILLS_Collection) pageCollection
					.get("CP_APP_IN_MED_BILLS_Collection");
			if (medbillColl != null && !medbillColl.isEmpty()) {
				final CP_APP_IN_MED_BILLS_Cargo medBillCargo = medbillColl
						.getCargo(0);

				// Get the results from the APP_IN_EMPL_Collection
				final String appNum = (String) session
						.get(AppConstants.APP_NUMBER);

				
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);

				indvSeqNum = medBillCargo.getIndv_seq_num();
				seqNum = medBillCargo.getSeq_num();
				medbillType = medBillCargo.getMed_bill_type();
				srcAppInd = medBillCargo.getSrc_app_ind();

				CP_APP_IN_MED_BILLS_Cargo beforeMedBillCargo = (CP_APP_IN_MED_BILLS_Cargo) beforeColl
						.get("CP_APP_IN_MED_BILLS_Cargo");

				final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

				if (beforeMedBillCargo == null
						|| otherBo.isDifferentMedbill(medBillCargo,
								beforeMedBillCargo)) {

					otherBo.validateErase();
					request.put(FwConstants.MESSAGE_LIST,
							otherBo.getMessageList());
					beforeMedBillCargo = new CP_APP_IN_MED_BILLS_Cargo();
					beforeMedBillCargo.setIndv_seq_num(indvSeqNum);
					beforeMedBillCargo.setSeq_num(seqNum);
					beforeMedBillCargo.setMed_bill_type(medbillType);
					beforeColl.put("CP_APP_IN_MED_BILLS_Cargo",
							beforeMedBillCargo);
					txnBean.setPageCollection(beforeColl);
					return;

				}

				otherBo.deleteMedBillRecords(indvSeqNum, seqNum, appNum,
						medbillType, srcAppInd);
				final SortedSet categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNum,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
				categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
						appNum, Short.parseShort(indvSeqNum),
						Long.parseLong(seqNum),AppConstants.RMC_CAT_OTHER_BILL_PRFL , medbillType);
				// delete record from rmc selection profile
				final SortedSet rmcSelPrfl = (SortedSet) session
						.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1,1 lines Commented Code
				 * in this block
				 */

				final short[] responseArray = new short[] { rmcResponseProfileManager
						.getResponseByType(
								IRMCResponseProfileManager.OTHER_BILLS_MEDI_DETAILS,
								medbillType) };

				if (beforeColl != null) {
					int count = 0;
					CP_APP_IN_MED_BILLS_Collection med1Col = null;
					CP_APP_IN_MED_BILLS_Cargo med1Cargo = null;
					med1Col = (CP_APP_IN_MED_BILLS_Collection) beforeColl
							.get("CP_APP_IN_MED_BILLS_Collection");

					if (med1Col != null && !med1Col.isEmpty()) {
						final int utilityCollSize = med1Col.size();
						for (int i = 0; i < utilityCollSize; i++) {
							med1Cargo = med1Col.getCargo(i);
							if (med1Cargo.getIndv_seq_num().equals(indvSeqNum)
									&& med1Cargo.getMed_bill_type().equals(
											medbillType)
											&& med1Cargo.getSrc_app_ind().equals(
													AppConstants.RMC_NEW_RECORD_IND)) {
								count++;
							}
						}
					}
					int allCounnted = 0;
					if (count == 1) {
						// now we need to make that profile requirred
						final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflColl, indvSeqNum);
						final CP_APP_IN_MED_BILLS_Collection allMed = otherBo
								.loadMedicalbillDetails(appNum);
						CP_APP_IN_MED_BILLS_Cargo currentCargo = null;
						if (allMed != null) {
							for (int i = 0; i < allMed.size(); i++) {
								currentCargo = allMed.getCargo(i);
								if (currentCargo != null
										&& AppConstants.RMC_NEW_RECORD_IND
										.equals(currentCargo
												.getSrc_app_ind())) {
									if (medbillType.equals(currentCargo
											.getMed_bill_type())
											&& currentCargo.getIndv_seq_num()
											.equals(rmcResCargo
													.getIndv_seq_num())) {
										allCounnted++;
									}
								}
							}
						}
						if (allCounnted <= 0) {
							rmcResponseProfileManager.makeNotRequired(
									responseArray, rmcResCargo, true);
						}

					}
				}
				boolean removeDetailsAndType = false;
				for (int i = 0; i < rmcInPrflColl.size(); i++) {

					final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
							.getCargo(i);
					if (rmcInPrflBeforeCargo
							.getMedical_bills_resp()
							.equals(String
									.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
						removeDetailsAndType = true;
					} else {
						removeDetailsAndType = false;
					}
				}

				if (removeDetailsAndType) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARMBB", driverArray,
							appNum);
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARMBD", driverArray,
							appNum);
				}
				boolean rmcPrflMedNotReq = false;
				// here we need to check we have no entrys in rmcPrfl for the
				// Life
				// Insurance detail
				// as well as we need to check
				if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
					if (rmcResponseProfileManager.isAppResponseNotRequired(
							rmcInPrflColl,
							IRMCResponseProfileManager.MEDICAL_BILLS_RESP)) {
						rmcPrflMedNotReq = true;
					}
				} else {

					rmcPrflMedNotReq = true;
				}

				final IReferenceTableManager iref = ReferenceTableManager
						.getInstance();
				final IReferenceTableData refData = iref.getReferenceTableData(
						"MDTY", (String) ((Map) session
								.get(FwConstants.HTTP_SESSION))
								.get(AppConstants.LANGUAGE));
				final String[] codeValues = refData.getCodeValues();
				final Map lmedBillTypeMap = new HashMap();
				for (int i = 0; i < codeValues.length; i++) {
					lmedBillTypeMap.put(codeValues[i], codeValues[i]);
				}

				if (categorySelectionProfileManager.isEmpty(rmcSelPrfl,
						lmedBillTypeMap) && rmcPrflMedNotReq) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARMBD", driverArray,
							appNum);
				}

				if (!checkAssetDetailsPageRequired(rmcSelPrfl, lmedBillTypeMap,
						AppConstants.MEDICAL_BILLS) && rmcPrflMedNotReq) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARMBD", driverArray,
							appNum);
				}

				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						rmcSelPrfl);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
						driverArray, appNum);

				log(ILog.INFO,
						"RMCHousingExpenseEJBBean::eraseMedicalBillDetails:End");
			} else {
				txnBean.setPageCollection(beforeColl);
				return;
			}
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseMedicalBillDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicalBillDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseMedicalBillDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicalBillDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase medical bills changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicalBillsChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillsChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillsChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String medBillType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_L_INS_ASET_Collection from pageCollection.
			final CP_APP_IN_MED_BILLS_Collection medColl = (CP_APP_IN_MED_BILLS_Collection) pageCollection
					.get("CP_APP_IN_MED_BILLS_Collection");
			final CP_APP_IN_MED_BILLS_Cargo medBillCargo = medColl.getCargo(0);

			// Get the results from the APP_IN_L_INS_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = medBillCargo.getIndv_seq_num();
			seqNum = medBillCargo.getSeq_num();
			medBillType = medBillCargo.getMed_bill_type();
			srcAppInd = medBillCargo.getSrc_app_ind();
			CP_APP_IN_MED_BILLS_Cargo beforeMedCargo = (CP_APP_IN_MED_BILLS_Cargo) beforeColl
					.get("CP_APP_IN_MED_BILLS_Cargo");

			final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();

			if (beforeMedCargo == null
					|| otherBo.isDifferentMedbill(medBillCargo, beforeMedCargo)) {
				otherBo.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
				beforeMedCargo = new CP_APP_IN_MED_BILLS_Cargo();
				beforeMedCargo.setIndv_seq_num(indvSeqNum);
				beforeMedCargo.setSeq_num(seqNum);
				beforeMedCargo.setMed_bill_type(medBillType);
				beforeColl.put("CP_APP_IN_MED_BILLS_Cargo", beforeMedCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			otherBo.deleteMedBillRecords(indvSeqNum, seqNum, appNum,
					medBillType, srcAppInd);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final String catAssetType = AppConstants.MEDICAL_BILLS;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, medBillType);
			// insert a new sequence in selection profile with No change
			if("RN".equalsIgnoreCase(srcAppInd)){
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.MEDICAL_BILLS,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					medBillType, (short) 2, 'N');
			}
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.MEDICAL_BILLS_RESP)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"MDTY", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map lifeInsPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				lifeInsPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean medBillPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, lifeInsPropertyTypeMap,
					AppConstants.MEDICAL_BILLS);

			if (!medBillPageReg && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBD", driverArray, appNum);
			}
			boolean removeDetailsAndType = false;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {

				final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
						.getCargo(i);
				if (rmcInPrflBeforeCargo
						.getMedical_bills_resp()
						.equals(String
								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
					removeDetailsAndType = true;
				} else {
					removeDetailsAndType = false;
				}
			}

			if (removeDetailsAndType) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBB", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBD", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillsChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLifeInsuranceChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicalBillsChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseMedicalBillsChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicalBillsChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillsChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * End medical bill details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endMedicalBillDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endMedicalBillDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endMedicalBillDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_APP_IN_MED_BILLS_Collection medColl = (CP_APP_IN_MED_BILLS_Collection) pageCollection
					.get("CP_APP_IN_MED_BILLS_Collection");
			final CP_APP_IN_MED_BILLS_Cargo medBillCargo = medColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(medBillCargo.getIndv_seq_num());
			seqBean.setSeqNum(medBillCargo.getSeq_num());
			seqBean.setType(medBillCargo.getMed_bill_type());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC pages make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endMedicalBillDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endMedicalBillDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endMedicalBillDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endMedicalBillDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endMedicalBillDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the medical bills details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addMedicalBillsDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String assetMedBillSeq = request
					.get("firstName_medicalbills") != null ? (String) request
							.get("firstName_medicalbills") : FwConstants.EMPTY_STRING;
							final String assetMedBillType = request.get("type_medicalbills") != null ? (String) request
									.get("type_medicalbills") : FwConstants.EMPTY_STRING;

									final ABOtherExpensesSummaryBO otherBo = new ABOtherExpensesSummaryBO();
									// validate selections

									if (assetMedBillSeq == null
											|| assetMedBillSeq
											.equals(AppConstants.SELECT_DEFAULT_OPTION)
											|| assetMedBillType
											.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
										otherBo.validateAdd();
										// add validation message and return
										request.put(FwConstants.MESSAGE_LIST, otherBo.getMessageList());
										txnBean.setPageCollection((Map) session
												.get(FwConstants.BEFORE_COLLECTION));
										return;
									}
									final String appNum = (String) session.get(AppConstants.APP_NUMBER);
									final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
									indivSeqBean.setIndivSeqNum(assetMedBillSeq);
									indivSeqBean.setSeqNum(FwConstants.ZERO);
									indivSeqBean.setType(assetMedBillType);
									indivSeqBean.setUserEndInd(FwConstants.ZERO);
									pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

									// set driver status
									final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
									driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARMBD", driver,
											appNum);
									driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARMBB", driver,
											appNum);
									driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBBS", driver,
											appNum);

									session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addMedicalBillsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addMedicalBillsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addMedicalBillsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/*------ Medical Bill Summary ---------------End*/

	/**
	 * Load medical bills details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */

	public void loadMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadMedicalBillsDetails() - START");
		try {
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadMedicalBillsDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String srcAppInd = FwConstants.EMPTY_STRING;

			// you'll get the value for Seq
			CP_APP_IN_MED_BILLS_Collection rmcMedExpColl;
			request.put("loopingQuestion", FwConstants.NO);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"MDTY", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map catType = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				catType.put(codeValues[i], codeValues[i]);
			}

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catType)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, catType)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final ARMedicalBillDetailsBO medicalDtsBO = new ARMedicalBillDetailsBO();
			final short[] responseType = new short[] {
					IRMCResponseProfileManager.MEDICAL_BILLS_RESP,
					IRMCResponseProfileManager.MEDTYP_HSA_CONTRIB,
					IRMCResponseProfileManager.MEDTYP_ATTENDANT_CARE,
					IRMCResponseProfileManager.MEDTYP_DENTAL,
					IRMCResponseProfileManager.MEDTYP_DOCTOR,
					IRMCResponseProfileManager.MEDTYP_MED_EQUIP,
					IRMCResponseProfileManager.MEDTYP_HOSP_BILLS,
					IRMCResponseProfileManager.MEDTYP_INSUR_PREMIUM,
					IRMCResponseProfileManager.MEDTYP_RX_COST,
					IRMCResponseProfileManager.MEDTYP_TRANS_MED,
					IRMCResponseProfileManager.MEDTYP_OTHER,
					IRMCResponseProfileManager.MEDICARE_PART_A,
					IRMCResponseProfileManager.MEDICARE_PART_B,
					IRMCResponseProfileManager.MEDICARE_PART_C,
					IRMCResponseProfileManager.MEDICARE_PART_D,
					IRMCResponseProfileManager.CCSP_PROVIDER_PAYMENT,
					IRMCResponseProfileManager.ANIMALS_TO_ASSIST_DISABLED,
					IRMCResponseProfileManager.FUNERAL_DEATH_EXPENSE,
					IRMCResponseProfileManager.BLIND_WORK_EXPENSE,
					IRMCResponseProfileManager.IMPAIRMENT_WORK_EXPENSE

			};

			SortedSet medExpProfile = null;
			if (!pageId.equals(previousPageId)) {
				medExpProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final CP_APP_IN_MED_BILLS_Collection newMedExpColl = medicalDtsBO
							.loadMedicalBillsDetailss(appNumber);
					final CP_APP_IN_MED_BILLS_Collection updatedColl = medicalDtsBO
							.splitMedBillsColls(newMedExpColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (updatedColl != null && !updatedColl.isEmpty()) {
						CP_APP_IN_MED_BILLS_Cargo rmcMedExpCargo = null;
						final int newUtilityCollSize = updatedColl.size();
						for (int i = 0; i < newUtilityCollSize; i++) {
							rmcMedExpCargo = updatedColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									medExpProfile, null, null,
									Short.parseShort(rmcMedExpCargo
											.getIndv_seq_num()), Short
											.parseShort(rmcMedExpCargo
													.getSeq_num()),
													rmcMedExpCargo.getMed_bill_type());
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(medExpProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(medExpProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				final Map beforeColl = (Map) session
						.get(FwConstants.BEFORE_COLLECTION);
				medExpProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Medical_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								medExpProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(medExpProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							medExpProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						final short[] responseArray = new short[] {
//								IRMCResponseProfileManager.MEDICAL_BILLS_RESP
//								,
								rmcResponseProfileManager
								.getResponseByType(
										IRMCResponseProfileManager.OTHER_BILLS_MEDI_DETAILS,
										indivSeqBean.getType())
										};
						rmcResponseProfileManager.makeAddNew(responseArray,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(medExpProfile, appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(medExpProfile, null,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(medExpProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Medical_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					medExpProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(medExpProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(medExpProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			rmcMedExpColl = medicalDtsBO.loadIndividualMedicalExpensesDetailss(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("CP_APP_IN_MED_BILLS_Collection", rmcMedExpColl);
			String pageMode = FwConstants.EMPTY_STRING;

			CP_APP_IN_MED_BILLS_Cargo cwwUtilityCargo = medicalDtsBO
					.splitMedExpColls(rmcMedExpColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwUtilityCargo == null) {
				cwwUtilityCargo = new CP_APP_IN_MED_BILLS_Cargo();
			}
			pageCollection.put("SEC_MEXP",
					medicalDtsBO.settingMedExpDefaultValuess(cwwUtilityCargo));
			CP_APP_IN_MED_BILLS_Cargo rmcUtilityCargo = medicalDtsBO
					.splitMedExpColls(rmcMedExpColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcUtilityCargo != null) {
				pageCollection.put("FST_MEXP", medicalDtsBO
						.settingMedExpDefaultValuess(rmcUtilityCargo));
			} else {
				rmcUtilityCargo = medicalDtsBO.splitMedExpColls(rmcMedExpColl,
						AppConstants.RMC_END_RECORD_IND);
				if (rmcUtilityCargo != null) {
					pageCollection.put("FST_MEXP", medicalDtsBO
							.settingMedExpDefaultValuess(rmcUtilityCargo));
				} else {
					rmcUtilityCargo = medicalDtsBO
							.splitMedExpColls(rmcMedExpColl,
									AppConstants.RMC_MODIFIED_RECORD_IND);
					if (rmcUtilityCargo != null) {
						pageCollection.put("FST_MEXP", medicalDtsBO
								.settingMedExpDefaultValuess(rmcUtilityCargo));
					} else {
						pageCollection.put("FST_MEXP", medicalDtsBO
								.settingMedExpDefaultValuess(cwwUtilityCargo));

					}

				}
			}
			pageCollection.get("FST_MEXP");

			if (rmcMedExpColl != null && !rmcMedExpColl.isEmpty()) {
				final CP_APP_IN_MED_BILLS_Cargo appInMedexpCargo = rmcMedExpColl
						.getCargo(0);
				srcAppInd = appInMedexpCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("MEXP_TYPE", categoryType);

			// set first name to and Custome collection into page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			txnBean.setPageCollection(pageCollection);

			// run component manager
			componentManager.getComponents("ARMBD", txnBean);
			request.remove("loopingQuestion");
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadMedicalBillsDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadMedicalBillsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadMedicalBillsDetails:End", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadMedicalBillsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store medical bills details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeMedicalBillsDetails() - START");
		try {

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeMedicalBillsDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			session.remove("Medical_IndSeqBean");

			final ARMedicalBillDetailsBO medicalDtsBO = new ARMedicalBillDetailsBO();
			final ARMBDValidator armbdValidator = new ARMBDValidator();
			final IReferenceTableManager referenceTableManager = ReferenceTableManager
					.getInstance();
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final SortedSet medExpProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(medExpProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final String indvSeqNumToPass = String
					.valueOf(categorySeqDetailBean.getIndividualSequence());
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final String fNametoPass = peopleHandler
					.getFirstName(indvSeqNumToPass);
			final String type = categorySeqDetailBean.getCategoryType();
			final String descToPass = referenceTableManager.getColumnValue(
					"MDTY", 2834, type, language);

			// get Details Collection and Cargo
			final CP_APP_IN_MED_BILLS_Collection appInMedDtsColl = (CP_APP_IN_MED_BILLS_Collection) pageCollection
					.get("CP_APP_IN_MED_BILLS_Collection");
			CP_APP_IN_MED_BILLS_Cargo appInMedDtsCargo = appInMedDtsColl
					.getCargo(0);

			final CP_APP_IN_MED_BILLS_Collection beforeCollappInMedDtsColl = (CP_APP_IN_MED_BILLS_Collection) beforeColl
					.get("CP_APP_IN_MED_BILLS_Collection");
			CP_APP_IN_MED_BILLS_Cargo sessionappInMedDtsCargo = null;

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {
				armbdValidator.validateAttendantDetails(appInMedDtsCargo,
						pageMode, userEndInd, descToPass, fNametoPass);
			}
			if (checkBackToMyAccessSelected(request)
					|| armbdValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							armbdValidator.getMessageList());
				}
				// put the first Name into request to avoid null pointer in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				pageCollection.put("MEXP_TYPE", beforeColl.get("MEXP_TYPE"));
				pageCollection.put("CP_APP_IN_MED_BILLS_Collection",
						appInMedDtsColl);
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				if (beforeColl.containsKey("SEC_MEXP")) {
					pageCollection.put("SEC_MEXP", beforeColl.get("SEC_MEXP"));
				}
				pageCollection.put("FST_MEXP", appInMedDtsCargo);

				return;
			}

			appInMedDtsCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));
			appInMedDtsCargo.setIndv_seq_num(String
					.valueOf(categorySeqDetailBean.getIndividualSequence()));
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			String sourceAppIndicator = null;
			String recordInd = null;
			// now we are checking for the before collection
			int seqNum = 0;
			boolean medicalExpDetailsUpdate = false;

			if (beforeCollappInMedDtsColl != null
					&& !beforeCollappInMedDtsColl.isEmpty()) {

				final int size = beforeCollappInMedDtsColl.size();

				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {

					if ("C".equalsIgnoreCase(pageMode)) {
						sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
					} else {
						sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
					}
				}
				sessionappInMedDtsCargo = medicalDtsBO.splitMedExpColls(
						beforeCollappInMedDtsColl, sourceAppIndicator);
				if (sessionappInMedDtsCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					sessionappInMedDtsCargo = medicalDtsBO.splitMedExpColls(
							beforeCollappInMedDtsColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& sessionappInMedDtsCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (sessionappInMedDtsCargo != null) {

					appInMedDtsCargo.setSrc_app_ind(sessionappInMedDtsCargo
							.getSrc_app_ind());
					appInMedDtsCargo.setIndv_seq_num(sessionappInMedDtsCargo
							.getIndv_seq_num());
					appInMedDtsCargo.setMed_bill_type(sessionappInMedDtsCargo
							.getMed_bill_type());
					appInMedDtsCargo.setSeq_num(sessionappInMedDtsCargo
							.getSeq_num());
					appInMedDtsCargo.setAdapt_record_id(sessionappInMedDtsCargo
                            .getAdapt_record_id());
				}

				// check dirty

				appInMedDtsCargo = (CP_APP_IN_MED_BILLS_Cargo) isChanged(
						sessionappInMedDtsCargo, appInMedDtsCargo);

				appInMedDtsCargo.setApp_num(appNumber);
				appInMedDtsCargo.setIndv_seq_num(indvSeqNum);
				appInMedDtsCargo.setSeq_num(String
						.valueOf(categorySeqDetailBean.getCategorySequence()));
				appInMedDtsCargo.setSrc_app_ind(sourceAppIndicator);
				appInMedDtsCargo.setRowAction(recordInd);

				if (appInMedDtsCargo.isDirty()) {
					medicalExpDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appInMedDtsCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = medicalDtsBO.getMaxSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				appInMedDtsCargo.setSeq_num(String.valueOf(seqNum));
				appInMedDtsCargo.setMed_bill_type(categorySeqDetailBean
						.getCategoryType());
				appInMedDtsCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appInMedDtsCargo.setRowAction(recordInd);
				medicalExpDetailsUpdate = true;
				categorySelectionProfileManager
				.updateSequence(medExpProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
			}

			if (medicalExpDetailsUpdate) {
				if (appInMedDtsCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					medicalDtsBO.insertExistingDetailss(appInMedDtsColl);
				} else {
					medicalDtsBO.storeMedicalBillsDetails(appInMedDtsColl);
				}
			}

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_L_INS_ASET
				categorySelectionProfileManager.insertSequenceDetail(
						medExpProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
						driverArray, appNumber);
			}
			boolean reqInd=false;
			if (!loopingQuestion) {
				short respTyp= rmcResponseProfileManager
				.getResponseByType(
						IRMCResponseProfileManager.OTHER_BILLS_MEDI_DETAILS,
						categorySeqDetailBean
						.getCategoryType());
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null  && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					reqInd=true;
					rmcResponseProfileManager
					.makeComplete(
							respTyp,
									rmcInPrflCargo, true);
					rmcResponseProfileManager
					.makeComplete(
							IRMCResponseProfileManager.OTHER_BILLS_MEDI_DETAILS,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					medExpProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						medExpProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfileManager
					.areAllSequencesComplete(medExpProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(medExpProfile);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeMedicalBillsDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeMedicalBillsDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeMedicalBillsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeMedicalBillsDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load roomand board details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadRoomandBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadRoomandBoardDetails() - START");
		try {
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadRoomandBoardDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;
			// you'll get the value for Seq
			APP_IN_RM_BRD_EXP_Collection rmcRBColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, getRoomAndBoardTypes())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL);
			}

			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final RoomAndBoardExpensesBO roomAndBoardDetailsBo = new RoomAndBoardExpensesBO();
			final short[] responseType = new short[] { IRMCResponseProfileManager.PAY_ROOM_AND_BOARD };
			SortedSet roomAndBoardProfile = null;
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			if (!pageId.equals(previousPageId)) {
				roomAndBoardProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl, responseType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_RM_BRD_EXP_Collection newRMColl = roomAndBoardDetailsBo
							.loadRoomAndBoardDetails(appNumber);
					if (newRMColl != null && !newRMColl.isEmpty()) {
						APP_IN_RM_BRD_EXP_Cargo rmcRoomCargo = null;
						final int newHouseCollSize = newRMColl.size();
						for (int i = 0; i < newHouseCollSize; i++) {
							rmcRoomCargo = newRMColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									roomAndBoardProfile, null, null,
									Short.parseShort(rmcRoomCargo
											.getPayr_indv_seq_num()),
											Short.parseShort(rmcRoomCargo
													.getSeq_num()),
													AppConstants.ROOM_AND_BOARD);
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(roomAndBoardProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(roomAndBoardProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				roomAndBoardProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("RoomBoard_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								roomAndBoardProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(roomAndBoardProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}

					categorySelectionProfileManager.makeSequenceDetailRequired(
							roomAndBoardProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						rmcResponseProfileManager.makeAddNew(
								IRMCResponseProfileManager.ROOM_AND_BOARD,
								rmcInPrflCargo, true);
						// Not needed for Room and Board
						categorySelectionProfileManager
						.insertSequenceDetail(roomAndBoardProfile,
								null, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(roomAndBoardProfile,
								null, AppConstants.RMC_CAT_HO_EXP_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								roomAndBoardProfile, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}

				session.put("RoomBoard_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					roomAndBoardProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(roomAndBoardProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(roomAndBoardProfile);
			}

			categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			pageCollection.put("END_PAGE_IND",
					String.valueOf(categorySeqDetail.getUserEndSelectionInd()));
			rmcRBColl = roomAndBoardDetailsBo.loadRoomAndBoardBillDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("ROOM_AND_BOARD_Collection", rmcRBColl);

			final RoomAndBoardExpensesBO roomBoardBo = new RoomAndBoardExpensesBO();
			APP_IN_RM_BRD_EXP_Cargo cwwRBCargo = roomBoardBo.splitRBColl(
					rmcRBColl, AppConstants.CWW_RECORD_IND);
			if (cwwRBCargo == null) {
				cwwRBCargo = new APP_IN_RM_BRD_EXP_Cargo();
			}
			pageCollection.put("SEC_ROOM_BOARD", roomAndBoardDetailsBo
					.settingRoomAndBoardDefaultValues(cwwRBCargo));
			APP_IN_RM_BRD_EXP_Cargo rmcRBCargo = roomBoardBo.splitRBColl(
					rmcRBColl, AppConstants.RMC_NEW_RECORD_IND);
			if (rmcRBCargo != null) {
				pageCollection.put("FST_ROOM_BOARD", roomAndBoardDetailsBo
						.settingRoomAndBoardDefaultValues(rmcRBCargo));
			} else {
				rmcRBCargo = roomBoardBo.splitRBColl(rmcRBColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcRBCargo != null) {
					pageCollection.put("FST_ROOM_BOARD", roomAndBoardDetailsBo
							.settingRoomAndBoardDefaultValues(rmcRBCargo));
				} else {
					rmcRBCargo = roomBoardBo.splitRBColl(rmcRBColl,
							AppConstants.RMC_END_RECORD_IND);
					if (rmcRBCargo != null) {
						pageCollection.put("FST_ROOM_BOARD", roomBoardBo
								.settingRoomAndBoardDefaultValues(rmcRBCargo));
					} else {
						pageCollection
						.put("FST_ROOM_BOARD",
								roomAndBoardDetailsBo
								.settingRoomAndBoardDefaultValues(cwwRBCargo));

					}
				}
			}
			if (rmcRBColl != null && !rmcRBColl.isEmpty()) {
				final APP_IN_RM_BRD_EXP_Cargo appInSelfeCargo = rmcRBColl
						.getCargo(0);
				srcAppInd = appInSelfeCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}

			pageCollection.put("PAGE_MODE", pageMode);
			final Map responseMap = new HashMap();
			Map responseMap1 = null;
			final Map resCWMap = new HashMap();
			final Map cwwMap = new HashMap();
			final Map resNewMap = new HashMap();

			// For CWW
			if ("C".equals(pageMode) && cwwRBCargo != null) {
				cwwMap.put(cwwRBCargo.getP_to_indv_seq_num(), "R");
			}

			if (rmcRBCargo != null) {
				responseMap.put(rmcRBCargo.getP_to_indv_seq_num(), "R");
			} else {
				responseMap.put(cwwRBCargo.getP_to_indv_seq_num(), "R");
			}

			final APP_IN_ROOM_BRD_Collection roomCWBoardColl = roomAndBoardDetailsBo
					.loadRoomAndBoardDetails(appNumber, indvSeqNum,
							categorySeqNum, AppConstants.CWW_RECORD_IND);
			final APP_IN_ROOM_BRD_Collection roomModBoardColl = roomAndBoardDetailsBo
					.loadRoomAndBoardDetails(appNumber, indvSeqNum,
							categorySeqNum,
							AppConstants.RMC_MODIFIED_RECORD_IND);
			final APP_IN_ROOM_BRD_Collection roomNewBoardColl = roomAndBoardDetailsBo
					.loadRoomAndBoardDetails(appNumber, indvSeqNum,
							categorySeqNum, AppConstants.RMC_NEW_RECORD_IND);
			// for CWW record
			if (roomCWBoardColl != null) {
				for (int j = 0; j < roomCWBoardColl.size(); j++) {
					final APP_IN_ROOM_BRD_Cargo brdCargo = roomCWBoardColl
							.getCargo(j);
					resCWMap.put(brdCargo.getP_for_indv_seq_num(), "R");
				}
			}
			// For Rm Record
			responseMap1 = new HashMap();
			if (roomModBoardColl != null) {
				for (int j = 0; j < roomModBoardColl.size(); j++) {

					final APP_IN_ROOM_BRD_Cargo brdCargo = roomModBoardColl
							.getCargo(j);
					responseMap1.put(brdCargo.getP_for_indv_seq_num(), "R");
				}
			}
			// For New Record
			if (roomNewBoardColl != null) {
				for (int j = 0; j < roomNewBoardColl.size(); j++) {
					final APP_IN_ROOM_BRD_Cargo brdCargo = roomNewBoardColl
							.getCargo(j);
					resNewMap.put(brdCargo.getP_for_indv_seq_num(), "R");
				}
			}

			// set first name to page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			final INDIVIDUAL_Custom_Collection indvCustCollection = peopleHandler
					.getAllIndividuals();
			final INDIVIDUAL_Custom_Cargo[] indvArray = indvCustCollection
					.getResults();
			Arrays.sort(indvArray, new Comparator() {
				@Override
				public int compare(final Object o1, final Object o2) {
					final INDIVIDUAL_Custom_Cargo c1 = (INDIVIDUAL_Custom_Cargo) o1;
					final INDIVIDUAL_Custom_Cargo c2 = (INDIVIDUAL_Custom_Cargo) o2;
					final Double score1 = new Double(c1.getIndv_seq_num());
					final Double score2 = new Double(c2.getIndv_seq_num());
					return score1.compareTo(score2);
				}
			});
			indvCustCollection.setResults(indvArray);
			pageCollection.put(AppConstants.INDIVIDUAL_CUSTOM_COLL,
					indvCustCollection);
			final INDIVIDUAL_Custom_Collection indvColl = new INDIVIDUAL_Custom_Collection();
			final int collSize = indvCustCollection != null ? indvCustCollection
					.size() : 0;
					for (int i = 0; i < collSize; i++) {
						final INDIVIDUAL_Custom_Cargo cargo = indvCustCollection
								.getResult(i);

						indvColl.addCargo(cargo);
					}

					pageCollection.put("INDV_COLL", indvColl);

					pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);

					// run component manager
					componentManager.getComponents("ARRBE", txnBean);
					pageCollection.put("Response_MAP", responseMap);
					pageCollection.put("Response_MAP1", responseMap1);
					pageCollection.put("CWW_MAP", cwwMap);
					pageCollection.put("NEW_MAP", resNewMap);
					pageCollection.put("RESCW_MAP", resCWMap);

					request.remove("loopingQuestion");

					pageCollection.put("APP_IN_ROOM_BRD_Collection", roomCWBoardColl);

					// Add the page collection to before collection
					session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

					log(ILog.INFO, "HousingExpenseEJBBean::loadRoomandBoardDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadRoomandBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadRoomandBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadRoomandBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadRoomandBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadRoomandBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store room and board details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeRoomAndBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeRoomAndBoardDetails() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");
			session.remove("RoomBoard_IndSeqBean");
			final SortedSet roomAndBoardProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);

			final APP_IN_RM_BRD_EXP_Collection rmcRBCollection = (APP_IN_RM_BRD_EXP_Collection) pageCollection
					.get("APP_IN_RM_BRD_EXP_Collection");
			APP_IN_ROOM_BRD_Collection roomColl = (APP_IN_ROOM_BRD_Collection) pageCollection
					.get("APP_IN_ROOM_BRD_Collection");
			APP_IN_RM_BRD_EXP_Cargo rmcRBCargo = rmcRBCollection.getCargo(0);

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(roomAndBoardProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			final RoomAndBoardExpensesBO roomDetailsBO = new RoomAndBoardExpensesBO();
			final ARRBEValidator arxhdValidator = new ARRBEValidator();

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {
				arxhdValidator.validateRoomAndBoardPageContents(rmcRBCargo,
						userEndInd, pageMode);
			}

			if (checkBackToMyAccessSelected(request)
					|| arxhdValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arxhdValidator.getMessageList());
				}

				pageCollection
				.put("PEOPLE_5263", beforeColl.get("PEOPLE_5263"));
				pageCollection.put("APP_IN_RM_BRD_EXP_Collection",
						rmcRBCollection);
				pageCollection.put("APP_IN_ROOM_BRD_Collection", roomColl);
				pageCollection.put("ROOM_AND_BOARD_Collection", roomColl);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_ROOM_BOARD")) {
					pageCollection.put("SEC_ROOM_BOARD",
							beforeColl.get("SEC_ROOM_BOARD"));
				}
				pageCollection.put("FST_ROOM_BOARD", rmcRBCargo);

				final Map resMap2 = new HashMap();
				if (rmcRBCollection != null) {
					for (int j = 0; j < rmcRBCollection.size(); j++) {

						final APP_IN_RM_BRD_EXP_Cargo roomBrdCargo = rmcRBCollection
								.getCargo(j);
						resMap2.put(roomBrdCargo.getP_to_indv_seq_num(), "R");
					}
				}
				pageCollection.put("Response_MAP", resMap2);

				final Map resMap1 = new HashMap();
				if (roomColl != null) {
					for (int j = 0; j < roomColl.size(); j++) {

						final APP_IN_ROOM_BRD_Cargo brdCargo = roomColl
								.getCargo(j);
						resMap1.put(brdCargo.getP_for_indv_seq_num(), "R");
					}
				}
				pageCollection.put("Response_MAP1", resMap1);
				pageCollection.put("CWW_MAP", beforeColl.get("CWW_MAP"));
				pageCollection.put("NEW_MAP", resMap1);

				pageCollection.put("RESCW_MAP", beforeColl.get("RESCW_MAP"));
				pageCollection.put(AppConstants.INDIVIDUAL_CUSTOM_COLL,
						beforeColl.get(AppConstants.INDIVIDUAL_CUSTOM_COLL));

				pageCollection.put("INDV_COLL", beforeColl.get("INDV_COLL"));
				return;
			}

			final APP_IN_RM_BRD_EXP_Collection beforeCollRmcInHouseColl = (APP_IN_RM_BRD_EXP_Collection) beforeColl
					.get("ROOM_AND_BOARD_Collection");
			final APP_IN_ROOM_BRD_Collection beforeRoomColl = (APP_IN_ROOM_BRD_Collection) beforeColl
					.get("APP_IN_ROOM_BRD_Collection");
			APP_IN_RM_BRD_EXP_Cargo beforeRBCargo = null;

			rmcRBCargo.setApp_num(appNumber);
			if (rmcRBCargo.getChg_eff_dt() == null
					|| rmcRBCargo.getChg_eff_dt().trim().length() == 0) {
				rmcRBCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {
				rmcRBCargo.setChg_eff_dt(displayFormatter
						.getYYYYMMDDDate(rmcRBCargo.getChg_eff_dt()));
			}

			if (rmcRBCargo.getBrder_sw() == null) {
				rmcRBCargo.setBrder_sw(FwConstants.EMPTY_STRING);
			} else {
				rmcRBCargo.setBrder_sw(rmcRBCargo.getBrder_sw());
			}

			if (rmcRBCargo.getRoomer_sw() == null) {
				rmcRBCargo.setRoomer_sw(FwConstants.EMPTY_STRING);
			} else {
				rmcRBCargo.setRoomer_sw(rmcRBCargo.getRoomer_sw());
			}

			if (rmcRBCargo.getRoom_meal_dy_qty() == null
					|| rmcRBCargo.getRoom_meal_dy_qty() != null
					&& rmcRBCargo.getRoom_meal_dy_qty().trim().length() == 0) {
				rmcRBCargo.setRoom_meal_dy_qty(FwConstants.ZERO);
			} else {
				rmcRBCargo
				.setRoom_meal_dy_qty(rmcRBCargo.getRoom_meal_dy_qty());
			}

			if (rmcRBCargo.getBrd_exp_amt() == null
					|| rmcRBCargo.getBrd_exp_amt() != null
					&& rmcRBCargo.getBrd_exp_amt().trim().length() == 0) {
				rmcRBCargo.setBrd_exp_amt("0.00");
				if (rmcRBCargo.getBrd_exp_ind() != null
						&& rmcRBCargo.getBrd_exp_ind().equals(FwConstants.ONE)) {
					rmcRBCargo.setBrd_exp_ind(FwConstants.ONE);
				} else {
					rmcRBCargo.setBrd_exp_ind("2");
				}
			} else {
				rmcRBCargo.setBrd_exp_amt(rmcRBCargo.getBrd_exp_amt());
				rmcRBCargo.setBrd_exp_ind(FwConstants.ZERO);
			}

			if (rmcRBCargo.getRoom_exp_amt() == null
					|| rmcRBCargo.getRoom_exp_amt() != null
					&& rmcRBCargo.getRoom_exp_amt().trim().length() == 0) {
				rmcRBCargo.setRoom_exp_amt("0.00");
				if (rmcRBCargo.getRoom_exp_ind() != null
						&& rmcRBCargo.getRoom_exp_ind().equals(FwConstants.ONE)) {
					rmcRBCargo.setRoom_exp_ind(FwConstants.ONE);
				} else {
					rmcRBCargo.setRoom_exp_ind("2");
				}
			} else {
				rmcRBCargo.setRoom_exp_amt(rmcRBCargo.getRoom_exp_amt());
				rmcRBCargo.setRoom_exp_ind(FwConstants.ZERO);
			}
			if (rmcRBCargo.getP_to_indv_seq_num() == null
					|| rmcRBCargo.getP_to_indv_seq_num() != null
					&& rmcRBCargo.getP_to_indv_seq_num().trim().length() == 0) {
				rmcRBCargo.setP_to_indv_seq_num("99");
			} else {
				rmcRBCargo.setP_to_indv_seq_num(rmcRBCargo
						.getP_to_indv_seq_num());
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean rbDetailsUpdate = false;

			if (beforeCollRmcInHouseColl != null
					&& !beforeCollRmcInHouseColl.isEmpty()) {

				final int size = beforeCollRmcInHouseColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeRBCargo = roomDetailsBO.splitRBColl(
						beforeCollRmcInHouseColl, sourceAppIndicator);
				if (beforeRBCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeRBCargo = roomDetailsBO.splitRBColl(
							beforeCollRmcInHouseColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeRBCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				rmcRBCargo.setApp_num(beforeRBCargo.getApp_num());

				rmcRBCargo.setSrc_app_ind(beforeRBCargo.getSrc_app_ind());
				rmcRBCargo.setPayr_indv_seq_num(beforeRBCargo
						.getPayr_indv_seq_num());
				rmcRBCargo.setSeq_num(beforeRBCargo.getSeq_num());
				rmcRBCargo.setUser(beforeRBCargo.getUser());

				if ("E".equalsIgnoreCase(pageMode)) {
					rmcRBCargo.setRoom_exp_amt(beforeRBCargo.getRoom_exp_amt());
					rmcRBCargo.setBrd_exp_amt(beforeRBCargo.getBrd_exp_amt());
					rmcRBCargo.setRoom_meal_dy_qty(beforeRBCargo
							.getRoom_meal_dy_qty());
					rmcRBCargo.setP_to_indv_seq_num(beforeRBCargo
							.getP_to_indv_seq_num());
					rmcRBCargo.setRoomer_sw(beforeRBCargo.getRoomer_sw());
					rmcRBCargo.setBrder_sw(beforeRBCargo.getBrder_sw());

					final APP_IN_ROOM_BRD_Collection rmColl = roomDetailsBO
							.loadRoomAndBoardDetails(appNumber,
									rmcRBCargo.getPayr_indv_seq_num(),
									rmcRBCargo.getSeq_num(),
									rmcRBCargo.getSrc_app_ind());
					if (rmColl != null && !rmColl.isEmpty()) {
						for (int i = 0; i < rmColl.size(); i++) {
							roomColl = new APP_IN_ROOM_BRD_Collection();
							final APP_IN_ROOM_BRD_Cargo rmBrdCargo = rmColl
									.getCargo(i);
							rmBrdCargo.setSrc_app_ind("RE");
							roomColl.addCargo(rmBrdCargo);
						}
					}
					rbDetailsUpdate = true;
				}

				final String changeEffDate = rmcRBCargo.getChg_eff_dt();
				if (Date.valueOf(beforeRBCargo.getChg_eff_dt()) == Date
						.valueOf(AppConstants.HIGH_DATE)
						&& rmcRBCargo.getChg_eff_dt().trim().length() == 0) {
					rmcRBCargo.setChg_eff_dt(beforeRBCargo.getChg_eff_dt());
				}

				// check dirty
				rmcRBCargo = (APP_IN_RM_BRD_EXP_Cargo) isChanged(beforeRBCargo,
						rmcRBCargo);
				rmcRBCargo.setChg_eff_dt(changeEffDate);

				rmcRBCargo.setSrc_app_ind(sourceAppIndicator);
				rmcRBCargo.setRowAction(recordInd);
				if (rmcRBCargo.isDirty()) {
					if ("C".equalsIgnoreCase(pageMode)) {
						arxhdValidator.validateChangeEffectiveDate(
								changeEffDate, pageMode);
						if (arxhdValidator.hasMessages()) {
							request.put(FwConstants.MESSAGE_LIST,
									arxhdValidator.getMessageList());
							pageCollection.put("PEOPLE_5263",
									beforeColl.get("PEOPLE_5263"));
							pageCollection.put("APP_IN_RM_BRD_EXP_Collection",
									rmcRBCollection);
							pageCollection.put("APP_IN_ROOM_BRD_Collection",
									roomColl);
							pageCollection.put("ROOM_AND_BOARD_Collection",
									rmcRBCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));
							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));

							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_ROOM_BOARD")) {
								pageCollection.put("SEC_ROOM_BOARD",
										beforeColl.get("SEC_ROOM_BOARD"));
							}
							pageCollection.put("FST_ROOM_BOARD", rmcRBCargo);
							pageCollection.put("Response_MAP",
									beforeColl.get("Response_MAP"));
							pageCollection.put("Response_MAP1",
									beforeColl.get("Response_MAP1"));
							pageCollection.put("CWW_MAP",
									beforeColl.get("CWW_MAP"));
							pageCollection.put("NEW_MAP",
									beforeColl.get("NEW_MAP"));
							pageCollection.put("RESCW_MAP",
									beforeColl.get("RESCW_MAP"));
							pageCollection
							.put(AppConstants.INDIVIDUAL_CUSTOM_COLL,
									beforeColl
									.get(AppConstants.INDIVIDUAL_CUSTOM_COLL));
							pageCollection.put("INDV_COLL",
									beforeColl.get("INDV_COLL"));
							return;
						}
					}
					rbDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcRBCargo
				.setPayr_indv_seq_num(String
						.valueOf(categorySeqDetailBean
								.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = roomDetailsBO.getMaxRBSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcRBCargo.setSeq_num(String.valueOf(seqNum));
				rmcRBCargo.setSrc_app_ind(sourceAppIndicator);

				recordInd = FwConstants.ROWACTION_INSERT;
				rmcRBCargo.setRowAction(recordInd);
				rbDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(roomAndBoardProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
			}

			// now we need to check the flags
			if (rbDetailsUpdate) {

				// check for the change effective date
				// if they did't fill this one raise validation
				if (!sourceAppIndicator.equals(AppConstants.RMC_NEW_RECORD_IND)
						&& rmcRBCargo.getChg_eff_dt().equals(
								AppConstants.HIGH_DATE)) {
					arxhdValidator.validateChangeEffectiveDate(
							rmcRBCargo.getChg_eff_dt(),
							String.valueOf(AppConstants.READ_WRITE_PAGE));
					if (arxhdValidator.hasMessages()) {
						final String reqWarningMsgs = (String) request
								.get(FwConstants.WARNING_MSG_DETAILS);
						if (!checkForWarningMesgs(reqWarningMsgs,
								arxhdValidator.getMessageList())) {
							request.put(FwConstants.MESSAGE_LIST,
									arxhdValidator.getMessageList());
							pageCollection.put("APP_IN_RM_BRD_EXP_Collection",
									rmcRBCollection);
							pageCollection.put("APP_IN_ROOM_BRD_Collection",
									roomColl);
							pageCollection.put("ROOM_AND_BOARD_Collection",
									rmcRBCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));
							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));
							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_ROOM_BOARD")) {
								pageCollection.put("SEC_ROOM_BOARD",
										beforeColl.get("SEC_ROOM_BOARD"));
							}
							pageCollection.put("FST_ROOM_BOARD", rmcRBCargo);
							pageCollection.put("Response_MAP",
									beforeColl.get("Response_MAP"));
							pageCollection.put("Response_MAP1",
									beforeColl.get("Response_MAP1"));
							pageCollection.put("CWW_MAP",
									beforeColl.get("CWW_MAP"));
							pageCollection.put("NEW_MAP",
									beforeColl.get("NEW_MAP"));
							pageCollection.put("RESCW_MAP",
									beforeColl.get("RESCW_MAP"));
							pageCollection
							.put(AppConstants.INDIVIDUAL_CUSTOM_COLL,
									beforeColl
									.get(AppConstants.INDIVIDUAL_CUSTOM_COLL));
							pageCollection.put("INDV_COLL",
									beforeColl.get("INDV_COLL"));
							return;
						}
					}
				}
			}

			// For the APP_IN_ROOM_BRD collection
			APP_IN_ROOM_BRD_Cargo beforeRoomCargo = null;
			if (beforeRoomColl != null && !beforeRoomColl.isEmpty()) {
				beforeRoomCargo = beforeRoomColl.getCargo(0);
			}

			roomDetailsBO.loadRoomAndBoardDetails(appNumber,
					rmcRBCargo.getPayr_indv_seq_num(), rmcRBCargo.getSeq_num(),
					AppConstants.CWW_RECORD_IND);

			boolean foundFlag = true;

			final APP_IN_ROOM_BRD_Collection deleteRoomColl = new APP_IN_ROOM_BRD_Collection();
			if (!sourceAppIndicator.equals(AppConstants.RMC_NEW_RECORD_IND)) {
				if (roomColl != null) {
					for (int i = 0; i < roomColl.size(); i++) {
						final APP_IN_ROOM_BRD_Cargo cargo = roomColl
								.getCargo(i);
						if (cargo.getP_for_indv_seq_num().equals(
								beforeRoomCargo.getP_for_indv_seq_num())
								&& !roomColl.isEmpty()) {
							foundFlag = true;
							break;
						}

						if (!foundFlag) {
							// Adding RE record
							final APP_IN_ROOM_BRD_Cargo deleteCargo = new APP_IN_ROOM_BRD_Cargo();
							deleteCargo.setPayr_indv_seq_num(beforeRoomCargo
									.getPayr_indv_seq_num());
							deleteCargo
							.setSeq_num(beforeRoomCargo.getSeq_num());
							deleteCargo
							.setSrc_app_ind(AppConstants.RMC_END_RECORD_IND);
							deleteCargo.setUser(beforeRoomCargo.getUser());
							deleteCargo
							.setApp_num(beforeRoomCargo.getApp_num());
							deleteCargo
							.setRowAction(FwConstants.ROWACTION_INSERT);
							deleteCargo.setP_for_indv_seq_num(beforeRoomCargo
									.getP_for_indv_seq_num());
							deleteRoomColl.addCargo(deleteCargo);
							roomDetailsBO
							.deleteRoomAndBoardRecords(deleteRoomColl);
						}
					}

				}
			}
			if (roomColl != null) {
				for (int i = 0; i < roomColl.size(); i++) {
					final APP_IN_ROOM_BRD_Cargo cargo = roomColl.getCargo(i);
					cargo.setPayr_indv_seq_num(rmcRBCargo
							.getPayr_indv_seq_num());
					cargo.setSeq_num(rmcRBCargo.getSeq_num());
					cargo.setSrc_app_ind(rmcRBCargo.getSrc_app_ind());
					cargo.setUser(rmcRBCargo.getUser());
					cargo.setApp_num(rmcRBCargo.getApp_num());
					roomDetailsBO.deleteRoomRecords(
							cargo.getPayr_indv_seq_num(), cargo.getSeq_num(),
							cargo.getApp_num());
				}
			}
			APP_IN_ROOM_BRD_Cargo cargo = new APP_IN_ROOM_BRD_Cargo();
			if (roomColl != null) {
				for (int i = 0; i < roomColl.size(); i++) {
					cargo = roomColl.getCargo(i);
					cargo.setPayr_indv_seq_num(rmcRBCargo
							.getPayr_indv_seq_num());
					cargo.setSeq_num(rmcRBCargo.getSeq_num());
					cargo.setSrc_app_ind(rmcRBCargo.getSrc_app_ind());
					cargo.setUser(rmcRBCargo.getUser());
					cargo.setApp_num(rmcRBCargo.getApp_num());
					cargo.setP_for_indv_seq_num(cargo.getP_for_indv_seq_num());
					cargo.setRowAction(FwConstants.ROWACTION_INSERT);
				}
			}

			if (rbDetailsUpdate) {
				if (rmcRBCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					roomDetailsBO.insertExistingRBDetails(rmcRBCollection);
					roomDetailsBO.insertExistingRoomDetails(roomColl);
				} else {
					roomDetailsBO.storeRBDetails(rmcRBCollection);
					roomDetailsBO.storeRoomDetails(roomColl);
				}
			} else {
				if (rmcRBCollection != null
						&& roomColl != null
						&& cargo.getRowAction() != null
						&& cargo.getRowAction().equals(
								FwConstants.ROWACTION_INSERT)) {
					roomDetailsBO.insertExistingRoomDetails(roomColl);
				}
			}

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						roomAndBoardProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.PAY_ROOM_AND_BOARD,
							rmcInPrflCargo, true);

				}
			}
			// Mark complete sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					roomAndBoardProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(roomAndBoardProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(roomAndBoardProfile);
			}

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeRoomandBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeRoomAndBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeRoomandBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeRoomAndBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeRoomAndBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load impairment expenses details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadImpairmentExpensesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadImpairmentExpensesDetails() - START");
		try {
			log(ILog.INFO,
					"HousingExpenseEJBBean::loadImpairmentExpensesDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;
			// you'll get the value for Seq
			APP_IN_IRWE_Collection rmcImpExpColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile,
							getImpairmentRelatedWorkExpensesTypes())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.WORK_RELATED_EXPENSE);
			}

			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final ImpairmentRelatedWorkExpensesBO impRelExpBO = new ImpairmentRelatedWorkExpensesBO();
			final short[] responseType = new short[] { IRMCResponseProfileManager.WORK_RELATED_EXPENSE_RESP };
			SortedSet impExpProfile = null;
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			if (!pageId.equals(previousPageId)) {
				impExpProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseType);

				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_IRWE_Collection newImpColl = impRelExpBO
							.loadImpExpDetails(appNumber);
					if (newImpColl != null && !newImpColl.isEmpty()) {
						APP_IN_IRWE_Cargo rmcInImpExpCargo = null;
						final int newHouseCollSize = newImpColl.size();
						for (int i = 0; i < newHouseCollSize; i++) {
							rmcInImpExpCargo = newImpColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									impExpProfile, null, null,
									Short.parseShort(rmcInImpExpCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInImpExpCargo
													.getSeq_num()),
													AppConstants.WORK_RELATED_EXPENSE);
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(impExpProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(impExpProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				impExpProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Impairment_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								impExpProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(impExpProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							impExpProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						rmcResponseProfileManager
						.makeAddNew(
								IRMCResponseProfileManager.WORK_RELATED_EXPENSE_RESP,
								rmcInPrflCargo, true);
						rmcResponseProfileManager
						.makeAddNew(
								rmcResponseProfileManager
								.getResponseByType(
										IRMCResponseProfileManager.WORK_RELATED_EXPENSE_RESP,
										indivSeqBean.getType()),
										rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(impExpProfile, null,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(impExpProfile, null,
								AppConstants.WORK_RELATED_EXPENSE,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(impExpProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.WORK_RELATED_EXPENSE,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}

				session.put("Impairment_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					impExpProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(impExpProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(impExpProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			pageCollection.put("END_PAGE_IND",
					String.valueOf(categorySeqDetail.getUserEndSelectionInd()));
			rmcImpExpColl = impRelExpBO.loadImpExpWorkDetails(appNumber,
					indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_IRWE_Collection", rmcImpExpColl);

			final ImpairmentRelatedWorkExpensesBO impRelWkExpBo = new ImpairmentRelatedWorkExpensesBO();
			APP_IN_IRWE_Cargo cwwImpCargo = impRelWkExpBo.splitImpExpColl(
					rmcImpExpColl, AppConstants.CWW_RECORD_IND);
			if (cwwImpCargo == null) {
				cwwImpCargo = new APP_IN_IRWE_Cargo();
			}
			pageCollection.put("SEC_IRWE",
					impRelWkExpBo.settingImpExpDefaultValues(cwwImpCargo));
			APP_IN_IRWE_Cargo rmcImpCargo = impRelWkExpBo.splitImpExpColl(
					rmcImpExpColl, AppConstants.RMC_NEW_RECORD_IND);
			if (rmcImpCargo != null) {
				pageCollection.put("FST_IRWE",
						impRelExpBO.settingImpExpDefaultValues(rmcImpCargo));
			} else {
				rmcImpCargo = impRelWkExpBo.splitImpExpColl(rmcImpExpColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcImpCargo != null) {
					pageCollection
					.put("FST_IRWE", impRelExpBO
							.settingImpExpDefaultValues(rmcImpCargo));
				} else {
					rmcImpCargo = impRelWkExpBo.splitImpExpColl(rmcImpExpColl,
							AppConstants.RMC_END_RECORD_IND);
					if (rmcImpCargo != null) {
						pageCollection.put("FST_IRWE", impRelWkExpBo
								.settingImpExpDefaultValues(rmcImpCargo));
					} else {
						pageCollection.put("FST_IRWE", impRelExpBO
								.settingImpExpDefaultValues(rmcImpCargo));

					}
				}
			}
			if (rmcImpExpColl != null && !rmcImpExpColl.isEmpty()) {
				final APP_IN_IRWE_Cargo appInImpECargo = rmcImpExpColl
						.getCargo(0);
				srcAppInd = appInImpECargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("EXPENSE_TYPE", categoryType);

			// set first name to page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			// run component manager
			componentManager.getComponents("ARIWE", txnBean);
			request.remove("loopingQuestion");
			// Add the page collection to before collection
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"HousingExpenseEJBBean::loadImpairmentExpensesDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadImpairmentExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadImpairmentExpensesDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadImpairmentExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "loadImpairmentExpensesDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadImpairmentExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store impairment expenses details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeImpairmentExpensesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeImpairmentExpensesDetails() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");
			session.remove("Impairment_IndSeqBean");
			final SortedSet houseBillsProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);

			final APP_IN_IRWE_Collection rmcImpExpCollection = (APP_IN_IRWE_Collection) pageCollection
					.get("APP_IN_IRWE_Collection");
			APP_IN_IRWE_Cargo rmcImpExpCargo = rmcImpExpCollection.getCargo(0);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(houseBillsProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			final ImpairmentRelatedWorkExpensesBO impWrkExpBO = new ImpairmentRelatedWorkExpensesBO();
			final ARIWEValidator ariweValidator = new ARIWEValidator();

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {
				ariweValidator.validateImpExpPageContents(rmcImpExpCargo,
						userEndInd, pageMode);
			}

			if (checkBackToMyAccessSelected(request)
					|| ariweValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							ariweValidator.getMessageList());
				}

				pageCollection.put("APP_IN_IRWE_Collection",
						rmcImpExpCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_IRWE")) {
					pageCollection.put("SEC_IRWE", beforeColl.get("SEC_IRWE"));
				}
				pageCollection.put("FST_IRWE", rmcImpExpCargo);
				return;
			}

			final APP_IN_IRWE_Collection beforeCollRmcImpExpColl = (APP_IN_IRWE_Collection) beforeColl
					.get("APP_IN_IRWE_Collection");
			APP_IN_IRWE_Cargo beforeImpExpCargo = null;

			rmcImpExpCargo.setApp_num(appNumber);
			if (rmcImpExpCargo.getChg_eff_dt() == null
					|| rmcImpExpCargo.getChg_eff_dt().trim().length() == 0) {
				rmcImpExpCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {
				rmcImpExpCargo.setChg_eff_dt(displayFormatter
						.getYYYYMMDDDate(rmcImpExpCargo.getChg_eff_dt()));
			}

			if (rmcImpExpCargo.getMo_exp_ind() == null
					|| rmcImpExpCargo.getMo_exp_ind().trim().length() == 0) {
				if (rmcImpExpCargo.getMo_exp_amt() != null
						&& rmcImpExpCargo.getMo_exp_amt().trim().length() == 0) {
					rmcImpExpCargo.setMo_exp_amt(FwConstants.ZERO);
					rmcImpExpCargo.setMo_exp_ind("2");
				} else {
					rmcImpExpCargo.setMo_exp_ind(FwConstants.ZERO);
				}
			} else {
				if (rmcImpExpCargo.getMo_exp_amt() == null
						|| rmcImpExpCargo.getMo_exp_amt().trim().length() == 0) {
					rmcImpExpCargo.setMo_exp_amt(FwConstants.ZERO);

				} else {
					rmcImpExpCargo
					.setMo_exp_amt(rmcImpExpCargo.getMo_exp_amt());
					rmcImpExpCargo.setMo_exp_ind(FwConstants.ONE);
				}
			}

			if (rmcImpExpCargo.getExp_typ_cd() == null
					|| rmcImpExpCargo.getExp_typ_cd() != null
					&& rmcImpExpCargo.getExp_typ_cd().trim().length() == 0
					|| rmcImpExpCargo.getExp_typ_cd() != null
					&& rmcImpExpCargo.getExp_typ_cd().trim()
					.equalsIgnoreCase(FwConstants.DEFAULT_DROPDOWN_SEL)) {
				rmcImpExpCargo.setExp_typ_cd(FwConstants.SPACE);

			} else {
				rmcImpExpCargo.setExp_typ_cd(rmcImpExpCargo.getExp_typ_cd());
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean impExpDetUpdate = false;

			if (beforeCollRmcImpExpColl != null
					&& !beforeCollRmcImpExpColl.isEmpty()) {

				final int size = beforeCollRmcImpExpColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeImpExpCargo = impWrkExpBO.splitImpExpColl(
						beforeCollRmcImpExpColl, sourceAppIndicator);
				if (beforeImpExpCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeImpExpCargo = impWrkExpBO.splitImpExpColl(
							beforeCollRmcImpExpColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeImpExpCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				rmcImpExpCargo.setSrc_app_ind(beforeImpExpCargo
						.getSrc_app_ind());
				rmcImpExpCargo.setIndv_seq_num(beforeImpExpCargo
						.getIndv_seq_num());
				rmcImpExpCargo.setSeq_num(beforeImpExpCargo.getSeq_num());

				if ("E".equalsIgnoreCase(pageMode)) {
					rmcImpExpCargo.setMo_exp_amt(beforeImpExpCargo
							.getMo_exp_amt());
					rmcImpExpCargo.setExp_typ_cd(beforeImpExpCargo
							.getExp_typ_cd());
				}

				final String changeEffDate = rmcImpExpCargo.getChg_eff_dt();
				if (Date.valueOf(beforeImpExpCargo.getChg_eff_dt()) == Date
						.valueOf(AppConstants.HIGH_DATE)
						&& rmcImpExpCargo.getChg_eff_dt().trim().length() == 0) {
					rmcImpExpCargo.setChg_eff_dt(beforeImpExpCargo
							.getChg_eff_dt());
				}

				// check dirty
				rmcImpExpCargo = (APP_IN_IRWE_Cargo) isChanged(
						beforeImpExpCargo, rmcImpExpCargo);
				rmcImpExpCargo.setChg_eff_dt(changeEffDate);
				rmcImpExpCargo.setSrc_app_ind(sourceAppIndicator);
				rmcImpExpCargo.setRowAction(recordInd);
				if (rmcImpExpCargo.isDirty()) {
					if ("C".equalsIgnoreCase(pageMode)) {
						ariweValidator.validateChangeEffectiveDate(
								changeEffDate, pageMode);
						if (ariweValidator.hasMessages()) {
							request.put(FwConstants.MESSAGE_LIST,
									ariweValidator.getMessageList());
							pageCollection.put("APP_IN_IRWE_Collection",
									rmcImpExpCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));
							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection.put("showLoopingQuestion",
									beforeColl.get("showLoopingQuestion"));
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));

							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_IRWE")) {
								pageCollection.put("SEC_IRWE",
										beforeColl.get("SEC_IRWE"));
							}
							pageCollection.put("FST_IRWE", rmcImpExpCargo);
							return;
						}
					}
					impExpDetUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcImpExpCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = impWrkExpBO
						.getMaxHouseSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcImpExpCargo.setSeq_num(String.valueOf(seqNum));
				rmcImpExpCargo.setExp_typ_cd(rmcImpExpCargo.getExp_typ_cd());
				rmcImpExpCargo.setSrc_app_ind(sourceAppIndicator);

				rmcImpExpCargo.setMo_exp_ind(rmcImpExpCargo.getMo_exp_ind());
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcImpExpCargo.setRowAction(recordInd);
				impExpDetUpdate = true;
				categorySelectionProfileManager
				.updateSequence(houseBillsProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());

			}

			// now we need to check the flags
			if (impExpDetUpdate) {

				// check for the change effective date
				// if they did't fill this one raise validation
				if (!sourceAppIndicator.equals(AppConstants.RMC_NEW_RECORD_IND)
						&& rmcImpExpCargo.getChg_eff_dt().equals(
								AppConstants.HIGH_DATE)) {
					ariweValidator.validateHouseEffectiveDate(rmcImpExpCargo);
					if (ariweValidator.hasMessages()) {
						final String reqWarningMsgs = (String) request
								.get(FwConstants.WARNING_MSG_DETAILS);
						if (!checkForWarningMesgs(reqWarningMsgs,
								ariweValidator.getMessageList())) {
							request.put(FwConstants.MESSAGE_LIST,
									ariweValidator.getMessageList());
							pageCollection.put("APP_IN_IRWE_Collection",
									rmcImpExpCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));
							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));
							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_IRWE")) {
								pageCollection.put("SEC_IRWE",
										beforeColl.get("SEC_IRWE"));
							}
							pageCollection.put("FST_IRWE", rmcImpExpCargo);
							return;
						}
					}
				}
			}

			if (impExpDetUpdate) {
				if (rmcImpExpCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					impWrkExpBO.insertExistingImpDetails(rmcImpExpCollection);
				} else {
					impWrkExpBO.storeImpExpDetails(rmcImpExpCollection);
				}
			}

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						houseBillsProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {

					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.IREW, rmcInPrflCargo,
							true);
				}
			}
			// Mark complete job sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					houseBillsProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(houseBillsProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(houseBillsProfile);
			}

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeImpairmentExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeImpairmentExpensesDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeImpairmentExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "storeImpairmentExpensesDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeImpairmentExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the room and board details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editRoomAndBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editRoomAndBoardDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editRoomAndBoardDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_RM_BRD_EXP_Collection appInRmBrdColl = (APP_IN_RM_BRD_EXP_Collection) pageCollection
					.get("APP_IN_RM_BRD_EXP_Collection");
			final APP_IN_RM_BRD_EXP_Cargo appInRmBrdCargo = appInRmBrdColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInRmBrdCargo.getPayr_indv_seq_num());
			seqBean.setSeqNum(appInRmBrdCargo.getSeq_num());
			seqBean.setType(AppConstants.ROOM_AND_BOARD);

			// setting user end indicator

			if (appInRmBrdCargo.getSrc_app_ind().equals(
					AppConstants.RMC_END_RECORD_IND)) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// Get RMB_RQST_Cargo for appNum
			final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
			if (rmbRqstCargo.getRoom_brd_stat_ind() != null
					&& !rmbRqstCargo.getRoom_brd_stat_ind().equals(
							FwConstants.YES)) {
				rmbRqstCargo.setRoom_brd_stat_ind(FwConstants.YES);
				rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				rmbColl.addCargo(rmbRqstCargo);
				rmbColl.persist(FwConstants.DAO);
			}
			// add to session
			session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRBE",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editRoomAndBoardDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editRoomAndBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editRoomAndBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editRoomAndBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editRoomAndBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editRoomAndBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseRoomAndBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseRoomAndBoardDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseRoomAndBoardDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_RM_BRD_EXP_Collection rbColl = (APP_IN_RM_BRD_EXP_Collection) pageCollection
					.get("APP_IN_RM_BRD_EXP_Collection");
			final APP_IN_RM_BRD_EXP_Cargo rbCargo = rbColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = rbCargo.getPayr_indv_seq_num();
			seqNum = rbCargo.getSeq_num();

			APP_IN_RM_BRD_EXP_Cargo beforerbCargo = (APP_IN_RM_BRD_EXP_Cargo) beforeColl
					.get("APP_IN_RM_BRD_EXP_Cargo");
			final RoomAndBoardExpensesBO rbBO = new RoomAndBoardExpensesBO();

			if (beforerbCargo == null
					|| rbBO.isDifferentRoomAndBoard(rbCargo, beforerbCargo)) {

				rbBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, rbBO.getMessageList());
				beforerbCargo = new APP_IN_RM_BRD_EXP_Cargo();
				beforerbCargo.setPayr_indv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				beforeColl.put("APP_IN_RM_BRD_EXP_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			rbBO.deleteRBRecords(indvSeqNum, seqNum, appNum);
			rbBO.deleteRoomRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.PAY_ROOM_AND_BOARD };

			if (beforeColl != null) {
				int count = 0;
				APP_IN_RM_BRD_EXP_Collection rb1Coll = null;
				APP_IN_RM_BRD_EXP_Cargo rb1Cargo = null;
				rb1Coll = (APP_IN_RM_BRD_EXP_Collection) beforeColl
						.get("APP_IN_RM_BRD_EXP_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getCargo(i);
						if (rb1Cargo.getPayr_indv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);
				}
			}

			boolean rmcPrflRBExpNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.PAY_ROOM_AND_BOARD)) {
					rmcPrflRBExpNotRequired = true;
				}
			} else {
				rmcPrflRBExpNotRequired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getRoomAndBoardTypes(), AppConstants.ROOM_AND_BOARD)
					&& rmcPrflRBExpNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRBE", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseRoomAndBoardDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseRoomAndBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseRoomAndBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseRoomAndBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseRoomAndBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseRoomAndBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase room and board changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseRoomAndBoardChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseRoomAndBoardChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseRoomAndBoardChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_RM_BRD_EXP_Collection rbColl = (APP_IN_RM_BRD_EXP_Collection) pageCollection
					.get("APP_IN_RM_BRD_EXP_Collection");
			final APP_IN_RM_BRD_EXP_Cargo rbCargo = rbColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = rbCargo.getPayr_indv_seq_num();
			seqNum = rbCargo.getSeq_num();

			APP_IN_RM_BRD_EXP_Cargo beforeRBCargo = (APP_IN_RM_BRD_EXP_Cargo) beforeColl
					.get("APP_IN_RM_BRD_EXP_Cargo");

			final RoomAndBoardExpensesBO rbBO = new RoomAndBoardExpensesBO();
			if (beforeRBCargo == null
					|| rbBO.isDifferentRoomAndBoard(rbCargo, beforeRBCargo)) {
				rbBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, rbBO.getMessageList());
				beforeRBCargo = new APP_IN_RM_BRD_EXP_Cargo();
				beforeRBCargo.setPayr_indv_seq_num(indvSeqNum);
				beforeRBCargo.setSeq_num(seqNum);
				beforeColl.put("APP_IN_RM_BRD_EXP_Cargo", beforeRBCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			rbBO.deleteRBRecords(indvSeqNum, seqNum, appNum);
			rbBO.deleteRoomRecords(indvSeqNum, seqNum, appNum);// From the child
			// table
			final String catUtilType = AppConstants.RMC_CAT_HO_EXP_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType,
					AppConstants.ROOM_AND_BOARD);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), AppConstants.ROOM_AND_BOARD,
					(short) 2, 'N');
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.PAY_ROOM_AND_BOARD)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getRoomAndBoardTypes(), AppConstants.ROOM_AND_BOARD)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRBE", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseRoomAndBoardChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseRoomAndBoardChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseRoomAndBoardChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseRoomAndBoardChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseRoomAndBoardChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseRoomAndBoardChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endRoomAndBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endRoomAndBoardDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endRoomAndBoardDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_RM_BRD_EXP_Collection rbColl = (APP_IN_RM_BRD_EXP_Collection) pageCollection
					.get("APP_IN_RM_BRD_EXP_Collection");
			final APP_IN_RM_BRD_EXP_Cargo rbCargo = rbColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(rbCargo.getPayr_indv_seq_num());
			seqBean.setSeqNum(rbCargo.getSeq_num());
			seqBean.setType(AppConstants.ROOM_AND_BOARD);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// Get RMB_RQST_Cargo for appNum
			final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
			if (rmbRqstCargo.getRoom_brd_stat_ind() != null
					&& !rmbRqstCargo.getRoom_brd_stat_ind().equals(
							FwConstants.YES)) {
				rmbRqstCargo.setRoom_brd_stat_ind(FwConstants.YES);
				rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				rmbColl.addCargo(rmbRqstCargo);
				rmbColl.persist(FwConstants.DAO);
			}
			// add to session
			session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Room and Board Expense Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRBE",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endRoomAndBoardDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endRoomAndBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endRoomAndBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endRoomAndBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endRoomAndBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endRoomAndBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the impairment details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editImpairmentDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editImpairmentDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editImpairmentDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final CP_APP_IN_IRWE_Collection appInImpExpColl = (CP_APP_IN_IRWE_Collection) pageCollection
					.get("CP_APP_IN_IRWE_Collection");
			final CP_APP_IN_IRWE_Cargo appInImpExpCargo = appInImpExpColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInImpExpCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInImpExpCargo.getSeq_num());
			seqBean.setType(AppConstants.WORK_RELATED_EXPENSE);

			// setting user end indicator

			if ("RE".equals(appInImpExpCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// Get RMB_RQST_Cargo for appNum
			final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
			if (rmbRqstCargo.getIrwe_stat_ind() != null
					&& !rmbRqstCargo.getIrwe_stat_ind().equals(FwConstants.YES)) {
				rmbRqstCargo.setIrwe_stat_ind(FwConstants.YES);
				rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				rmbColl.addCargo(rmbRqstCargo);
				rmbColl.persist(FwConstants.DAO);
			}
			// add to session
			session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIWE",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editImpairmentDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editImpairmentDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editImpairmentDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editImpairmentDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editImpairmentDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editImpairmentDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseImpairmentDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseImpairmentDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseImpairmentDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_APP_IN_IRWE_Collection irColl = (CP_APP_IN_IRWE_Collection) pageCollection
					.get("CP_APP_IN_IRWE_Collection");
			final CP_APP_IN_IRWE_Cargo irCargo = irColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = irCargo.getIndv_seq_num();
			seqNum = irCargo.getSeq_num();
			CP_APP_IN_IRWE_Cargo beforerbCargo = (CP_APP_IN_IRWE_Cargo) beforeColl
					.get("CP_APP_IN_IRWE_Cargo");
			final ImpairmentRelatedWorkExpensesBO irBO = new ImpairmentRelatedWorkExpensesBO();

			if (beforerbCargo == null
					|| irBO.isDifferentImpExp(irCargo, beforerbCargo)) {

				irBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, irBO.getMessageList());
				beforerbCargo = new CP_APP_IN_IRWE_Cargo();
				beforerbCargo.setIndv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				beforeColl.put("CP_APP_IN_IRWE_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			irBO.deleteImpExpRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.WORK_RELATED_EXPENSE_RESP };

			if (beforeColl != null) {
				int count = 0;
				CP_APP_IN_IRWE_Collection rb1Coll = null;
				CP_APP_IN_IRWE_Cargo rb1Cargo = null;
				rb1Coll = (CP_APP_IN_IRWE_Collection) beforeColl
						.get("CP_APP_IN_IRWE_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getCargo(i);
						if (rb1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);
				}
			}

			boolean rmcPrflImpExpNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.WORK_RELATED_EXPENSE_RESP)) {
					rmcPrflImpExpNotRequired = true;
				}
			} else {

				rmcPrflImpExpNotRequired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getImpairmentRelatedWorkExpensesTypes(),
					AppConstants.WORK_RELATED_EXPENSE)
					&& rmcPrflImpExpNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARIWE", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseImpairmentDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseImpairmentDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseImpairmentDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseImpairmentDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseImpairmentDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseImpairmentDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase impairment changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseImpairmentChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseImpairmentChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseImpairmentChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final CP_APP_IN_IRWE_Collection irColl = (CP_APP_IN_IRWE_Collection) pageCollection
					.get("CP_APP_IN_IRWE_Collection");
			final CP_APP_IN_IRWE_Cargo irCargo = irColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = irCargo.getIndv_seq_num();
			seqNum = irCargo.getSeq_num();

			CP_APP_IN_IRWE_Cargo beforeImpExpCargo = (CP_APP_IN_IRWE_Cargo) beforeColl
					.get("CP_APP_IN_IRWE_Cargo");

			final ImpairmentRelatedWorkExpensesBO irBO = new ImpairmentRelatedWorkExpensesBO();
			if (beforeImpExpCargo == null
					|| irBO.isDifferentImpExp(irCargo, beforeImpExpCargo)) {
				irBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, irBO.getMessageList());
				beforeImpExpCargo = new CP_APP_IN_IRWE_Cargo();
				beforeImpExpCargo.setIndv_seq_num(indvSeqNum);
				beforeImpExpCargo.setSeq_num(seqNum);
				beforeColl.put("CP_APP_IN_IRWE_Cargo", beforeImpExpCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			irBO.deleteImpExpRecords(indvSeqNum, seqNum, appNum);

			final String catUtilType = AppConstants.WORK_RELATED_EXPENSE;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType,
					AppConstants.WORK_RELATED_EXPENSE);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum),
					AppConstants.WORK_RELATED_EXPENSE, (short) 2, 'N');
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl, IRMCResponseProfileManager.IREW)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getImpairmentRelatedWorkExpensesTypes(),
					AppConstants.WORK_RELATED_EXPENSE)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARIWE", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseImpairmentChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseImpairmentChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseImpairmentChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseImpairmentChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseImpairmentChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseImpairmentChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endImpairmentDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endImpairmentDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endImpairmentDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_APP_IN_IRWE_Collection irColl = (CP_APP_IN_IRWE_Collection) pageCollection
					.get("CP_APP_IN_IRWE_Collection");
			final CP_APP_IN_IRWE_Cargo irCargo = irColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(irCargo.getIndv_seq_num());
			seqBean.setSeqNum(irCargo.getSeq_num());
			seqBean.setType(AppConstants.IMPAIRMENT_RELATED_WORK_EXPENSES);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// Get RMB_RQST_Cargo for appNum
			final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
			if (rmbRqstCargo.getIrwe_stat_ind() != null
					&& !rmbRqstCargo.getIrwe_stat_ind().equals(FwConstants.YES)) {
				rmbRqstCargo.setIrwe_stat_ind(FwConstants.YES);
				rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				rmbColl.addCargo(rmbRqstCargo);
				rmbColl.persist(FwConstants.DAO);
			}
			// add to session
			session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Room and Board Expense Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIWE",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::endImpairmentDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endImpairmentDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endImpairmentDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endImpairmentDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endImpairmentDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endImpairmentDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the room and board details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addRoomAndBoardDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addRoomAndBoardDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);

			final String roomBoardSeq = request.get("firstName_roomAndBoard") != null ? (String) request
					.get("firstName_roomAndBoard") : FwConstants.EMPTY_STRING;

					final ARRBEValidator rbBillsBO = new ARRBEValidator();
					// validate selections

					if (roomBoardSeq == null
							|| roomBoardSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						rbBillsBO.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST,
								rbBillsBO.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(roomBoardSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(AppConstants.ROOM_AND_BOARD);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

					final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
							.get(AppConstants.RMB_RQST_COLLECTION);

					// Get RMB_RQST_Cargo for appNum
					final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
					if (rmbRqstCargo.getRoom_brd_stat_ind() != null
							&& !rmbRqstCargo.getRoom_brd_stat_ind().equals(
									FwConstants.YES)) {
						rmbRqstCargo.setRoom_brd_stat_ind(FwConstants.YES);
						rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						rmbColl.addCargo(rmbRqstCargo);
						rmbColl.persist(FwConstants.DAO);
					}
					// add to session
					session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRBE", driver,
							appNum);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addRoomAndBoardDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addRoomAndBoardDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addRoomAndBoardDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addRoomAndBoardDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addRoomAndBoardDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the impairment details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addImpairmentDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addImpairmentDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			request.put("firstName_roomandboard", null);
			final String impBillSeq = request.get("firstName_impExpAdd") != null ? (String) request
					.get("firstName_impExpAdd") : FwConstants.EMPTY_STRING;

					final ARIWEValidator irBillsBO = new ARIWEValidator();
					// validate selections

					if (impBillSeq == null
							|| impBillSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						irBillsBO.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST,
								irBillsBO.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(impBillSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(AppConstants.IMPAIRMENT_RELATED_WORK_EXPENSES);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

					final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
							.get(AppConstants.RMB_RQST_COLLECTION);

					// Get RMB_RQST_Cargo for appNum
					final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
					if (rmbRqstCargo.getIrwe_stat_ind() != null
							&& !rmbRqstCargo.getIrwe_stat_ind().equals(FwConstants.YES)) {
						rmbRqstCargo.setIrwe_stat_ind(FwConstants.YES);
						rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						rmbColl.addCargo(rmbRqstCargo);
						rmbColl.persist(FwConstants.DAO);
					}
					// add to session
					session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARIWE", driver,
							appNum);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addImpairmentDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addImpairmentDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addImpairmentDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addImpairmentDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addImpairmentDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the dependent care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editDependentCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editDependentCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editDependentCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_DC_E_Collection appInDepExpColl = (APP_IN_DC_E_Collection) pageCollection
					.get("APP_IN_DC_E_Collection");
			final APP_IN_DC_E_Cargo appInDepExpCargo = appInDepExpColl
					.getResult(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInDepExpCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInDepExpCargo.getSeq_num());
			seqBean.setType(AppConstants.DEPENDENT_CARE_EXPENSES);
			// setting user end indicator

			if ("RE".equals(appInDepExpCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getDpnd_care_stat_ind() != null
						&& !rmbRqstCargo.getDpnd_care_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setDpnd_care_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARDCD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editDependentCareDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editDependentCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editDependentCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editDependentCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editDependentCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the medicare details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editMedicareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.editMedicareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editMedicareDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_MEDCR_Collection appInMedcrColl = (APP_IN_MEDCR_Collection) pageCollection
					.get("APP_IN_MEDCR_Collection");
			final APP_IN_MEDCR_Cargo appInMedcrCargo = appInMedcrColl
					.getResult(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInMedcrCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInMedcrCargo.getSeq_num());
			seqBean.setType(AppConstants.MEDICARE_INFORMATION);
			// setting user end indicator

			if ("RE".equals(appInMedcrCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getMedicare_assist_req_stat_ind() != null
						&& !rmbRqstCargo.getMedicare_assist_req_stat_ind()
						.equals(FwConstants.YES)) {
					rmbRqstCargo
					.setMedicare_assist_req_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARHMD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::editMedicareDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editMedicareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editMedicareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editMedicareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "editMedicareDetails");
		}
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editMedicareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseDependentCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseDependentCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseDependentCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_DC_E_Collection dcColl = (APP_IN_DC_E_Collection) pageCollection
					.get("APP_IN_DC_E_Collection");
			final APP_IN_DC_E_Cargo dcCargo = dcColl.getResult(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = dcCargo.getIndv_seq_num();
			seqNum = dcCargo.getSeq_num();
			APP_IN_DC_E_Cargo beforerbCargo = (APP_IN_DC_E_Cargo) beforeColl
					.get("APP_IN_DC_E_Cargo");
			final DependentCareExpensesBO dcBO = new DependentCareExpensesBO();

			if (beforerbCargo == null
					|| dcBO.isDifferentDC(dcCargo, beforerbCargo)) {

				dcBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, dcBO.getMessageList());
				beforerbCargo = new APP_IN_DC_E_Cargo();
				beforerbCargo.setIndv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				beforeColl.put("APP_IN_DC_E_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			dcBO.deleteDepCareExpRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.DEPENDENT_CARE };

			if (beforeColl != null) {
				int count = 0;
				APP_IN_DC_E_Collection rb1Coll = null;
				APP_IN_DC_E_Cargo rb1Cargo = null;
				rb1Coll = (APP_IN_DC_E_Collection) beforeColl
						.get("APP_IN_DC_E_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getResult(i);
						if (rb1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);
					/*
					 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented
					 * Code in this block
					 */
				}
			}

			boolean rmcPrflDepCarExpNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.DEPENDENT_CARE)) {
					rmcPrflDepCarExpNotRequired = true;
				}
			} else {

				rmcPrflDepCarExpNotRequired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getDependentCareExpTypes(),
					AppConstants.DEPENDENT_CARE_EXPENSES)
					&& rmcPrflDepCarExpNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARDCD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseDependentCareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseDependentCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseDependentCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseDependentCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseDependentCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicareDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_MEDCR_Collection medcrColl = (APP_IN_MEDCR_Collection) pageCollection
					.get("APP_IN_MEDCR_Collection");
			final APP_IN_MEDCR_Cargo medicareCargo = medcrColl.getResult(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = medicareCargo.getIndv_seq_num();
			seqNum = medicareCargo.getSeq_num();
			APP_IN_MEDCR_Cargo beforerbCargo = (APP_IN_MEDCR_Cargo) beforeColl
					.get("APP_IN_MEDCR_Cargo");
			final MedicareBO medicareBO = new MedicareBO();

			if (beforerbCargo == null
					|| medicareBO.isDifferent(medicareCargo, beforerbCargo)) {

				medicareBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						medicareBO.getMessageList());
				beforerbCargo = new APP_IN_MEDCR_Cargo();
				beforerbCargo.setIndv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				beforeColl.put("APP_IN_MEDCR_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			medicareBO.deleteMedicareRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.RECEIVE_MEDICARE };

			if (beforeColl != null) {
				int count = 0;
				APP_IN_MEDCR_Collection rb1Coll = null;
				APP_IN_MEDCR_Cargo rb1Cargo = null;
				rb1Coll = (APP_IN_MEDCR_Collection) beforeColl
						.get("APP_IN_MEDCR_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getResult(i);
						if (rb1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);
				}
			}

			boolean rmcPrflDepCarExpNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.RECEIVE_MEDICARE)) {
					rmcPrflDepCarExpNotRequired = true;
				}
			} else {

				rmcPrflDepCarExpNotRequired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getMediCareExpTypes(), AppConstants.MEDICARE_INFORMATION)
					&& rmcPrflDepCarExpNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARHMD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO, "RMCHousingExpenseEJBBean::eraseMedicareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseMedicareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase dependent care changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseDependentCareChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseDependentCareChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseDependentCareChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_DC_E_Collection dcColl = (APP_IN_DC_E_Collection) pageCollection
					.get("APP_IN_DC_E_Collection");
			final APP_IN_DC_E_Cargo dcCargo = dcColl.getResult(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = dcCargo.getIndv_seq_num();
			seqNum = dcCargo.getSeq_num();

			APP_IN_DC_E_Cargo beforeImpExpCargo = (APP_IN_DC_E_Cargo) beforeColl
					.get("APP_IN_DC_E_Cargo");

			final DependentCareExpensesBO dcBO = new DependentCareExpensesBO();
			if (beforeImpExpCargo == null
					|| dcBO.isDifferentDC(dcCargo, beforeImpExpCargo)) {
				dcBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, dcBO.getMessageList());
				beforeImpExpCargo = new APP_IN_DC_E_Cargo();
				beforeImpExpCargo.setIndv_seq_num(indvSeqNum);
				beforeImpExpCargo.setSeq_num(seqNum);
				beforeColl.put("APP_IN_DC_E_Cargo", beforeImpExpCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			dcBO.deleteDepCareExpRecords(indvSeqNum, seqNum, appNum);

			final String catUtilType = AppConstants.RMC_CAT_HO_EXP_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType,
					AppConstants.DEPENDENT_CARE_EXPENSES);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum),
					AppConstants.DEPENDENT_CARE_EXPENSES, (short) 2, 'N');
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.DEPENDENT_CARE)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getDependentCareExpTypes(),
					AppConstants.DEPENDENT_CARE_EXPENSES)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARDCD", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseDependentCareChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseDependentCareChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseDependentCareChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseDependentCareChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseDependentCareChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseDependentCareChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase medicare changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicareChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicareChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicareChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_MEDCR_Collection dcColl = (APP_IN_MEDCR_Collection) pageCollection
					.get("APP_IN_MEDCR_Collection");
			final APP_IN_MEDCR_Cargo dcCargo = (APP_IN_MEDCR_Cargo) dcColl
					.get(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = dcCargo.getIndv_seq_num();
			seqNum = dcCargo.getSeq_num();

			APP_IN_MEDCR_Cargo beforeImpExpCargo = (APP_IN_MEDCR_Cargo) beforeColl
					.get("APP_IN_MEDCR_Cargo");

			final MedicareBO dcBO = new MedicareBO();
			if (beforeImpExpCargo == null
					|| dcBO.isDifferent(dcCargo, beforeImpExpCargo)) {
				dcBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, dcBO.getMessageList());
				beforeImpExpCargo = new APP_IN_MEDCR_Cargo();
				beforeImpExpCargo.setIndv_seq_num(indvSeqNum);
				beforeImpExpCargo.setSeq_num(seqNum);
				beforeColl.put("APP_IN_MEDCR_Cargo", beforeImpExpCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			dcBO.deleteMedicareRecords(indvSeqNum, seqNum, appNum);

			final String catUtilType = AppConstants.MEDICARE_INFORMATION;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType,
					AppConstants.MEDICARE_INFORMATION);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum),
					AppConstants.MEDICARE_INFORMATION, (short) 2, 'N');
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.RECEIVE_MEDICARE)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getMediCareExpTypes(), AppConstants.MEDICARE_INFORMATION)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARHMD", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCHousingExpenseEJBBean::eraseMedicareChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseMedicareChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicareChanges");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseMedicareChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "eraseMedicareChanges");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicareChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endDependentCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endDependentCareDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endDependentCareDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_DC_E_Collection dcColl = (APP_IN_DC_E_Collection) pageCollection
					.get("APP_IN_DC_E_Collection");
			final APP_IN_DC_E_Cargo dcCargo = dcColl.getResult(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(dcCargo.getIndv_seq_num());
			seqBean.setSeqNum(dcCargo.getSeq_num());
			seqBean.setType(AppConstants.DEPENDENT_CARE_EXPENSES);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getDpnd_care_stat_ind() != null
						&& !rmbRqstCargo.getDpnd_care_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setDpnd_care_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Room and Board Expense Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARDCD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endDependentCareDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endDependentCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endDependentCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "endDependentCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endDependentCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the dependent care details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addDependentCareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addDependentCareDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			request.put("firstName_roomandboard", null);
			request.put("firstName_impExpAdd", null);
			final String depCareSeq = request.get("firstName_DependentCare") != null ? (String) request
					.get("firstName_DependentCare") : FwConstants.EMPTY_STRING;

					final ARDCDValidator validator = new ARDCDValidator();
					// validate selections

					if (depCareSeq == null
							|| depCareSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						validator.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST,
								validator.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(depCareSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(AppConstants.DEPENDENT_CARE_EXPENSES);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					final String appType = (String) session
							.get(FwConstants.ACCESS_APPLICATION_TYPE);
					final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
							.get(AppConstants.RMB_RQST_COLLECTION);
					if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
						// Get RMB_RQST_Cargo for appNum
						final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
						if (rmbRqstCargo.getDpnd_care_stat_ind() != null
								&& !rmbRqstCargo.getDpnd_care_stat_ind().equals(
										FwConstants.YES)) {
							rmbRqstCargo.setDpnd_care_stat_ind(FwConstants.YES);
							rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							rmbColl.addCargo(rmbRqstCargo);
							rmbColl.persist(FwConstants.DAO);
						}
						// add to session
						session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
					}
					final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					final RMC_IN_PRFL_Cargo cargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, depCareSeq);
					cargo.setDpnd_care_resp("R");
					session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARDCD", driver,
							appNum);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addDependentCareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addDependentCareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addDependentCareDetails");
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addDependentCareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the medicare details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addMedicareDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.addMedicareDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			request.put("firstName_roomandboard", null);
			request.put("firstName_impExpAdd", null);
			request.put("firstName_DependentCare", null);
			final String depCareSeq = request.get("firstName_Medicare") != null ? (String) request
					.get("firstName_Medicare") : FwConstants.EMPTY_STRING;

					final ARHMDValidator validator = new ARHMDValidator();
					// validate selections

					if (depCareSeq == null
							|| depCareSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						validator.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST,
								validator.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(depCareSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(AppConstants.MEDICARE_INFORMATION);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					final String appType = (String) session
							.get(FwConstants.ACCESS_APPLICATION_TYPE);
					final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
							.get(AppConstants.RMB_RQST_COLLECTION);
					if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
						// Get RMB_RQST_Cargo for appNum
						final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
						if (rmbRqstCargo.getMedicare_assist_req_stat_ind() != null
								&& !rmbRqstCargo.getMedicare_assist_req_stat_ind()
								.equals(FwConstants.YES)) {
							rmbRqstCargo
							.setMedicare_assist_req_stat_ind(FwConstants.YES);
							rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							rmbColl.addCargo(rmbRqstCargo);
							rmbColl.persist(FwConstants.DAO);
						}
						// add to session
						session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
					}
					final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					final RMC_IN_PRFL_Cargo cargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, depCareSeq);
					cargo.setRcv_medcr_resp("R");
					session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARHMD", driver,
							appNum);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addMedicareDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), "addMedicareDetails");
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addMedicareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addMedicareDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the support payments details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editSupportPaymentsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editSupportPaymentsDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editSupportPaymentsDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final Cp_App_In_Deduction_Collection appInSupPayColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo appInSupPayCargo = appInSupPayColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInSupPayCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInSupPayCargo.getSeq_num());
			seqBean.setType(AppConstants.PAYMENTS_AND_OBLIGATIONS);
			// setting user end indicator

			if ("RE".equals(appInSupPayCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getSprt_oblg_stat_ind() != null
						&& !rmbRqstCargo.getSprt_oblg_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setSprt_oblg_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARSOD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editSupportPaymentsDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editSupportPaymentsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editSupportPaymentsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editSupportPaymentsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseSupportPaymentsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseSupportPaymentsDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseSupportPaymentsDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final Cp_App_In_Deduction_Collection supOblgColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo dcCargo = supOblgColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = dcCargo.getIndv_seq_num();
			seqNum = dcCargo.getSeq_num();
			Cp_App_In_Deduction_Cargo beforerbCargo = (Cp_App_In_Deduction_Cargo) beforeColl
					.get("Cp_App_In_Deduction_Cargo");
			final SupportPaymentsAndObligationsBO spBO = new SupportPaymentsAndObligationsBO();

			if (beforerbCargo == null
					|| spBO.isDifferentSPO(dcCargo, beforerbCargo)) {

				spBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, spBO.getMessageList());
				beforerbCargo = new Cp_App_In_Deduction_Cargo();
				beforerbCargo.setIndv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				beforeColl.put("Cp_App_In_Deduction_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			spBO.deleteSupPayExpRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT };

			if (beforeColl != null) {
				int count = 0;
				Cp_App_In_Deduction_Collection rb1Coll = null;
				Cp_App_In_Deduction_Cargo rb1Cargo = null;
				rb1Coll = (Cp_App_In_Deduction_Collection) beforeColl
						.get("Cp_App_In_Deduction_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getCargo(i);
						if (rb1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}
				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);
				}
			}

			boolean rmcPrflSupPayNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT)) {
					rmcPrflSupPayNotRequired = true;
				}
			} else {

				rmcPrflSupPayNotRequired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getSupportPaymentsObligationType(),
					AppConstants.PAYMENTS_AND_OBLIGATIONS)
					&& rmcPrflSupPayNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARSOD", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseSupportPaymentsDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseSupportPaymentsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseDependentCareDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseSupportPaymentsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase support payments changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseSupportPaymentsChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseSupportPaymentsChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseSupportPaymentsChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final Cp_App_In_Deduction_Collection spColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo dcCargo = spColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = dcCargo.getIndv_seq_num();
			seqNum = dcCargo.getSeq_num();

			Cp_App_In_Deduction_Cargo beforeImpExpCargo = (Cp_App_In_Deduction_Cargo) beforeColl
					.get("Cp_App_In_Deduction_Cargo");

			final SupportPaymentsAndObligationsBO spBO = new SupportPaymentsAndObligationsBO();
			if (beforeImpExpCargo == null
					|| spBO.isDifferentSPO(dcCargo, beforeImpExpCargo)) {
				spBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, spBO.getMessageList());
				beforeImpExpCargo = new Cp_App_In_Deduction_Cargo();
				beforeImpExpCargo.setIndv_seq_num(indvSeqNum);
				beforeImpExpCargo.setSeq_num(seqNum);
				beforeColl.put("Cp_App_In_Deduction_Cargo", beforeImpExpCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			spBO.deleteSupPayExpRecords(indvSeqNum, seqNum, appNum);

			final String catUtilType = AppConstants.PAYMENTS_AND_OBLIGATIONS;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType,
					AppConstants.PAYMENTS_AND_OBLIGATIONS);
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, catUtilType, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum),
					AppConstants.PAYMENTS_AND_OBLIGATIONS, (short) 2, 'N');
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getSupportPaymentsObligationType(),
					AppConstants.PAYMENTS_AND_OBLIGATIONS)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARSOD", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseSupportPaymentsChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseSupportPaymentsChanges");
			we.setFwException(fe);
			throw we;
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseSupportPaymentsChanges", e);
			throw fe;
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseSupportPaymentsChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endSupportPaymentsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endSupportPaymentsDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endSupportPaymentsDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final Cp_App_In_Deduction_Collection spColl = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			final Cp_App_In_Deduction_Cargo spCargo = spColl.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(spCargo.getIndv_seq_num());
			seqBean.setSeqNum(spCargo.getSeq_num());
			seqBean.setType(AppConstants.PAYMENTS_AND_OBLIGATIONS);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				// Get RMB_RQST_Cargo for appNum
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getSprt_oblg_stat_ind() != null
						&& !rmbRqstCargo.getSprt_oblg_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setSprt_oblg_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				// add to session
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Room and Board Expense Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARSOD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endSupportPaymentsDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endSupportPaymentsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endSupportPaymentsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endSupportPaymentsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the support payments details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addSupportPaymentsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addSupportPaymentsDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			request.put("firstName_roomandboard", null);
			request.put("firstName_impExpAdd", null);
			request.put("firstName_DependentCare", null);
			final String supPaySeq = request.get("firstName_SupportPayment") != null ? (String) request
					.get("firstName_SupportPayment") : FwConstants.EMPTY_STRING;
					final String type = request
							.get("supportPaymentType_supportPayments") != null ? (String) request
									.get("supportPaymentType_supportPayments")
									: FwConstants.EMPTY_STRING;

									final ARSODValidator validator = new ARSODValidator();
									// validate selections

									if (supPaySeq == null
											|| supPaySeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
										validator.validateAdd();
										// add validation message and return
										request.put(FwConstants.MESSAGE_LIST,
												validator.getMessageList());
										txnBean.setPageCollection((Map) session
												.get(FwConstants.BEFORE_COLLECTION));
										return;
									}
									final String appNum = (String) session.get(AppConstants.APP_NUMBER);
									final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
									indivSeqBean.setIndivSeqNum(supPaySeq);
									indivSeqBean.setSeqNum(FwConstants.ZERO);
									indivSeqBean.setType(type);
									indivSeqBean.setUserEndInd(FwConstants.ZERO);
									pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
									final String appType = (String) session
											.get(FwConstants.ACCESS_APPLICATION_TYPE);
									final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
											.get(AppConstants.RMB_RQST_COLLECTION);
									if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
										// Get RMB_RQST_Cargo for appNum
										final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
										if (rmbRqstCargo.getSprt_oblg_stat_ind() != null
												&& !rmbRqstCargo.getSprt_oblg_stat_ind().equals(
														FwConstants.YES)) {
											rmbRqstCargo.setSprt_oblg_stat_ind(FwConstants.YES);
											rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
											rmbColl.addCargo(rmbRqstCargo);
											rmbColl.persist(FwConstants.DAO);
										}
										// add to session
										session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
									}
									// set driver status
									final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
									driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARSOD", driver,
											appNum);
									driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
											appNum);
									session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addSupportPaymentsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addSupportPaymentsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addSupportPaymentsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the medical bills details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editMedicalBillsDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editMedicalBillsDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_MED_BILLS_Collection appInMedExpColl = (APP_IN_MED_BILLS_Collection) pageCollection
					.get("APP_IN_MED_BILLS_Collection");
			final APP_IN_MED_BILLS_Cargo appInMedExpCargo = appInMedExpColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInMedExpCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInMedExpCargo.getSeq_num());
			seqBean.setType(appInMedExpCargo.getMed_bill_type());
			if ("RE".equals(appInMedExpCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARMBD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::editMedicalBillsDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editMedicalBillsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.editMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicalBillsDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillsDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillsDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String type = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_MED_BILLS_Collection medExpColl = (APP_IN_MED_BILLS_Collection) pageCollection
					.get("APP_IN_MED_BILLS_Collection");
			final APP_IN_MED_BILLS_Cargo medExpCargo = medExpColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = medExpCargo.getIndv_seq_num();
			seqNum = medExpCargo.getSeq_num();
			type = medExpCargo.getMed_bill_type();

			APP_IN_MED_BILLS_Cargo beforerbCargo = (APP_IN_MED_BILLS_Cargo) beforeColl
					.get("APP_IN_MED_BILLS_Cargo");
			final ARMedicalBillDetailsBO medBillBO = new ARMedicalBillDetailsBO();

			if (beforerbCargo == null
					|| medBillBO.isDifferentMedicalBill(medExpCargo,
							beforerbCargo)) {

				medBillBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						medBillBO.getMessageList());
				beforerbCargo = new APP_IN_MED_BILLS_Cargo();
				beforerbCargo.setIndv_seq_num(indvSeqNum);
				beforerbCargo.setSeq_num(seqNum);
				beforerbCargo.setMed_bill_type(type);
				beforeColl.put("APP_IN_MED_BILLS_Cargo", beforerbCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			medBillBO.deleteMedExpRecords(indvSeqNum, seqNum, appNum);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.MEDICAL_EXPENSE };

			if (beforeColl != null) {
				int count = 0;
				APP_IN_MED_BILLS_Collection rb1Coll = null;
				APP_IN_MED_BILLS_Cargo rb1Cargo = null;
				rb1Coll = (APP_IN_MED_BILLS_Collection) beforeColl
						.get("APP_IN_MED_BILLS_Collection");

				if (rb1Coll != null && !rb1Coll.isEmpty()) {
					final int rbCollSize = rb1Coll.size();
					for (int i = 0; i < rbCollSize; i++) {
						rb1Cargo = rb1Coll.getCargo(i);
						if (rb1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& rb1Cargo.getSrc_app_ind().equals(
										AppConstants.RMC_NEW_RECORD_IND)) {
							count++;
						}
					}
				}

				if (count == 1) {
					// now we need to make that profile requirred
					final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
							.getProfile(rmcInPrflColl, indvSeqNum);
					rmcResponseProfileManager.makeAbsoluteNotRequired(
							responseArray, rmcResCargo, true);

				}
			}

			boolean rmcPrflMedExpNotRequired = false;
			// here we need to check we have no entrys in rmcPrfl for the job
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {

				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.MEDICAL_EXPENSE)) {
					rmcPrflMedExpNotRequired = true;

				}
			} else {

				rmcPrflMedExpNotRequired = true;
			}

			if (rmcPrflMedExpNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBD", driverArray, appNum);
			}

			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillsDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseMedicalBillsDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseMedicalBillsDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillsDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase medical bill changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseMedicalBillChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillChanges() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String utilityType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_SHLTC_Collection from pageCollection.
			final APP_IN_MED_BILLS_Collection utilColl = (APP_IN_MED_BILLS_Collection) pageCollection
					.get("APP_IN_MED_BILLS_Collection");
			final APP_IN_MED_BILLS_Cargo utilityCargo = utilColl.getCargo(0);

			// Get the results from the APP_IN_EMPL_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = utilityCargo.getIndv_seq_num();
			seqNum = utilityCargo.getSeq_num();
			utilityType = utilityCargo.getMed_bill_type();
			APP_IN_MED_BILLS_Cargo beforeUtilCargo = (APP_IN_MED_BILLS_Cargo) beforeColl
					.get("APP_IN_MED_BILLS_Cargo");

			final ARMedicalBillDetailsBO medBillBO = new ARMedicalBillDetailsBO();
			if (beforeUtilCargo == null
					|| medBillBO.isDifferentMedicalBill(utilityCargo,
							beforeUtilCargo)) {
				medBillBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						medBillBO.getMessageList());
				beforeUtilCargo = new APP_IN_MED_BILLS_Cargo();
				beforeUtilCargo.setIndv_seq_num(indvSeqNum);
				beforeUtilCargo.setSeq_num(seqNum);
				beforeUtilCargo.setMed_bill_type(utilityType);
				beforeColl.put("APP_IN_MED_BILLS_Cargo", beforeUtilCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			medBillBO.deleteMedExpRecords(indvSeqNum, seqNum, appNum);
			final String catUtilType = AppConstants.RMC_CAT_MEDICAL_EXP_PRFL;

			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catUtilType, utilityType);
			if (!appType.equals(String.valueOf(FwConstants.RMC_APP_TYPE))) {
				categorySelectionProfileManager.insertSequenceDetail(
						rmcSelPrfl, appNum, catUtilType,
						Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
						utilityType, (short) 2, 'N');
			}
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.MEDICAL_EXPENSE)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			if (appType.equals(String.valueOf(FwConstants.RMC_APP_TYPE))
					&& categorySelectionProfileManager.isEmpty(rmcSelPrfl,
							getUtilityTypes()) && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBD", driverArray, appNum);
			} else if (!checkHousingUtilityDetailsPageRequired(rmcSelPrfl,
					getUtilityTypes(), AppConstants.RMC_CAT_UT_EXP_PRFL)
					&& rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARMBD", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseMedicalBillChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseMedicalBillChanges");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseMedicalBillChanges", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.eraseMedicalBillChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the medical bill details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addMedicalBillDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addMedicalBillDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_housebills", null);
			request.put("shelterTypeExpense_housebills", null);
			request.put("firstName_utilitybills", null);
			request.put("utilityTypeExpense_utilitybills", null);
			request.put("firstName_roomandboard", null);
			request.put("firstName_impExpAdd", null);
			final String medicalBillType = request
					.get("medicalExpenseType_medicalbills") != null ? (String) request
							.get("medicalExpenseType_medicalbills")
							: FwConstants.EMPTY_STRING;
							final String medBillSeq = request.get("firstName_MedicalBill") != null ? (String) request
									.get("firstName_MedicalBill") : FwConstants.EMPTY_STRING;

									final ARMBDValidator medBillsBO = new ARMBDValidator();
									// validate selections

									if (medBillSeq == null
											|| medBillSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)
											|| medicalBillType
											.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
										medBillsBO.validateAdd();
										// add validation message and return
										request.put(FwConstants.MESSAGE_LIST,
												medBillsBO.getMessageList());
										txnBean.setPageCollection((Map) session
												.get(FwConstants.BEFORE_COLLECTION));
										return;
									}
									final String appNum = (String) session.get(AppConstants.APP_NUMBER);
									final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
									indivSeqBean.setIndivSeqNum(medBillSeq);
									indivSeqBean.setSeqNum(FwConstants.ZERO);
									indivSeqBean.setType(medicalBillType);
									indivSeqBean.setUserEndInd(FwConstants.ZERO);
									pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
									final String appType = (String) session
											.get(FwConstants.ACCESS_APPLICATION_TYPE);
									final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
											.get(AppConstants.RMB_RQST_COLLECTION);
									if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
										// Get RMB_RQST_Cargo for appNum
										final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
										if (rmbRqstCargo.getMed_bills_stat_ind() != null
												&& !rmbRqstCargo.getMed_bills_stat_ind().equals(
														FwConstants.YES)) {
											rmbRqstCargo.setMed_bills_stat_ind(FwConstants.YES);
											rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
											rmbColl.addCargo(rmbRqstCargo);
											rmbColl.persist(FwConstants.DAO);
										}
										// add to session
										session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
									}
									final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
											.get(AppConstants.RMC_IN_PRFL_MASTER);
									final RMC_IN_PRFL_Cargo cargo = rmcResponseProfileManager
											.getProfile(rmcInPrflColl, medBillSeq);
									cargo.setMed_exp_resp("R");
									session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);

									// set driver status
									final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
									driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARMBD", driver,
											appNum);
									driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS", driver,
											appNum);
									session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addMedicalBillDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addMedicalBillDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.addMedicalBillDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * PCR# 40362 RMB Changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException             subramu : This method loads Dependent Care detail page
	 */

	/**
	 * PCR# 40362 RMB Changes
	 *
	 * @param txnBean
	 * @throws javax.ejb.EJBException
	 *             subramu : This method loads Support Payments and Obligation
	 *             detail page
	 */

	public void loadSupportAndObligationExpensesDetails(
			final FwTransaction txnBean) throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadSupportAndObligationExpensesDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadSupportAndObligationExpensesDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			request.put("loopingQuestion", FwConstants.NO);

			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;

			Cp_App_In_Deduction_Collection cpAppInDeductionCollection;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile,
							getSupportPaymentsObligationType())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.PAYMENTS_AND_OBLIGATIONS);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile,
							getSupportPaymentsObligationType())) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.PAYMENTS_AND_OBLIGATIONS);
			}

			final ABChildSupportBO childSupportBO = new ABChildSupportBO();
			final short[] responseType = new short[] { IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT };
			SortedSet supPayOblgProfile = null;
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			if (!pageId.equals(previousPageId)) {
				supPayOblgProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseType);

				if (pageStatus != FwConstants.DRIVER_REQUIRED) {

					final Cp_App_In_Deduction_Collection cpAppInDeductionColl = childSupportBO
							.loadChildSupportDetails(appNumber);
					if (cpAppInDeductionColl != null
							&& !cpAppInDeductionColl.isEmpty()) {
						Cp_App_In_Deduction_Cargo rmcsupPayOblgCargo = null;
						final int newHouseCollSize = cpAppInDeductionColl
								.size();
						for (int i = 0; i < newHouseCollSize; i++) {
							rmcsupPayOblgCargo = cpAppInDeductionColl
									.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									supPayOblgProfile,
									null,
									null,
									Short.parseShort(rmcsupPayOblgCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcsupPayOblgCargo
													.getSeq_num()),
													AppConstants.PAYMENTS_AND_OBLIGATIONS);
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(supPayOblgProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(supPayOblgProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				supPayOblgProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("SupportPaymentObligation_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								supPayOblgProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(supPayOblgProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							supPayOblgProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ZERO)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						rmcResponseProfileManager
						.makeAddNew(
								IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(supPayOblgProfile, null,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(supPayOblgProfile, null,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(supPayOblgProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_HO_EXP_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}

				session.put("SupportPaymentObligation_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					supPayOblgProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(supPayOblgProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(supPayOblgProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			final String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			pageCollection.put("END_PAGE_IND",
					String.valueOf(categorySeqDetail.getUserEndSelectionInd()));

			cpAppInDeductionCollection = childSupportBO
					.loadIndividualChlidSupportDetails(appNumber, indvSeqNum,
							categorySeqNum);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 3,1 lines Commented Code in
			 * this block
			 */

			pageCollection.put("Cp_App_In_Deduction_Collection",
					cpAppInDeductionCollection);

			Cp_App_In_Deduction_Cargo cwwCargo = childSupportBO
					.splitPaymentRecord(cpAppInDeductionCollection,
							AppConstants.CWW_RECORD_IND);

			if (cwwCargo == null) {
				cwwCargo = new Cp_App_In_Deduction_Cargo();
			}
			pageCollection.put("SEC_SPOB",
					childSupportBO.settingDefaultValues(cwwCargo));

			Cp_App_In_Deduction_Cargo rmcInSupPayOblgCargo = childSupportBO
					.splitPaymentRecord(cpAppInDeductionCollection,
							AppConstants.RMC_NEW_RECORD_IND);

			if (rmcInSupPayOblgCargo != null) {
				pageCollection.put("FST_SPOB", childSupportBO
						.settingDefaultValues(rmcInSupPayOblgCargo));
			} else {
				rmcInSupPayOblgCargo = childSupportBO.splitPaymentRecord(
						cpAppInDeductionCollection,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcInSupPayOblgCargo != null) {
					pageCollection.put("FST_SPOB", childSupportBO
							.settingDefaultValues(rmcInSupPayOblgCargo));
				} else {
					rmcInSupPayOblgCargo = childSupportBO.splitPaymentRecord(
							cpAppInDeductionCollection,
							AppConstants.RMC_END_RECORD_IND);
					if (rmcInSupPayOblgCargo != null) {
						pageCollection.put("FST_SPOB", childSupportBO
								.settingDefaultValues(rmcInSupPayOblgCargo));
					} else {
						pageCollection.put("FST_SPOB",
								childSupportBO.settingDefaultValues(cwwCargo));
					}
				}
			}

			if (cpAppInDeductionCollection != null
					&& !cpAppInDeductionCollection.isEmpty()) {
				final Cp_App_In_Deduction_Cargo appSupPayOblgCargo = cpAppInDeductionCollection
						.getCargo(0);
				srcAppInd = appSupPayOblgCargo.getSrc_app_ind();
			}

			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = "E";
				} else if (indivSeqBean.getUserEndInd()
						.equals(FwConstants.ZERO)
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}

			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("SUPPORT_PAYMENT", categoryType);
			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);

			// set first name to page collection
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			// run component manager
			componentManager.getComponents("ARSOD", txnBean);
			request.remove("loopingQuestion");
			// Add the page collection to before collection
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadSupportAndObligationExpensesDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadSupportAndObligationExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadSupportAndObligationExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.loadSupportAndObligationExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * PCR# 40362 RMB Changes.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException             subramu : This method stores Support Payments and Obligation
	 *             detail page
	 */

	public void storeSupportAndObligationExpensesDetails(
			final FwTransaction txnBean) throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeSupportAndObligationExpensesDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeSupportAndObligationExpensesDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final List modifiedFields = (ArrayList) session
					.get(AppConstants.MODIFIED_FIELDS);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");
			session.remove("SupportPaymentObligation_IndSeqBean");
			final SortedSet supPayOblgProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);

			final ABChildSupportBO childSupportBO = new ABChildSupportBO();
			final Cp_App_In_Deduction_Collection rmcInSupPayObligCollection = (Cp_App_In_Deduction_Collection) pageCollection
					.get("Cp_App_In_Deduction_Collection");
			Cp_App_In_Deduction_Cargo rmcInSupPayObligCargo = rmcInSupPayObligCollection
					.getCargo(0);

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(supPayOblgProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final SupportPaymentsAndObligationsBO supportPaymentsOblgBO = new SupportPaymentsAndObligationsBO();

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess == null) {

				childSupportBO.validateChildSupportDetails(
						rmcInSupPayObligCargo, userEndInd, pageMode);

			}

			if (checkBackToMyAccessSelected(request)
					|| childSupportBO.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							childSupportBO.getMessageList());
				}

				pageCollection.put("SUPPORT_PAYMENT",
						beforeColl.get("SUPPORT_PAYMENT"));

				pageCollection.put("Cp_App_In_Deduction_Collection",
						beforeColl.get("Cp_App_In_Deduction_Collection"));

				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}

				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));

				if (beforeColl.containsKey("SEC_SPOB")) {
					pageCollection.put("SEC_SPOB", beforeColl.get("SEC_SPOB"));
				}
				pageCollection.put("FST_SPOB", rmcInSupPayObligCargo);
				return;

			}

			final Cp_App_In_Deduction_Collection beforeCollRmcSupPayObligColl = (Cp_App_In_Deduction_Collection) beforeColl
					.get("Cp_App_In_Deduction_Collection");
			Cp_App_In_Deduction_Cargo beforeSupPayObligCargo = null;

			rmcInSupPayObligCargo.setApp_num(appNumber);

			if (!(rmcInSupPayObligCargo.getExp_end_date() == null || rmcInSupPayObligCargo
					.getExp_end_date().trim().length() == 0)) {
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1,1 lines Commented Code
				 * in this block
				 */

				rmcInSupPayObligCargo.setExp_end_date(displayFormatter
						.getYYYYMMDDDate(rmcInSupPayObligCargo
								.getExp_end_date()));
			}

			if (rmcInSupPayObligCargo.getExp_amt() == null
					|| rmcInSupPayObligCargo.getExp_amt().trim().length() == 0) {
				rmcInSupPayObligCargo.setExp_amt(null);

			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean supPayObligDetailsUpdate = false;

			if (beforeCollRmcSupPayObligColl != null
					&& !beforeCollRmcSupPayObligColl.isEmpty()) {

				final int size = beforeCollRmcSupPayObligColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}

				beforeSupPayObligCargo = childSupportBO.splitPaymentRecord(
						beforeCollRmcSupPayObligColl, sourceAppIndicator);

				if (beforeSupPayObligCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {

					beforeSupPayObligCargo = childSupportBO.splitPaymentRecord(
							beforeCollRmcSupPayObligColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeSupPayObligCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeSupPayObligCargo != null) {
					rmcInSupPayObligCargo.setSrc_app_ind(beforeSupPayObligCargo
							.getSrc_app_ind());
					rmcInSupPayObligCargo
					.setIndv_seq_num(beforeSupPayObligCargo
							.getIndv_seq_num());
					rmcInSupPayObligCargo.setSeq_num(beforeSupPayObligCargo
							.getSeq_num());

					if (rmcInSupPayObligCargo.getExp_amt() != null
							&& rmcInSupPayObligCargo.getExp_amt()
							.equalsIgnoreCase(AppConstants.ON_FILE)) {

						if (modifiedFields.contains(rmcInSupPayObligCargo
								.getIndv_seq_num()
								+ "_"
								+ rmcInSupPayObligCargo.getSeq_num()
								+ "_"
								+ "exp_amt")) {
							modifiedFields.remove(rmcInSupPayObligCargo
									.getIndv_seq_num()
									+ "_"
									+ rmcInSupPayObligCargo.getSeq_num()
									+ "_"
									+ "exp_amt");
						}
					} else {
						if (!modifiedFields.contains(rmcInSupPayObligCargo
								.getIndv_seq_num()
								+ "_"
								+ rmcInSupPayObligCargo.getSeq_num()
								+ "_"
								+ "exp_amt")) {
							modifiedFields.add(rmcInSupPayObligCargo
									.getIndv_seq_num()
									+ "_"
									+ rmcInSupPayObligCargo.getSeq_num()
									+ "_"
									+ "exp_amt");
						}
					}

					if (rmcInSupPayObligCargo.getExp_amt() == null
							|| rmcInSupPayObligCargo.getExp_amt()
							.equalsIgnoreCase(AppConstants.ON_FILE)) {
						rmcInSupPayObligCargo.setExp_amt(beforeSupPayObligCargo
								.getExp_amt());
					}
					if (rmcInSupPayObligCargo.getExp_amt() == null) {
						rmcInSupPayObligCargo.setExp_amt(beforeSupPayObligCargo
								.getExp_amt());
					}

				}

				if ("E".equalsIgnoreCase(pageMode)) {
					rmcInSupPayObligCargo.setExp_amt(beforeSupPayObligCargo
							.getExp_amt());

				}

				final String changeEffDate = rmcInSupPayObligCargo
						.getExp_end_date();

				rmcInSupPayObligCargo.setSrc_app_ind(beforeSupPayObligCargo
						.getSrc_app_ind());
				rmcInSupPayObligCargo.setRec_cplt_ind(beforeSupPayObligCargo
						.getRec_cplt_ind());
				rmcInSupPayObligCargo = (Cp_App_In_Deduction_Cargo) isChanged(
						beforeSupPayObligCargo, rmcInSupPayObligCargo);

				rmcInSupPayObligCargo.setExp_end_date(changeEffDate);
				rmcInSupPayObligCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInSupPayObligCargo.setRowAction(recordInd);

				if (rmcInSupPayObligCargo.isDirty()) {
					if ("C".equalsIgnoreCase(pageMode)) {

						if (supportPaymentsOblgBO.hasMessages()) {
							request.put(FwConstants.MESSAGE_LIST,
									supportPaymentsOblgBO.getMessageList());
							pageCollection.put("SUPPORT_PAYMENT",
									beforeColl.get("SUPPORT_PAYMENT"));

							pageCollection.put(
									"Cp_App_In_Deduction_Collection",
									rmcInSupPayObligCollection);
							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));

							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));

							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_SPOB")) {
								pageCollection.put("SEC_SPOB",
										beforeColl.get("SEC_SPOB"));
							}
							pageCollection.put("FST_SPOB",
									rmcInSupPayObligCargo);
							return;
						}
					}
					supPayObligDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInSupPayObligCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = supportPaymentsOblgBO.getMaxSeqNumber(appNumber,
						indvSeqNum);
				seqNum = seqNum + 1;
				rmcInSupPayObligCargo.setSeq_num(String.valueOf(seqNum));
				/*
				 * VG SONAR Cleanup - 09/1/2015 Deleted 1,2 lines Commented Code
				 * in this block
				 */

				rmcInSupPayObligCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInSupPayObligCargo.setRowAction(recordInd);
				supPayObligDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(supPayOblgProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());

			}

			// now we need to check the flags
			if (supPayObligDetailsUpdate) {

				// check for the change effective date
				// if they did't fill this one raise validation

				if (!sourceAppIndicator.equals(AppConstants.RMC_NEW_RECORD_IND)) {

					if (rmcInSupPayObligCargo.getExp_end_date() != null) {
						supportPaymentsOblgBO.validateChangeEffectiveDate(
								rmcInSupPayObligCargo.getExp_end_date(),
								pageMode);
					}
					if (supportPaymentsOblgBO.hasMessages()) {
						final String reqWarningMsgs = (String) request
								.get(FwConstants.WARNING_MSG_DETAILS);
						if (!checkForWarningMesgs(reqWarningMsgs,
								supportPaymentsOblgBO.getMessageList())) {
							request.put(FwConstants.MESSAGE_LIST,
									supportPaymentsOblgBO.getMessageList());
							pageCollection.put("SUPPORT_PAYMENT",
									beforeColl.get("SUPPORT_PAYMENT"));

							pageCollection.put(
									"Cp_App_In_Deduction_Collection",
									rmcInSupPayObligCargo);

							pageCollection.put(AppConstants.FIRST_NAME,
									beforeColl.get(AppConstants.FIRST_NAME));

							if (request.get("loopingQuestion") != null) {
								request.put("loopingQuestion",
										request.get("loopingQuestion"));
							}
							pageCollection
							.put(FwConstants.PAGE_COMPONENT_LIST,
									beforeColl
									.get(FwConstants.PAGE_COMPONENT_LIST));
							pageCollection.put("PAGE_MODE",
									beforeColl.get("PAGE_MODE"));
							if (beforeColl.containsKey("SEC_SPOB")) {
								pageCollection.put("SEC_SPOB",
										beforeColl.get("SEC_SPOB"));
							}
							pageCollection.put("FST_SPOB",
									rmcInSupPayObligCargo);
							return;
						}
					}
				}
			}

			if (supPayObligDetailsUpdate) {

				supportPaymentsOblgBO
				.storeChildCareSupportPaymentsDetails(rmcInSupPayObligCollection);

			}

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& ((String) request.get("loopingQuestion"))
					.equals(FwConstants.YES)) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE
				categorySelectionProfileManager.insertSequenceDetail(
						supPayOblgProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARSOD",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.CHILD_SUPPORT_PAYMENT,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					supPayOblgProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(supPayOblgProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARSOD",
						driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXHS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(supPayOblgProfile);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeSupportAndObligationExpensesDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeSupportAndObligationExpensesDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeSupportAndObligationExpensesDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeSupportAndObligationExpensesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	// For PCR# 40362 Changes Starts - This Mehthod is added for
	// storeGatepostIntermediate Questions.

	/**
	 * Gets the updated session collection.
	 *
	 * @param driverStatus the driver status
	 * @param indicator the indicator
	 * @param requestIndvSeqNum the request indv seq num
	 * @param requestAppInPrflAfterCargo the request app in prfl after cargo
	 * @param sessionAppInPrflCargo the session app in prfl cargo
	 * @param questionsType the questions type
	 * @param arePeopleDirty the are people dirty
	 * @return the updated session collection
	 */
	private void getUpdatedSessionCollection(final int driverStatus,
			final int[] indicator, final String requestIndvSeqNum,
			final RMC_IN_PRFL_Cargo requestAppInPrflAfterCargo,
			final RMC_IN_PRFL_Cargo sessionAppInPrflCargo,
			final short questionsType, final boolean[] arePeopleDirty) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getUpdatedSessionCollection() - START");
		try {

			final String requestResponse = rmcResponseProfileManager
					.getProfileResponse(requestAppInPrflAfterCargo,
							questionsType);
			final String sessionResponse = rmcResponseProfileManager
					.getProfileResponse(sessionAppInPrflCargo, questionsType);
			if (rmcResponseProfileManager.determineDirtyStatus(requestResponse,
					sessionResponse, indicator, driverStatus)) {
				// Setting flag to true indicating people are dirty
				arePeopleDirty[0] = true;
				// setting the particular individual person to dirty
				arePeopleDirty[Integer.parseInt(requestIndvSeqNum)] = true;
				// Translating page coll app indiv profile values to session app
				// indv profile values
				rmcResponseProfileManager.translateProfileResponses(
						requestResponse, sessionResponse, driverStatus,
						questionsType, sessionAppInPrflCargo);
			}
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"getUpdatedSessionCollection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getUpdatedSessionCollection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Gets the people collection and update mapsfor rmc.
	 *
	 * @param rmcInPrflColl the rmc in prfl coll
	 * @param sessRmcInPrflColl the sess rmc in prfl coll
	 * @param pageCollection the page collection
	 * @param peopleHandler the people handler
	 * @param compID the comp id
	 * @param questionName the question name
	 * @param pageLoad the page load
	 * @param driverStatus the driver status
	 * @param getRelevant the get relevant
	 * @return the people collection and update mapsfor rmc
	 */
	public Map getPeopleCollectionAndUpdateMapsforRMC(
			final RMC_IN_PRFL_Collection rmcInPrflColl,
			final RMC_IN_PRFL_Collection sessRmcInPrflColl,
			final Map pageCollection, final PeopleHandler peopleHandler,
			final String compID, final short questionName,
			final boolean pageLoad, final int driverStatus,
			final boolean getRelevant) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getPeopleCollectionAndUpdateMapsforRMC() - START");
		try {
			// Declarations
			String indivSeqNum = null;
			INDIVIDUAL_Custom_Cargo indivCargo;
			INDIVIDUAL_Custom_Collection indivColl;
			final StringBuilder indivCollKey = new StringBuilder();
			indivCollKey.append(AppConstants.PEOPLE);
			indivCollKey.append(compID);

			// try to get a filtered list. If it doesn't exist, get the
			// peopleHandler getIndividuals
			if (pageCollection.get(indivCollKey.toString()) == null) {

				if (getRelevant) {
					indivColl = peopleHandler.getInHomeIndividuals();
				} else {
					indivColl = peopleHandler.getAllIndividuals();
				}
			} else {
				indivColl = (INDIVIDUAL_Custom_Collection) pageCollection
						.get(indivCollKey.toString());
			}

			// set the passed response map = new map
			final Map questionRespMap = new HashMap();

			// create an appInPrfl object
			RMC_IN_PRFL_Cargo rmcInPrflCargo = null;

			// get size of the collection
			final int indivCollSize = indivColl.size();

			// Define NoOneChecked = YES flags for the question
			String noOneChecked = FwConstants.YES;

			// Loop for each Cargo in the people collection (for each person)
			for (int i = 0; i < indivCollSize; i++) {
				// get the indivCargo
				indivCargo = (INDIVIDUAL_Custom_Cargo) indivColl.get(i);

				// get app_indiv_seq_num
				indivSeqNum = indivCargo.getIndv_seq_num();

				// Get the rmcInPrflCargo for this person
				rmcInPrflCargo = rmcResponseProfileManager.getProfile(
						rmcInPrflColl, indivSeqNum);

				// get the RMC_IN_PRFL Response for the given question from this
				// cargo
				String questionResp = rmcResponseProfileManager
						.getProfileResponse(rmcInPrflCargo, questionName);

				if (questionName == (short) 18) {
					for (int j = 0; j < sessRmcInPrflColl.size(); j++) {
						final RMC_IN_PRFL_Cargo cargo = sessRmcInPrflColl
								.getCargo(j);
						if (cargo.getIndv_seq_num().equals(indivSeqNum)) {
							final String status = rmcResponseProfileManager
									.getProfileResponse(cargo, questionName);
							if ("C".equals(status)
									&& questionResp.equals(FwConstants.YES)) {
								questionResp = "C";
							}
						}
					}
				}

				// for this question, add the person's response to a map
				questionRespMap.put(indivSeqNum, questionResp);

				if (pageLoad == true) {
					// for each question, set the noOneChecked flag
					// check if there is anything other than not required - if
					// so, change flag
					if (questionResp.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
							|| questionResp.charAt(0) == IRMCResponseProfileManager.STATUS_COMPLETE) {
						noOneChecked = FwConstants.NO;
					}
				}

			}// end for loop

			if (pageLoad == true) {
				if (driverStatus == FwConstants.DRIVER_REQUIRED) {
					noOneChecked = FwConstants.NO;
				}

				// get the NoOneChecked map from the pagecollection
				Map noOneCheckedMap = (Map) pageCollection
						.get(AppConstants.NO_ONE_CHECKED_MAP);
				if (noOneCheckedMap == null) {
					noOneCheckedMap = new HashMap();
				}

				// update the noOneCheckedMap and re-add it to the page coll
				final StringBuilder noOneCheckedString = new StringBuilder();
				noOneCheckedString.append(AppConstants.NO_ONE_CHECKED);
				noOneCheckedString.append(compID);
				noOneCheckedMap
				.put(noOneCheckedString.toString(), noOneChecked);
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);
			}

			// Store all maps in page collection
			final StringBuilder respMapString = new StringBuilder();
			respMapString.append(AppConstants.RESP_MAP);
			respMapString.append(compID);
			pageCollection.put(respMapString.toString(), questionRespMap);

			// store people collection in page collection
			final StringBuilder peopleString = new StringBuilder();
			peopleString.append(AppConstants.PEOPLE);
			peopleString.append(compID);
			pageCollection.put(peopleString.toString(), indivColl);
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.getPeopleCollectionAndUpdateMapsforRMC() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return pageCollection;
			// exit
		} catch (final FwException fe) {
			fe.setParameterText(compID);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"getPeopleCollectionAndUpdateMaps", e);
			fe.setParameterText(compID);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

	}

	// For PCR# 40362 Changes Ends

	/**
	 * Creates the and load arxhd response maps to page collection.
	 *
	 * @param appInPrflColl the app in prfl coll
	 * @param pageCollection the page collection
	 * @param peopleHandler the people handler
	 * @param pageLoad the page load
	 * @param driverStatus the driver status
	 * @return Map
	 */
	private Map createAndLoadARXHDResponseMapsToPageCollection(
			final RMC_IN_PRFL_Collection appInPrflColl,
			final Map pageCollection, final PeopleHandler peopleHandler,
			final boolean pageLoad, final int driverStatus) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.createAndLoadARXHDResponseMapsToPageCollection() - START");
		try {
			getPeopleCollectionAndUpdateMapsARXHD(appInPrflColl,
					pageCollection, peopleHandler, "56",
					IRMCResponseProfileManager.HEAD_OF_HOUSE, pageLoad,
					driverStatus, false);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.createAndLoadARXHDResponseMapsToPageCollection() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return pageCollection;
			// exit
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"createAndLoadABHHQResponseMapsToPageCollection", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Gets the people collection and update maps arxhd.
	 *
	 * @param appInPrflColl the app in prfl coll
	 * @param pageCollection the page collection
	 * @param peopleHandler the people handler
	 * @param compID the comp id
	 * @param questionName the question name
	 * @param pageLoad the page load
	 * @param driverStatus the driver status
	 * @param getRelevant the get relevant
	 * @return the people collection and update maps arxhd
	 */
	/*
	 * This method gets the people collection for a questions page, populates
	 * maps for AFBIndividualsTags and creates a map of noOneChecked strings -
	 * padmana
	 */
	public Map getPeopleCollectionAndUpdateMapsARXHD(
			final RMC_IN_PRFL_Collection appInPrflColl,
			final Map pageCollection, final PeopleHandler peopleHandler,
			final String compID, final short questionName,
			final boolean pageLoad, final int driverStatus,
			final boolean getRelevant) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getPeopleCollectionAndUpdateMapsARXHD() - START");
		try {
			// Declarations
			String indivSeqNum = null;
			INDIVIDUAL_Custom_Cargo indivCargo;
			INDIVIDUAL_Custom_Collection indivColl;
			final StringBuilder indivCollKey = new StringBuilder();
			indivCollKey.append(AppConstants.PEOPLE);
			indivCollKey.append(compID);

			// try to get a filtered list. If it doesn't exist, get the
			// peopleHandler getIndividuals

			if (pageCollection.get(indivCollKey.toString()) == null) {
				indivColl = peopleHandler.getAllIndividuals();
				if (getRelevant) {
					indivColl = peopleHandler.getRelevantIndividuals();
				} else {
					indivColl = peopleHandler.getAllIndividuals();
				}
			} else {
				indivColl = (INDIVIDUAL_Custom_Collection) pageCollection
						.get(indivCollKey.toString());
			}

			// set the passed response map = new map
			final Map questionRespMap = new HashMap();

			// create an appInPrfl object
			RMC_IN_PRFL_Cargo appInPrflCargo = null;

			// get size of the collection
			final int indivCollSize = indivColl.size();

			// Define NoOneChecked = YES flags for the question
			String noOneChecked = FwConstants.YES;

			// Loop for each Cargo in the people collection (for each person)
			for (int i = 0; i < indivCollSize; i++) {
				// get the indivCargo
				indivCargo = (INDIVIDUAL_Custom_Cargo) indivColl.get(i);

				// get app_indiv_seq_num
				indivSeqNum = indivCargo.getIndv_seq_num();

				// Get the appInPrflCargo for this person
				appInPrflCargo = rmcResponseProfileManager.getProfile(
						appInPrflColl, indivSeqNum);

				// get the AIP Response for the given question from this cargo
				final String questionResp = rmcResponseProfileManager
						.getProfileResponse(appInPrflCargo, questionName);

				// for this question, add the person's response to a map
				questionRespMap.put(indivSeqNum, questionResp);

				if (pageLoad == true) {
					// for each question, set the noOneChecked flag
					// check if there is anything other than not required - if
					// so, change flag
					if (questionResp.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
						noOneChecked = FwConstants.NO;
					}
				}

			}// end for loop

			if (pageLoad == true) {
				if (driverStatus == FwConstants.DRIVER_REQUIRED) {
					noOneChecked = FwConstants.NO;
				}

				// get the NoOneChecked map from the pagecollection
				Map noOneCheckedMap = (Map) pageCollection
						.get(AppConstants.NO_ONE_CHECKED_MAP);
				if (noOneCheckedMap == null) {
					noOneCheckedMap = new HashMap();
				}

				// update the noOneCheckedMap and re-add it to the page coll
				final StringBuilder noOneCheckedString = new StringBuilder();
				noOneCheckedString.append(AppConstants.NO_ONE_CHECKED);
				noOneCheckedString.append(compID);
				noOneCheckedMap
				.put(noOneCheckedString.toString(), noOneChecked);
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);
			}

			// Store all maps in page collection
			final StringBuilder respMapString = new StringBuilder();
			respMapString.append(AppConstants.RESP_MAP);
			respMapString.append(compID);
			pageCollection.put(respMapString.toString(), questionRespMap);

			// store people collection in page collection
			final StringBuilder peopleString = new StringBuilder();
			peopleString.append(AppConstants.PEOPLE);
			peopleString.append(compID);
			pageCollection.put(peopleString.toString(), indivColl);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean.getPeopleCollectionAndUpdateMapsARXHD() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return pageCollection;
			// exit
		} catch (final FwException fe) {
			fe.setParameterText(compID);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"getPeopleCollectionAndUpdateMaps", e);
			fe.setParameterText(compID);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Gets the matching cargo.
	 *
	 * @param appInJntOwnColl the app in jnt own coll
	 * @param appInJntBeforeCargo the app in jnt before cargo
	 * @return the matching cargo
	 */
	public APP_IN_JNT_OWN_Cargo getMatchingCargo(
			final APP_IN_JNT_OWN_Collection appInJntOwnColl,
			final APP_IN_JNT_OWN_Cargo appInJntBeforeCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getMatchingCargo() - START");
		if (appInJntOwnColl == null || appInJntOwnColl.isEmpty()) {
			return null;
		}

		final int appInJntCollSize = appInJntOwnColl.size();
		APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
		String otsdInd = appInJntBeforeCargo.getOtsd_ind();
		final String jntIndvSeqNum = appInJntBeforeCargo.getJnt_indv_seq_num();

		if (otsdInd == null) {
			otsdInd = FwConstants.SPACE;
		}

		String otsdJntInd = null;
		if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
			for (int i = 0; i < appInJntCollSize; i++) {
				appInJntOwnCargo = appInJntOwnColl.getCargo(i);
				otsdJntInd = appInJntOwnCargo.getOtsd_ind();
				if (otsdJntInd == null) {
					otsdJntInd = FwConstants.SPACE;
				}
				if ((appInJntOwnCargo.getJnt_indv_seq_num() == null
						&& jntIndvSeqNum == null || appInJntOwnCargo
						.getJnt_indv_seq_num() != null
						&& appInJntOwnCargo.getJnt_indv_seq_num().equals(
								jntIndvSeqNum))
								&& otsdInd.equalsIgnoreCase(otsdJntInd)) {
					return appInJntOwnCargo;
				}

			}
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getMatchingCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	/**
	 * Gets the SNAP expenses.
	 *
	 * @param txnBean the txn bean
	 */
	public void getSNAPExpenses(final FwTransaction txnBean) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getSNAPExpenses() - START");
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::getSNAPExpenses:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final ABHousingBillsBO housingBillsBO = new ABHousingBillsBO();
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;
			CP_APP_SNAP_EXP_Collection cpAppSnapExpColl = new CP_APP_SNAP_EXP_Collection();
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, pageId,
					driverArray);


			cpAppSnapExpColl = housingBillsBO.loadUtilityExpenses(appNumber);
			pageCollection.put("STANDARD_UTILITY_EXPENSES_Collection",
					cpAppSnapExpColl);

			CP_APP_SNAP_EXP_Cargo cwwSUCargo = housingBillsBO.splitSUExplColl(
					cpAppSnapExpColl, AppConstants.CWW_RECORD_IND);

			if (cwwSUCargo == null) {
				cwwSUCargo = new CP_APP_SNAP_EXP_Cargo();
			}

			pageCollection.put("SEC_SUEXP",
					housingBillsBO.settingDefaultValues(cwwSUCargo));

			CP_APP_SNAP_EXP_Cargo rmcSUECargo = housingBillsBO.splitSUExplColl(
					cpAppSnapExpColl, AppConstants.RMC_NEW_RECORD_IND);

			if (rmcSUECargo != null) {
				pageCollection.put("FST_SUEXP",
						housingBillsBO.settingDefaultValues(rmcSUECargo));
			} else {
				rmcSUECargo = housingBillsBO.splitSUExplColl(cpAppSnapExpColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcSUECargo != null) {
					pageCollection.put("FST_SUEXP",
							housingBillsBO.settingDefaultValues(rmcSUECargo));
				} else {
					pageCollection.put("FST_SUEXP",
							housingBillsBO.settingDefaultValues(cwwSUCargo));
				}
				/*
				 * VG SONAR Cleanup - 09/1/2015 Changed Commented code block to
				 * javadoc
				 */
				/**
				 * else { rmcSUECargo =
				 * HousingBillsBO.splitSUExplColl(cpAppSnapExpColl,
				 * AppConstants.RMC_END_RECORD_IND); if (rmcSUECargo != null) {
				 * pageCollection.put("FST_SUEXP", HousingBillsBO
				 * .settingDefaultValues(rmcSUECargo)); } else {
				 * pageCollection.put("FST_SUEXP", HousingBillsBO
				 * .settingDefaultValues(rmcSUECargo));
				 *
				 * } }
				 */
			}

			if (cpAppSnapExpColl != null && !cpAppSnapExpColl.isEmpty()) {
				final CP_APP_SNAP_EXP_Cargo appInDCExpCargo = cpAppSnapExpColl
						.getCargo(0);
				srcAppInd = appInDCExpCargo.getSrc_app_ind();
			}

			if ("CW".equalsIgnoreCase(srcAppInd)
					|| "RM".equalsIgnoreCase(srcAppInd)) {
				pageMode = "C";
			} else {
				pageMode = FwConstants.NO;
			}

			pageCollection.put("PAGE_MODE", pageMode);
			/*
			 * VG SONAR Cleanup - 09/1/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			pageCollection.put("CP_APP_SNAP_EXP_Collection", cpAppSnapExpColl);
			// Add the page collection to before collection
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			request.get(FwConstants.CURRENT_PAGE_ID);

			// Assingning before collection from before collection if exists
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			txnBean.setPageCollection(pageCollection);
			log(ILog.INFO, "RMCHousingExpenseEJBBean::getSNAPExpenses:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getSNAPExpenses");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"getSNAPExpenses", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getSNAPExpenses() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store snap expenses.
	 *
	 * @param txnBean the txn bean
	 */
	public void storeSNAPExpenses(final FwTransaction txnBean) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.storeSNAPExpenses() - START");
		try {
			log(ILog.INFO, "RMCHousingExpenseEJBBean::storeSNAPExpenses:Start");
			String appNumber = FwConstants.EMPTY_STRING;

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			FwMessageList validateInfo = null;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			appNumber = (String) session.get(AppConstants.APP_NUMBER);

			final String pageMode = (String) beforeColl.get("PAGE_MODE");
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final ABHousingBillsBO housingBillsBO = new ABHousingBillsBO();
			final CP_APP_SNAP_EXP_Collection cpAppSnapExpColl = (CP_APP_SNAP_EXP_Collection) pageCollection
					.get("CP_APP_SNAP_EXP_Collection");
			CP_APP_SNAP_EXP_Cargo cpAppSnapExpCargo = cpAppSnapExpColl
					.getCargo(0);
			cpAppSnapExpCargo.setApp_num(appNumber);

			final CP_APP_SNAP_EXP_Collection cpAppSnapExpBeforeColl = (CP_APP_SNAP_EXP_Collection) beforeColl
					.get("CP_APP_SNAP_EXP_Collection");
			CP_APP_SNAP_EXP_Cargo cpAppSnapExpBeforeCargo = new CP_APP_SNAP_EXP_Cargo();

			if (cpAppSnapExpBeforeColl != null
					&& !cpAppSnapExpBeforeColl.isEmpty()
					&& cpAppSnapExpBeforeColl.getCargo(0) != null) {
				cpAppSnapExpBeforeCargo = cpAppSnapExpBeforeColl.getCargo(0);
				cpAppSnapExpBeforeCargo.setApp_num(appNumber);
			}
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			validateInfo = housingBillsBO.validateUtilityExpense(
					cpAppSnapExpColl, cpAppSnapExpCargo, peopleHandler);
			if (validateInfo != null && validateInfo.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("CP_APP_SNAP_EXP_Collection",
						cpAppSnapExpColl);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				pageCollection.put("FST_SUEXP", cpAppSnapExpCargo);
				if (beforeColl.containsKey("SEC_SUEXP")) {
					pageCollection
					.put("SEC_SUEXP", beforeColl.get("SEC_SUEXP"));
				}
				return;
			}
			String sourceAppIndicator = FwConstants.EMPTY_STRING;
			String recordInd = null;
			if ("C".equalsIgnoreCase(pageMode)) {
				sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
			} else {
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
			}

			if (cpAppSnapExpBeforeColl != null
					&& !cpAppSnapExpBeforeColl.isEmpty()) {
				final int size = cpAppSnapExpBeforeColl.size();
				cpAppSnapExpBeforeCargo = housingBillsBO.splitSUExplColl(
						cpAppSnapExpBeforeColl, sourceAppIndicator);
				if ("C".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				}
				if (cpAppSnapExpBeforeCargo == null
						&& sourceAppIndicator
						.equals(AppConstants.RMC_MODIFIED_RECORD_IND)) {
					cpAppSnapExpBeforeCargo = housingBillsBO
							.splitSUExplColl(cpAppSnapExpBeforeColl,
									AppConstants.CWW_RECORD_IND);
				}
				if (size > 1) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& cpAppSnapExpBeforeCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				cpAppSnapExpCargo.setSrc_app_ind(sourceAppIndicator);

				cpAppSnapExpCargo = (CP_APP_SNAP_EXP_Cargo) isChanged(
						cpAppSnapExpBeforeCargo, cpAppSnapExpCargo);
				if (cpAppSnapExpCargo.isDirty()) {
					cpAppSnapExpCargo.setRowAction(recordInd);
				}
			} else {
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				cpAppSnapExpCargo.setRowAction(FwConstants.ROWACTION_INSERT);
				if (cpAppSnapExpCargo.getHeating_cooling_expense_fa_ind() == null) {
					cpAppSnapExpCargo
					.setHeating_cooling_expense_fa_ind(FwConstants.SPACE);
				}
				if (cpAppSnapExpCargo.getSrc_app_ind() == null) {
					cpAppSnapExpCargo.setSrc_app_ind(sourceAppIndicator);
				}
				if (cpAppSnapExpCargo.getActual_utility_exp_ind() == null) {
					cpAppSnapExpCargo
					.setActual_utility_exp_ind(FwConstants.SPACE);
				}
				if (cpAppSnapExpCargo.getOther_snap_apply_pay_ind() == null) {
					cpAppSnapExpCargo
					.setOther_snap_apply_pay_ind(FwConstants.SPACE);
				}

				if (cpAppSnapExpCargo.getActual_shelter_expense_ind() == null) {
					cpAppSnapExpCargo
					.setActual_shelter_expense_ind(FwConstants.SPACE);
				}
			}
			if (cpAppSnapExpCargo.getExpense_seq_num() == null) {
				cpAppSnapExpCargo.setExpense_seq_num(FwConstants.ZERO);
			}
			if (cpAppSnapExpCargo.getRec_cplt_ind() == null
					|| FwConstants.EMPTY_STRING.equals(cpAppSnapExpCargo
							.getRec_cplt_ind().trim())) {
				cpAppSnapExpCargo.setRec_cplt_ind(FwConstants.ONE);
			}
			if (cpAppSnapExpCargo != null
					&& cpAppSnapExpCargo.getMove_into_shelter_dt() != null
					&& cpAppSnapExpCargo.getMove_into_shelter_dt().trim()
					.length() != 0) {

				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = cpAppSnapExpCargo
						.getMove_into_shelter_dt();
				if (sAppDate.length() == 10 && sAppDate.charAt(2) == '/') {
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					cpAppSnapExpCargo.setMove_into_shelter_dt(dateConverter
							.toString());
				}
			}

			cpAppSnapExpCargo.setApp_num((String) session
					.get(AppConstants.APP_NUMBER));
			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			housingBillsBO.storeUtilityExpense(cpAppSnapExpColl); // CALL
			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, (String) session.get(AppConstants.APP_NUMBER));
			log(ILog.INFO, "RMCHousingExpenseEJBBean::storeSNAPExpenses:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeSNAPExpenses");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeSNAPExpenses", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.storeSNAPExpenses() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Gets the CW matching cargo.
	 *
	 * @param appInJntOwnColl the app in jnt own coll
	 * @param appInJntCWCargo the app in jnt cw cargo
	 * @return the CW matching cargo
	 */
	public APP_IN_JNT_OWN_Cargo getCWMatchingCargo(
			final APP_IN_JNT_OWN_Collection appInJntOwnColl,
			final APP_IN_JNT_OWN_Cargo appInJntCWCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCHousingExpenseEJBBean.getCWMatchingCargo() - START");
		if (appInJntOwnColl == null || appInJntOwnColl.isEmpty()) {
			return null;
		}
		final int appInJntCollSize = appInJntOwnColl.size();
		APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
		String otsdInd = appInJntCWCargo.getOtsd_ind();
		String bFirstName = appInJntCWCargo.getJnt_own_fst_nam();
		String bLastName = appInJntCWCargo.getJnt_own_last_nam();
		if (bFirstName == null) {
			bFirstName = FwConstants.SPACE;
		}
		if (bLastName == null) {
			bLastName = FwConstants.SPACE;
		}
		if (otsdInd == null) {
			otsdInd = FwConstants.SPACE;
		}
		String otsdJntInd = null;

		if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
			for (int i = 0; i < appInJntCollSize; i++) {
				appInJntOwnCargo = appInJntOwnColl.getCargo(i);
				otsdJntInd = appInJntOwnCargo.getOtsd_ind();
				if (otsdJntInd == null) {
					otsdJntInd = FwConstants.SPACE;
				}
				if (appInJntCWCargo.getJnt_indv_seq_num().equals(
						appInJntOwnCargo.getJnt_indv_seq_num())) {
					return appInJntOwnCargo;

				}
			}
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.getCWMatchingCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	/**
	 * Load income tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – start
	public void loadIncomeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.loadIncomeTaxDeductionDetails - START");
		try {

			log(ILog.DEBUG,
					"RMCHousingExpenseEJBBean.loadIncomeTaxDeductionDetails - START");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			CP_APP_IN_INCOME_TAX_DED_Collection rmcIncomeTaxColl;
			String pageMode = null;
			String indvSeqNum = null;
			String seqNum=null;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final ABIncomeTaxDeductionBO incomeTaxDeductionBO = new ABIncomeTaxDeductionBO();
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			final Map incomeTaxTypeMap = new HashMap();
			incomeTaxTypeMap.put(AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB,
					AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB);

			/* build category selection profile */
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			
			if(categorySelectionProfile == null){
				categorySelectionProfile = categorySelectionProfileManager.loadCategoryChangeSelectionProfile(appNumber);	
			}
			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, incomeTaxTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, incomeTaxTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}
			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final short[] responseNewType = new short[] { IRMCResponseProfileManager.TAX_DEDUCT_RESP };
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			SortedSet incomeTaxProfile = null;
			if (!previousPageId.equals(currentPageID)) {
				incomeTaxProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseNewType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final CP_APP_IN_INCOME_TAX_DED_Collection incomeTaxColl = incomeTaxDeductionBO
							.loadIncomeTaxDetails(appNumber);
					final CP_APP_IN_INCOME_TAX_DED_Collection newIncomeTaxColl = incomeTaxDeductionBO
							.splitTaxDeductColl(incomeTaxColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (newIncomeTaxColl != null && !newIncomeTaxColl.isEmpty()) {
						CP_APP_IN_INCOME_TAX_DED_Cargo rmcIncomeTaxCargo = null;
						final int newIncomeTaxCollSize = newIncomeTaxColl
								.size();
						for (int i = 0; i < newIncomeTaxCollSize; i++) {
							rmcIncomeTaxCargo = newIncomeTaxColl.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									incomeTaxProfile,
									null,
									null,
									Short.parseShort(rmcIncomeTaxCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcIncomeTaxCargo.getSeq_num()),
											AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB);
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					/* set the current record indicator to the first one */
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(incomeTaxProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					/*
					 * set the current record indicator to the end of the detail
					 * bean
					 */
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(incomeTaxProfile);
				}
				/* we need to remove the vallues from the session */
				session.remove(FwConstants.BEFORE_COLLECTION);

			} else {
				/*
				 * catAddNewProfile get it from the before collection - Holding
				 * the profile for looping the page
				 */
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				incomeTaxProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get(AppConstants.INCTAXDEDUCTION_INDSEQBEAN);
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								incomeTaxProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}

					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(incomeTaxProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							incomeTaxProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ONE)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						Boolean flag = incomeTaxDeductionBO.getRmcChgSelPrfl(appNumber, indivSeqBean.getIndivSeqNum(), indivSeqBean.getSeqNum(), AppConstants.RMC_CAT_OTHER_BILL_PRFL, indivSeqBean.getType());
						if(flag){
						categorySelectionProfileManager
						.insertSequenceDetail(incomeTaxProfile, appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						}
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(incomeTaxProfile, null,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(incomeTaxProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put(AppConstants.INCTAXDEDUCTION_INDSEQBEAN,
						indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					incomeTaxProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(incomeTaxProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(incomeTaxProfile);
			}

			categorySeqDetail.getCategoryType();
			Long.toString(categorySeqDetail.getCategorySequence());
			indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			seqNum = Long.toString(categorySeqDetail.getCategorySequence());

			rmcIncomeTaxColl = incomeTaxDeductionBO.loadTaxDedResponse(
					appNumber, indvSeqNum, seqNum);
			pageCollection.put(
					AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
					rmcIncomeTaxColl);
			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = AppConstants.REPORT_END_MODE;
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else {
					if (addnewPerson.equalsIgnoreCase(FwConstants.YES)) {
						pageMode = FwConstants.NO;
					} else {
						pageMode = AppConstants.REPORT_CHANGE_MODE;
					}
				}
			} else {
				if (addnewPerson.equalsIgnoreCase(FwConstants.YES)) {
					pageMode = FwConstants.NO;
				} else {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				}
			}

			CP_APP_IN_INCOME_TAX_DED_Cargo cwwIncomeTaxCargo = incomeTaxDeductionBO
					.splitTaxDeduColl(rmcIncomeTaxColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwIncomeTaxCargo == null) {

				cwwIncomeTaxCargo = new CP_APP_IN_INCOME_TAX_DED_Cargo();
				addnewPerson = FwConstants.YES;
				pageMode = FwConstants.NO;
			} else {
				if (categorySeqDetail.getUserEndSelectionInd() == 1) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				}
				addnewPerson = FwConstants.NO;
			}

			pageCollection.put(AppConstants.INC_TAX_DEDUCTION_CHANGE,
					cwwIncomeTaxCargo);
			CP_APP_IN_INCOME_TAX_DED_Cargo rmcIncCargo = incomeTaxDeductionBO
					.splitTaxDeduColl(rmcIncomeTaxColl,
							AppConstants.RMC_NEW_RECORD_IND);

			if (rmcIncCargo != null) {

				pageCollection.put(AppConstants.INCOME_TAX_DEDUCTION_NEW,
						incomeTaxDeductionBO.settingDefaultValues(rmcIncCargo));
			} else {

				rmcIncCargo = incomeTaxDeductionBO.splitTaxDeduColl(
						rmcIncomeTaxColl, AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcIncCargo != null) {

					pageCollection.put(AppConstants.INCOME_TAX_DEDUCTION_NEW,
							incomeTaxDeductionBO
							.settingDefaultValues(rmcIncCargo));
				} else {
					rmcIncCargo = incomeTaxDeductionBO.splitTaxDeduColl(
							rmcIncomeTaxColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcIncCargo != null) {
						pageCollection.put(
								AppConstants.INCOME_TAX_DEDUCTION_NEW,
								incomeTaxDeductionBO
								.settingDefaultValues(rmcIncCargo));
					} else {

						pageCollection
						.put(AppConstants.INCOME_TAX_DEDUCTION_NEW,
								incomeTaxDeductionBO
								.settingDefaultValues(cwwIncomeTaxCargo));
					}

				}
			}
			if (rmcIncomeTaxColl != null && !rmcIncomeTaxColl.isEmpty()) {
				final CP_APP_IN_INCOME_TAX_DED_Cargo rmcIncoTaxCargo = rmcIncomeTaxColl
						.getCargo(0);
				rmcIncoTaxCargo.getSrc_app_ind();
			}

			pageCollection.put(AppConstants.PAGE_MODE, pageMode);
			request.put(AppConstants.PAGE_MODE, pageMode);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("INDIVIDUAL_Custom_Custom_Collection",
					indivCustCol);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			componentManager.getComponents(currentPageID, txnBean);
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);
			txnBean.setPageCollection(pageCollection);
			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforeColl);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadIncomeTaxDeductionDetails:END");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadIncomeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadIncomeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.loadIncomeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store income tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – start (H)
	public void storeIncomeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.storeIncomeTaxDeductionDetails() - START");
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		String currentPageID = null;
		String indvSeqNum = null;
		String seqNum = null;
		try {


			currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			/* get driver array */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			/* build category selection profile */
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			/* get the BeforeCollection */
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final SortedSet incomeTaxProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforePageColl
					.get(AppConstants.PAGE_MODE);
			beforePageColl.get(AppConstants.FIRST_NAME);
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final CP_APP_IN_INCOME_TAX_DED_Collection rmcIncTaxColl = (CP_APP_IN_INCOME_TAX_DED_Collection) pageCollection
					.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION);
			CP_APP_IN_INCOME_TAX_DED_Cargo rmcIncTaxCargo = rmcIncTaxColl
					.getCargo(0);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(incomeTaxProfile);

			categorySeqDetailBean.getUserEndSelectionInd();

			final ABIncomeTaxDeductionBO incomeTaxDeductBo = new ABIncomeTaxDeductionBO();
			final ARITDValidator aritdValidator = new ARITDValidator();

			final CP_APP_IN_INCOME_TAX_DED_Collection beforeCollRmcIncTaxColl = (CP_APP_IN_INCOME_TAX_DED_Collection) beforePageColl
					.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION);
			CP_APP_IN_INCOME_TAX_DED_Cargo beforeIncomeTaxCargo = null;

			indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());

			String sourceAppIndicator = null;
			String recordInd = null;

			boolean taxDeductDetailsUpdate = false;

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (backToMyAccess == null) {
				if (pageMode.equals(AppConstants.REPORT_CHANGE_MODE)
						|| pageMode.equals(FwConstants.NO)) {

					aritdValidator
					.validateTaxDeductionDetailsCheck(rmcIncTaxCargo);
				}
				if (pageMode.equals(AppConstants.REPORT_END_MODE)) {
					aritdValidator.validateEndDate(rmcIncTaxCargo);
				}

			}

			if (checkBackToMyAccessSelected(request)
					|| aritdValidator.hasMessages()) {
				if (backToMyAccess == null) {

					request.put(FwConstants.MESSAGE_LIST,
							aritdValidator.getMessageList());

				}

				pageCollection.put("INDIVIDUAL_Custom_Custom_Collection",
						beforePageColl
						.get("INDIVIDUAL_Custom_Custom_Collection"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put(
						AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION,
						rmcIncTaxColl);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));
				pageCollection.put(AppConstants.PAGE_MODE,
						beforePageColl.get(AppConstants.PAGE_MODE));
				pageCollection.put(AppConstants.INCOME_TAX_DEDUCTION_NEW,
						rmcIncTaxCargo);
				if (beforePageColl
						.containsKey(AppConstants.INC_TAX_DEDUCTION_CHANGE)) {
					pageCollection
					.put(AppConstants.INC_TAX_DEDUCTION_CHANGE,
							beforePageColl
							.get(AppConstants.INC_TAX_DEDUCTION_CHANGE));
				}

				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));

				return;
			}

			if (rmcIncTaxCargo.getAlimony_exp() == null
					|| rmcIncTaxCargo.getAlimony_exp().trim().length() == 0) {
				rmcIncTaxCargo.setAlimony_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getBusiness_exp() == null
					|| rmcIncTaxCargo.getBusiness_exp().trim().length() == 0) {
				rmcIncTaxCargo.setBusiness_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getDeductible_self_exp() == null
					|| rmcIncTaxCargo.getDeductible_self_exp().trim().length() == 0) {
				rmcIncTaxCargo.setDeductible_self_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getDomestic_exp() == null
					|| rmcIncTaxCargo.getDomestic_exp().trim().length() == 0) {
				rmcIncTaxCargo.setDomestic_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getEducator_exp() == null
					|| rmcIncTaxCargo.getEducator_exp().trim().length() == 0) {
				rmcIncTaxCargo.setEducator_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getHealth_saving_exp() == null
					|| rmcIncTaxCargo.getHealth_saving_exp().trim().length() == 0) {
				rmcIncTaxCargo.setHealth_saving_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getIra_exp() == null
					|| rmcIncTaxCargo.getIra_exp().trim().length() == 0) {
				rmcIncTaxCargo.setIra_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getMoving_exp() == null
					|| rmcIncTaxCargo.getMoving_exp().trim().length() == 0) {
				rmcIncTaxCargo.setMoving_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getPenalty_exp() == null
					|| rmcIncTaxCargo.getPenalty_exp().trim().length() == 0) {
				rmcIncTaxCargo.setPenalty_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getSelf_health_exp() == null
					|| rmcIncTaxCargo.getSelf_health_exp().trim().length() == 0) {
				rmcIncTaxCargo.setSelf_health_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getSelf_sep_exp() == null
					|| rmcIncTaxCargo.getSelf_sep_exp().trim().length() == 0) {
				rmcIncTaxCargo.setSelf_sep_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getStudent_loan_exp() == null
					|| rmcIncTaxCargo.getStudent_loan_exp().trim().length() == 0) {
				rmcIncTaxCargo.setStudent_loan_exp(FwConstants.SPACE);
			}
			if (rmcIncTaxCargo.getTution_exp() == null
					|| rmcIncTaxCargo.getTution_exp().trim().length() == 0) {
				rmcIncTaxCargo.setTution_exp(FwConstants.SPACE);
			}

			if (rmcIncTaxCargo.getEnd_date() == null
					|| rmcIncTaxCargo.getEnd_date().trim().length() == 0
					|| rmcIncTaxCargo.getEnd_date().equalsIgnoreCase(
							AppConstants.HIGH_TIMESTAMP)
							|| rmcIncTaxCargo.getEnd_date().equalsIgnoreCase(
									AppConstants.HIGH_TIMESTAMP1)) {
				rmcIncTaxCargo.setEnd_date(AppConstants.HIGH_DATE);
			} else {
				String sDate = rmcIncTaxCargo.getEnd_date();
				if (sDate.length() > 10) {
					sDate = sDate.substring(0, 10);
				}
				rmcIncTaxCargo.setEnd_date(sDate);
			}

			rmcIncTaxCargo.setApp_num(appNumber);
			rmcIncTaxCargo.setIndv_seq_num(String.valueOf(indvSeqNum));
			rmcIncTaxCargo.setSrc_app_ind(FwConstants.EMPTY_STRING);

			if (beforeCollRmcIncTaxColl != null
					&& !beforeCollRmcIncTaxColl.isEmpty()) {
				final int size = beforeCollRmcIncTaxColl.size();

				if (AppConstants.REPORT_END_MODE.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				if (size > 1) {
					/*
					 * if we have two records means cw and rm now we are getting
					 * RM record to compare now we need to update the data base
					 * if it dirty
					 */
					recordInd = FwConstants.ROWACTION_UPDATE;
				}
				if (size == 0) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				if (size == 1
						&& beforeCollRmcIncTaxColl.getCargo(0).getSrc_app_ind()
						.equalsIgnoreCase(AppConstants.CWW_RECORD_IND)) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				/* RM or RN record */
				if (size == 1
						&& (beforeCollRmcIncTaxColl
								.getCargo(0)
								.getSrc_app_ind()
								.equalsIgnoreCase(
										AppConstants.RMC_NEW_RECORD_IND) || beforeCollRmcIncTaxColl
										.getCargo(0)
										.getSrc_app_ind()
										.equalsIgnoreCase(
												AppConstants.RMC_MODIFIED_RECORD_IND))) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					/* now we are checking this record is CW or RN */
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							|| sourceAppIndicator
							.equals(AppConstants.RMC_MODIFIED_RECORD_IND)
							&& beforeIncomeTaxCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				beforeIncomeTaxCargo = incomeTaxDeductBo.splitTaxDeduColl(
						beforeCollRmcIncTaxColl, sourceAppIndicator);
				if (beforeIncomeTaxCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeIncomeTaxCargo = incomeTaxDeductBo.splitTaxDeduColl(
							beforeCollRmcIncTaxColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeIncomeTaxCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (beforeIncomeTaxCargo != null) {
					beforeIncomeTaxCargo = beforeCollRmcIncTaxColl.getCargo(0);
					rmcIncTaxCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));

					rmcIncTaxCargo.setSrc_app_ind(beforeIncomeTaxCargo
							.getSrc_app_ind());
					rmcIncTaxCargo.setIndv_seq_num(beforeIncomeTaxCargo
							.getIndv_seq_num());
					rmcIncTaxCargo.setEcp_id(beforeIncomeTaxCargo.getEcp_id());
					rmcIncTaxCargo.setSeq_num(beforeIncomeTaxCargo.getSeq_num());

					if (AppConstants.REPORT_END_MODE.equalsIgnoreCase(pageMode)) {
						rmcIncTaxCargo.setAlimony_exp(beforeIncomeTaxCargo
								.getAlimony_exp());
						rmcIncTaxCargo.setBusiness_exp(beforeIncomeTaxCargo
								.getBusiness_exp());
						rmcIncTaxCargo
						.setDeductible_self_exp(beforeIncomeTaxCargo
								.getDeductible_self_exp());
						rmcIncTaxCargo.setDomestic_exp(beforeIncomeTaxCargo
								.getDomestic_exp());
						rmcIncTaxCargo.setEducator_exp(beforeIncomeTaxCargo
								.getEducator_exp());
						rmcIncTaxCargo
						.setHealth_saving_exp(beforeIncomeTaxCargo
								.getHealth_saving_exp());
						rmcIncTaxCargo.setIra_exp(beforeIncomeTaxCargo
								.getIra_exp());
						rmcIncTaxCargo.setMoving_exp(beforeIncomeTaxCargo
								.getMoving_exp());
						rmcIncTaxCargo.setPenalty_exp(beforeIncomeTaxCargo
								.getPenalty_exp());
						rmcIncTaxCargo.setSelf_health_exp(beforeIncomeTaxCargo
								.getSelf_health_exp());
						rmcIncTaxCargo.setSelf_sep_exp(beforeIncomeTaxCargo
								.getSelf_sep_exp());
						rmcIncTaxCargo.setStudent_loan_exp(beforeIncomeTaxCargo
								.getStudent_loan_exp());
						rmcIncTaxCargo.setTution_exp(beforeIncomeTaxCargo
								.getTution_exp());
						rmcIncTaxCargo.setEcp_id(beforeIncomeTaxCargo
								.getEcp_id());

					}

				} else {
					if (beforeCollRmcIncTaxColl != null) {
						final CP_APP_IN_INCOME_TAX_DED_Cargo beforeCargo = beforeCollRmcIncTaxColl
								.getCargo(0);
						rmcIncTaxCargo.setEcp_id(beforeCargo.getEcp_id());
					}
				}

				rmcIncTaxCargo.setApp_num(appNumber);
				rmcIncTaxCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));

				rmcIncTaxCargo = (CP_APP_IN_INCOME_TAX_DED_Cargo) isChanged(
						beforeIncomeTaxCargo, rmcIncTaxCargo);
				rmcIncTaxCargo.setSrc_app_ind(sourceAppIndicator);

				rmcIncTaxCargo.setRowAction(recordInd);
				if (rmcIncTaxCargo.isDirty()) {
					taxDeductDetailsUpdate = true;
				}
			} else {

				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcIncTaxCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				seqNum = String.valueOf(incomeTaxDeductBo.getMaxIncTaxDedSeqNumber(appNumber, indvSeqNum) + 1);
				rmcIncTaxCargo.setSeq_num(seqNum);
				rmcIncTaxCargo.setRowAction(recordInd);
				taxDeductDetailsUpdate = true;
				categorySelectionProfileManager.updateSequence(
						incomeTaxProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());

			}

			if (taxDeductDetailsUpdate) {
				if (rmcIncTaxCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					incomeTaxDeductBo.insertExistingDetails(rmcIncTaxColl);
				} else {
					incomeTaxDeductBo.storeTaxDeductDetails(rmcIncTaxColl);
				}
			}

			rmcIncTaxCargo = rmcIncTaxColl.getCargo(0);

			rmcResponseProfileManager.getProfile(rmcInPrflCollSession,
					rmcIncTaxCargo.getIndv_seq_num());
			//reqInd is indicator to decide if we have complete the response profile or not
			boolean reqInd=false;
			short respTyp=IRMCResponseProfileManager.TAX_DEDUCT_RESP;		
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
			final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.TAX_DEDUCT_RESP,
							rmcInPrflCargo, true);
				}
			//if the profile response was not 'R' or if we came from gatepost then don't persist else persist
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					incomeTaxProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}else{
			categorySelectionProfileManager.makeSequenceDetailComplete(
						incomeTaxProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			boolean complete = false;
			if (categorySelectionProfileManager
					.areAllSequencesComplete(incomeTaxProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						AppConstants.ARBBS, driverArray, appNumber);
				complete = true;
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(incomeTaxProfile);
			}

			if (complete) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			}

			txnBean.setPageCollection(pageCollection);
			beforePageColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforePageColl);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeIncomeTaxDeductionDetails::End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeIncomeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeIncomeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.storeIncomeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – end (H)

	/**
	 * Adds the income tax deduction.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – start (H)
	public void addIncomeTaxDeduction(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCOtherBenefitsEJBBean.addIncomeTaxDeduction() - START");

		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			/* get cargo determining user selection */
			final String incTaxIndvSeq = request.get("firstName_taxDeduction") != null ? (String) request
					.get("firstName_taxDeduction") : FwConstants.EMPTY_STRING;

					final ABIncomeTaxDeductionBO taxDeductBO = new ABIncomeTaxDeductionBO();
					/* validate selections */
					if (incTaxIndvSeq == null
							|| incTaxIndvSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						taxDeductBO.validateAdd();
						/* add validation message and return */
						request.put(FwConstants.MESSAGE_LIST,
								taxDeductBO.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					//CW record has zero seqNum in case of IncomeTaxDeduction so we are making it "ONE" for add new record
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(incTaxIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ONE);
					indivSeqBean.setType("XH");
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

					/* set driver status */
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER,
							AppConstants.ARITD, driver, appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
					/* end */
					log(ILog.INFO, "RMCOtherBenefitsEJBBean::addIncomeTaxDeduction:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addIncomeTaxDeduction");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addIncomeTaxDeduction", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCOtherBenefitsEJBBean.addIncomeTaxDeduction() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * End income tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endIncomeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endIncomeTaxDeductionDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endIncomeTaxDeductionDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			/* Get driver info. */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_APP_IN_INCOME_TAX_DED_Collection incTaxColl = (CP_APP_IN_INCOME_TAX_DED_Collection) pageCollection
					.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION);
			final CP_APP_IN_INCOME_TAX_DED_Cargo befTaxCargo = incTaxColl
					.getResult(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(befTaxCargo.getIndv_seq_num());
			seqBean.setSeqNum(befTaxCargo.getSeq_num());
			seqBean.setType(AppConstants.INCOME_TAX_DEDUCTION);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				/* Get RMB_RQST_Cargo for appNum */
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getTax_deduct_stat_ind() != null
						&& !rmbRqstCargo.getTax_deduct_stat_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setTax_deduct_stat_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				/* add to session */
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			/* Get App Number */
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			/* Set RMC page Before Tax Deduction Details make required */
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARITD, driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARBBS, driverArray, appNum);
			/* End */
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endIncomeTaxDeductionDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endIncomeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endIncomeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endIncomeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – end

	// NextGen NG-6481 Phase 3 updates to ACA Streamline changes – start (H)

	/**
	 * Check benefit detail page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @return true, if successful
	 */
	public boolean checkBenefitDetailPageRequired(
			final SortedSet categorySelectionProfile, final Map catType) {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.checkBenefitDetailPageRequired() - START");

		try {
			boolean isexpensePageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND) {
						isexpensePageRequired = true;
						break;
					}
				}
			}
			log(ILog.DEBUG,
					"RMCHousingExpenseEJBBean.checkBenefitDetailPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isexpensePageRequired;
		} catch (final FwException fe) {
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkExpenseDetailPageRequired", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Erase income tax deduction.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseIncomeTaxDeduction(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.eraseIncomeTaxDeduction() - START");

		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseIncomeTaxDeduction:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			/*
			 * Get RMCSessionBean from the session Define IndvSeqNum and the
			 * SeqNum and Type and RowNum
			 */
			String indvSeqNum = null;
			String seqNum = null;
			String incType = null;

			/* Get driver info. */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			/* Get the CP_APP_IN_INCOME_TAX_DED_Collection from pageCollection. */
			final CP_APP_IN_INCOME_TAX_DED_Collection incColl = (CP_APP_IN_INCOME_TAX_DED_Collection) pageCollection
					.get("CP_APP_IN_INCOME_TAX_DED_Collection");
			final CP_APP_IN_INCOME_TAX_DED_Cargo befCargo = incColl.getCargo(0);

			/* Get the results from the CP_APP_IN_INCOME_TAX_DED_Collection */
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = befCargo.getIndv_seq_num();
			seqNum = befCargo.getSeq_num();
			
			/*we have a common method for erase addNew record and erase CW changes in case of income tax deduction
			 *so we will check src_app_indicator while removing category selection profile from data base 
			 * */
			final String src_app_ind = befCargo.getSrc_app_ind();
			if(src_app_ind.equals("RN"))
			 seqNum="1";
			incType = "XH";
			CP_APP_IN_INCOME_TAX_DED_Cargo incbeforeCargo = (CP_APP_IN_INCOME_TAX_DED_Cargo) beforeColl
					.get("CP_APP_IN_INCOME_TAX_DED_Cargo");

			final ABIncomeTaxDeductionBO taxDedBO = new ABIncomeTaxDeductionBO();

			if (incbeforeCargo == null
					|| taxDedBO.isDifferentTaxDeduction(befCargo,
							incbeforeCargo)) {
				taxDedBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST, taxDedBO.getMessageList());
				incbeforeCargo = new CP_APP_IN_INCOME_TAX_DED_Cargo();
				incbeforeCargo.setIndv_seq_num(indvSeqNum);
				beforeColl
				.put("CP_APP_IN_INCOME_TAX_DED_Cargo", incbeforeCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			/* delete record from database */
			taxDedBO.deleteTaxDeductionRecords(indvSeqNum, appNum, seqNum);

			/* delete record from rmc selection profile */
			SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean flagLoadCategory = false;
			/*check if the indiv is present in rmcSelPrfl
			 * */
			if(!rmcSelPrfl.isEmpty())
			{
				CategorySequenceDetail catSeqDetail= new CategorySequenceDetail();
				Iterator iter = rmcSelPrfl.iterator();
				while(iter.hasNext())
				{
					catSeqDetail = (CategorySequenceDetail)iter.next();
					if((String.valueOf(catSeqDetail.getIndividualSequence())).equals(indvSeqNum))
						flagLoadCategory=true;
				}
			}
			if(!flagLoadCategory)
			{
			rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			}
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), "OBP", incType);
			/* insert a new sequence in selection profile with No change */
			/*if(null!=src_app_ind && !src_app_ind.equals("RN"))
			{
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, "OBP", Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), incType, (short) 2, 'N');
			}*/
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			
			final short[] responseArray = new short[] { IRMCResponseProfileManager.TAX_DEDUCT_RESP };
			if (beforeColl != null) {
							int count = 0;
							CP_APP_IN_INCOME_TAX_DED_Collection incCollection = null;
							CP_APP_IN_INCOME_TAX_DED_Cargo incCargo = null;
							incCollection = (CP_APP_IN_INCOME_TAX_DED_Collection) beforeColl
									.get("CP_APP_IN_INCOME_TAX_DED_Collection");

							if (incCollection != null && !incCollection.isEmpty()) {
								final int utilityCollSize = incCollection.size();
								for (int i = 0; i < utilityCollSize; i++) {
									incCargo = incCollection.getCargo(i);
									if (incCargo.getIndv_seq_num().equals(indvSeqNum) && incCargo.getSrc_app_ind().equals(
													AppConstants.RMC_NEW_RECORD_IND)) {
										count++;
									}
								}
							}
							if (count == 1) {
								// now we need to make that profile requirred
								final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
										.getProfile(rmcInPrflColl, indvSeqNum);
								rmcResponseProfileManager.makeAbsoluteNotRequired(
										responseArray, rmcResCargo, true);

							}
						}
			
			boolean rmcPrflNotRequired = false;
			/*
			 * here we need to check we have no entrys in rmcPrfl for the other
			 * income detail as well as we need to check
			 */
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.TAX_DEDUCT_RESP)) {
					rmcPrflNotRequired = true;
				}
			} else {
				rmcPrflNotRequired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TRLE", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map incTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				incTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean befDetailsPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, incTypeMap,
					AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB);
			if (!befDetailsPageReg && rmcPrflNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARITD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseIncomeTaxDeduction:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseIncomeTaxDeduction");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseIncomeTaxDeduction", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.eraseIncomeTaxDeduction() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the income tax deduction.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editIncomeTaxDeduction(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.editIncomeTaxDeduction() - START");

		try {
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final CP_APP_IN_INCOME_TAX_DED_Collection appInAsetXfer = (CP_APP_IN_INCOME_TAX_DED_Collection) pageCollection
					.get(AppConstants.CP_APP_IN_INCOME_TAX_DED_COLLECTION);
			final CP_APP_IN_INCOME_TAX_DED_Cargo appInAsetXferCargo = appInAsetXfer
					.getCargo(0);
			final String indvSeqNum = appInAsetXferCargo.getIndv_seq_num();
			final String seqNum = appInAsetXferCargo.getSeq_num();
			final String type = AppConstants.INCOME_TAX_DEDUCTION_CHANGE_RMB;
			final IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean(
					indvSeqNum, type, seqNum);
			indivTypeSeqBean.setUserEndInd(FwConstants.ZERO);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					AppConstants.ARITD, driverArray);
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARBBS, driverArray, appNum);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
			txnBean.setPageCollection(pageCollection);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::changeLiquidAssetOtherAssetTransfer:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editIncomeTaxDeduction");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editIncomeTaxDeduction", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.editIncomeTaxDeduction() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load before tax ded details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadBeforeTaxDedDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.loadBeforeTaxDedDetails - START");
		try {

			log(ILog.DEBUG,
					"RMCHousingExpenseEJBBean.loadBeforeTaxDedDetails - START");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			CP_APP_IN_BEF_TAX_DED_Collection rmcInBeforeTaxColl;
			String pageMode = null;
			String indvSeqNum = null;
			String seqNum = null;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final ABBeforeTaxDeductionBO beforetaxDeduction = new ABBeforeTaxDeductionBO();
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			final Map incomeTaxTypeMap = new HashMap();
			incomeTaxTypeMap.put(AppConstants.BEFORE_TAX_DEDUCTIONS,
					AppConstants.BEFORE_TAX_DEDUCTIONS);

			/* build category selection profile */
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, incomeTaxTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, incomeTaxTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL);
			}
			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final short[] responseNewType = new short[] { IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION };
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			SortedSet cldObligationProfile = null;
			if (!previousPageId.equals(currentPageID)) {
				cldObligationProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl,
						responseNewType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final CP_APP_IN_BEF_TAX_DED_Collection beforeTaxColl = beforetaxDeduction
							.loadBeforeTaxDetails(appNumber);
					final CP_APP_IN_BEF_TAX_DED_Collection newbeforeTaxColl = beforetaxDeduction
							.getSplitTaxDeductColl(beforeTaxColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (newbeforeTaxColl != null && !newbeforeTaxColl.isEmpty()) {
						CP_APP_IN_BEF_TAX_DED_Cargo rmcInBeforeTaxCargo = null;
						final int newLqdAssetCollSize = newbeforeTaxColl.size();
						for (int i = 0; i < newLqdAssetCollSize; i++) {
							rmcInBeforeTaxCargo = newbeforeTaxColl.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									cldObligationProfile,
									null,
									null,
									Short.parseShort(rmcInBeforeTaxCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInBeforeTaxCargo.getSeq_num()),
											AppConstants.BEFORE_TAX_DEDUCTIONS);
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					/* set the current record indicator to the first one */
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(cldObligationProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					/*
					 * set the current record indicator to the end of the detail
					 * bean
					 */
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(cldObligationProfile);
				}
				/* we need to remove the vallues from the session */
				session.remove(FwConstants.BEFORE_COLLECTION);

			} else {
				/*
				 * catAddNewProfile get it from the before collection - Holding
				 * the profile for looping the page
				 */
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				cldObligationProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get(AppConstants.BEFTAXDEDUCTION_INDSEQBEAN);
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								cldObligationProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}

					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(cldObligationProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							cldObligationProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (indivSeqBean.getSeqNum().equals(FwConstants.ONE)) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						Boolean flag = beforetaxDeduction.getRmcChgSelPrfl(appNumber, indivSeqBean.getIndivSeqNum(), indivSeqBean.getSeqNum(), AppConstants.RMC_CAT_OTHER_BILL_PRFL, indivSeqBean.getType());
						if(flag){
						categorySelectionProfileManager
						.insertSequenceDetail(cldObligationProfile,
								appNumber,AppConstants.RMC_CAT_OTHER_BILL_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						}
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(cldObligationProfile,
								null,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								cldObligationProfile, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_OTHER_BILL_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put(AppConstants.BEFTAXDEDUCTION_INDSEQBEAN,
						indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					cldObligationProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(cldObligationProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(cldObligationProfile);
			}

			
			indvSeqNum="0";
			seqNum="0";
			if(categorySeqDetail!=null) {
			indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			seqNum = Long.toString(categorySeqDetail.getCategorySequence());
			}
			rmcInBeforeTaxColl = beforetaxDeduction
					.loadIndividualBeforeTaxDetails(appNumber, indvSeqNum,seqNum);
			pageCollection.put(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
					rmcInBeforeTaxColl);
			if (categorySeqDetail!=null && categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = AppConstants.REPORT_END_MODE;
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (indivSeqBean.getUserEndInd().equalsIgnoreCase(
						FwConstants.ONE)) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else {
					if (addnewPerson.equalsIgnoreCase(FwConstants.YES)) {
						pageMode = AppConstants.REPORT_NEW_MODE;
					} else {
						pageMode = AppConstants.REPORT_CHANGE_MODE;
					}
				}
			} else {
				if (addnewPerson.equalsIgnoreCase(FwConstants.YES)) {
					pageMode = AppConstants.REPORT_NEW_MODE;
				} else {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				}
			}

			CP_APP_IN_BEF_TAX_DED_Cargo cwwBeforeTaxCargo = beforetaxDeduction
					.splitCldOblgCargo(rmcInBeforeTaxColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwBeforeTaxCargo == null) {

				cwwBeforeTaxCargo = new CP_APP_IN_BEF_TAX_DED_Cargo();
				addnewPerson = FwConstants.YES;
				pageMode = AppConstants.REPORT_NEW_MODE;
			} else {
				if (categorySeqDetail!=null && categorySeqDetail.getUserEndSelectionInd() == 1) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				}
				addnewPerson = FwConstants.NO;
			}

			pageCollection.put(AppConstants.BEFORE_TAX_DEDUCTION_CHANGE,
					cwwBeforeTaxCargo);
			CP_APP_IN_BEF_TAX_DED_Cargo rmcBefTaxCargo = beforetaxDeduction
					.splitCldOblgCargo(rmcInBeforeTaxColl,
							AppConstants.RMC_NEW_RECORD_IND);

			if (rmcBefTaxCargo != null) {

				pageCollection
				.put(AppConstants.BEFORE_TAX_DEDUCTION_NEW,
						beforetaxDeduction
						.settingDefaultValues(rmcBefTaxCargo));
			} else {

				rmcBefTaxCargo = beforetaxDeduction.splitCldOblgCargo(
						rmcInBeforeTaxColl,
						AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcBefTaxCargo != null) {

					pageCollection.put(AppConstants.BEFORE_TAX_DEDUCTION_NEW,
							beforetaxDeduction
							.settingDefaultValues(rmcBefTaxCargo));
				} else {
					rmcBefTaxCargo = beforetaxDeduction
							.splitCldOblgCargo(rmcInBeforeTaxColl,
									AppConstants.RMC_END_RECORD_IND);
					if (rmcBefTaxCargo != null) {
						pageCollection.put(
								AppConstants.BEFORE_TAX_DEDUCTION_NEW,
								beforetaxDeduction
								.settingDefaultValues(rmcBefTaxCargo));
					} else {

						pageCollection
						.put(AppConstants.BEFORE_TAX_DEDUCTION_NEW,
								beforetaxDeduction
								.settingDefaultValues(cwwBeforeTaxCargo));
					}

				}
			}
			if (rmcInBeforeTaxColl != null && !rmcInBeforeTaxColl.isEmpty()) {
				final CP_APP_IN_BEF_TAX_DED_Cargo rmcInBefoTaxCargo = rmcInBeforeTaxColl
						.getCargo(0);
				rmcInBefoTaxCargo.getSrc_app_ind();
			}

			pageCollection.put(AppConstants.PAGE_MODE, pageMode);
			request.put(AppConstants.PAGE_MODE, pageMode);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (categorySeqDetail!=null && Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("INDIVIDUAL_Custom_Custom_Collection",
					indivCustCol);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			componentManager.getComponents(currentPageID, txnBean);
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);
			txnBean.setPageCollection(pageCollection);
			if(beforeColl!=null) {
			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::loadBeforeTaxDedDetails:END");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadBeforeTaxDedDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadBeforeTaxDedDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.loadBeforeTaxDedDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store before tax ded details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeBeforeTaxDedDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.storeBeforeTaxDedDetails() - START");
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		String currentPageID = null;
		String indvSeqNum = null;
		String seqNum = null;
		try {


			currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			/* get driver array */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			/* build category selection profile */
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			/* get the BeforeCollection */
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final SortedSet beforeTaxProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforePageColl
					.get(AppConstants.PAGE_MODE);
			beforePageColl.get(AppConstants.FIRST_NAME);
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final CP_APP_IN_BEF_TAX_DED_Collection rmcInBefTaxColl = (CP_APP_IN_BEF_TAX_DED_Collection) pageCollection
					.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION);
			CP_APP_IN_BEF_TAX_DED_Cargo rmcInBefTaxCargo = rmcInBefTaxColl
					.getCargo(0);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(beforeTaxProfile);

			categorySeqDetailBean.getUserEndSelectionInd();

			final ABBeforeTaxDeductionBO beforeTaxDeductBo = new ABBeforeTaxDeductionBO();
			final ARBTDValidator aritdValidator = new ARBTDValidator();

			final CP_APP_IN_BEF_TAX_DED_Collection beforeCollRmcInBefTaxColl = (CP_APP_IN_BEF_TAX_DED_Collection) beforePageColl
					.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION);
			CP_APP_IN_BEF_TAX_DED_Cargo beforeBeforeTaxCargo = null;

			indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());

			String sourceAppIndicator = null;
			String recordInd = null;

			boolean taxDeductDetailsUpdate = false;


			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (backToMyAccess == null) {
				if (pageMode.equals(AppConstants.REPORT_CHANGE_MODE)
						|| pageMode.equals(FwConstants.NO)) {

					aritdValidator.validatDedAmount(rmcInBefTaxCargo);
				}
				if (pageMode.equals(AppConstants.REPORT_END_MODE)) {
					aritdValidator.validateEndDate(rmcInBefTaxCargo);
				}

			}

			if (checkBackToMyAccessSelected(request)
					|| aritdValidator.hasMessages()) {
				if (backToMyAccess == null) {

					request.put(FwConstants.MESSAGE_LIST,
							aritdValidator.getMessageList());

				}

				pageCollection.put("INDIVIDUAL_Custom_Custom_Collection",
						beforePageColl
						.get("INDIVIDUAL_Custom_Custom_Collection"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put(
						AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION,
						rmcInBefTaxColl);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));
				pageCollection.put(AppConstants.PAGE_MODE,
						beforePageColl.get(AppConstants.PAGE_MODE));
				pageCollection.put(AppConstants.BEFORE_TAX_DEDUCTION_NEW,
						rmcInBefTaxCargo);
				if (beforePageColl
						.containsKey(AppConstants.BEFORE_TAX_DEDUCTION_CHANGE)) {
					pageCollection
					.put(AppConstants.BEFORE_TAX_DEDUCTION_CHANGE,
							beforePageColl
							.get(AppConstants.BEFORE_TAX_DEDUCTION_CHANGE));
				}

				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));

				return;
			}

			if (rmcInBefTaxCargo.getMedical_ins() == null
					|| rmcInBefTaxCargo.getMedical_ins().trim().length() == 0) {
				rmcInBefTaxCargo.setMedical_ins(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getDental_ins() == null
					|| rmcInBefTaxCargo.getDental_ins().trim().length() == 0) {
				rmcInBefTaxCargo.setDental_ins(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getVision_ins() == null
					|| rmcInBefTaxCargo.getVision_ins().trim().length() == 0) {
				rmcInBefTaxCargo.setVision_ins(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getFlexi_spend_account() == null
					|| rmcInBefTaxCargo.getFlexi_spend_account().trim()
					.length() == 0) {
				rmcInBefTaxCargo.setFlexi_spend_account(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getDeferred_comp() == null
					|| rmcInBefTaxCargo.getDeferred_comp().trim().length() == 0) {
				rmcInBefTaxCargo.setDeferred_comp(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getPre_tax_life_ins() == null
					|| rmcInBefTaxCargo.getPre_tax_life_ins().trim().length() == 0) {
				rmcInBefTaxCargo.setPre_tax_life_ins(FwConstants.SPACE);
			}
			if (rmcInBefTaxCargo.getOther_exp() == null
					|| rmcInBefTaxCargo.getOther_exp().trim().length() == 0) {
				rmcInBefTaxCargo.setOther_exp(FwConstants.SPACE);
			}

			if (rmcInBefTaxCargo.getBtd_end_dt() == null
					|| rmcInBefTaxCargo.getBtd_end_dt().trim().length() == 0
					|| rmcInBefTaxCargo.getBtd_end_dt().equalsIgnoreCase(
							AppConstants.HIGH_TIMESTAMP)
							|| rmcInBefTaxCargo.getBtd_end_dt().equalsIgnoreCase(
									AppConstants.HIGH_TIMESTAMP1)) {
				rmcInBefTaxCargo.setBtd_end_dt(AppConstants.HIGH_DATE);
			} else {
				String sDate = rmcInBefTaxCargo.getBtd_end_dt();
				if (sDate.length() > 10) {
					sDate = sDate.substring(0, 10);
				}
				rmcInBefTaxCargo.setBtd_end_dt(sDate);
			}

			rmcInBefTaxCargo.setApp_num(appNumber);
			rmcInBefTaxCargo.setIndv_seq_num(String.valueOf(indvSeqNum));
			rmcInBefTaxCargo.setSrc_app_ind(FwConstants.EMPTY_STRING);

			if (beforeCollRmcInBefTaxColl != null
					&& !beforeCollRmcInBefTaxColl.isEmpty()) {
				final int size = beforeCollRmcInBefTaxColl.size();

				if (AppConstants.REPORT_END_MODE.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				if (size > 1) {
					/*
					 * if we have two records means cw and rm now we are getting
					 * RM record to compare now we need to update the data base
					 * if it dirty
					 */
					recordInd = FwConstants.ROWACTION_UPDATE;
				}
				if (size == 0) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				if (size == 1
						&& beforeCollRmcInBefTaxColl.getCargo(0)
						.getSrc_app_ind()
						.equalsIgnoreCase(AppConstants.CWW_RECORD_IND)) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				/* RM or RN record */
				if (size == 1
						&& (beforeCollRmcInBefTaxColl
								.getCargo(0)
								.getSrc_app_ind()
								.equalsIgnoreCase(
										AppConstants.RMC_NEW_RECORD_IND) || beforeCollRmcInBefTaxColl
										.getCargo(0)
										.getSrc_app_ind()
										.equalsIgnoreCase(
												AppConstants.RMC_MODIFIED_RECORD_IND))) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					/* now we are checking this record is CW or RN */
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							|| sourceAppIndicator
							.equals(AppConstants.RMC_MODIFIED_RECORD_IND)
							&& beforeBeforeTaxCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				beforeBeforeTaxCargo = beforeTaxDeductBo.splitCldOblgCargo(
						beforeCollRmcInBefTaxColl, sourceAppIndicator);
				if (beforeBeforeTaxCargo == null
						&& (sourceAppIndicator
								.equals(AppConstants.RMC_MODIFIED_RECORD_IND) || sourceAppIndicator
								.equals(AppConstants.RMC_END_RECORD_IND))) {
					beforeBeforeTaxCargo = beforeTaxDeductBo.splitCldOblgCargo(
							beforeCollRmcInBefTaxColl,
							AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					recordInd = FwConstants.ROWACTION_INSERT;
					if (sourceAppIndicator
							.equals(AppConstants.RMC_NEW_RECORD_IND)
							&& beforeBeforeTaxCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (beforeBeforeTaxCargo != null) {
					beforeBeforeTaxCargo = beforeCollRmcInBefTaxColl
							.getCargo(0);
					rmcInBefTaxCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));

					rmcInBefTaxCargo.setSrc_app_ind(beforeBeforeTaxCargo
							.getSrc_app_ind());
					rmcInBefTaxCargo.setIndv_seq_num(beforeBeforeTaxCargo
							.getIndv_seq_num());
					rmcInBefTaxCargo
					.setEcp_id(beforeBeforeTaxCargo.getEcp_id());
					rmcInBefTaxCargo.setSeq_num(beforeBeforeTaxCargo.getSeq_num());

					if (AppConstants.REPORT_END_MODE.equalsIgnoreCase(pageMode)) {
						rmcInBefTaxCargo.setDeferred_comp(beforeBeforeTaxCargo
								.getDeferred_comp());
						rmcInBefTaxCargo.setDental_ins(beforeBeforeTaxCargo
								.getDental_ins());
						rmcInBefTaxCargo
						.setFlexi_spend_account(beforeBeforeTaxCargo
								.getFlexi_spend_account());
						rmcInBefTaxCargo.setMedical_ins(beforeBeforeTaxCargo
								.getMedical_ins());
						rmcInBefTaxCargo.setOther_exp(beforeBeforeTaxCargo
								.getOther_exp());
						rmcInBefTaxCargo
						.setPre_tax_life_ins(beforeBeforeTaxCargo
								.getPre_tax_life_ins());
						rmcInBefTaxCargo.setVision_ins(beforeBeforeTaxCargo
								.getVision_ins());
						rmcInBefTaxCargo.setEcp_id(beforeBeforeTaxCargo
								.getEcp_id());

					}

				} else {
					if (beforeCollRmcInBefTaxColl != null) {
						final CP_APP_IN_BEF_TAX_DED_Cargo beforeCargo = beforeCollRmcInBefTaxColl
								.getCargo(0);
						rmcInBefTaxCargo.setEcp_id(beforeCargo.getEcp_id());
					}
				}

				rmcInBefTaxCargo.setApp_num(appNumber);
				rmcInBefTaxCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				rmcInBefTaxCargo.setSeq_num(String.valueOf(categorySeqDetailBean
						.getCategorySequence()));

				rmcInBefTaxCargo = (CP_APP_IN_BEF_TAX_DED_Cargo) isChanged(
						beforeBeforeTaxCargo, rmcInBefTaxCargo);
				rmcInBefTaxCargo.setSrc_app_ind(sourceAppIndicator);

				rmcInBefTaxCargo.setRowAction(recordInd);
				if (rmcInBefTaxCargo.isDirty()) {
					taxDeductDetailsUpdate = true;
				}
			} else {

				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInBefTaxCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				seqNum = String.valueOf(beforeTaxDeductBo.getMaxIncBefTaxSeqNumber(appNumber, indvSeqNum) + 1);
				rmcInBefTaxCargo.setSeq_num(seqNum);
				rmcInBefTaxCargo.setRowAction(recordInd);
				taxDeductDetailsUpdate = true;
				categorySelectionProfileManager.updateSequence(
						beforeTaxProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(), categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(), categorySeqDetailBean.getCategoryType());

			}

			if (taxDeductDetailsUpdate) {
				if (rmcInBefTaxCargo.getRowAction().equals(
						FwConstants.ROWACTION_INSERT)) {
					beforeTaxDeductBo
					.insertExistingBefTaxDetailsXfer(rmcInBefTaxColl);
				} else {
					beforeTaxDeductBo.storeBeforeTaxDetails(rmcInBefTaxColl);
				}
			}

			rmcInBefTaxCargo = rmcInBefTaxColl.getCargo(0);

			rmcResponseProfileManager.getProfile(rmcInPrflCollSession,
					rmcInBefTaxCargo.getIndv_seq_num());

			//reqInd is indicator to decide if we have complete the response profile or not
			boolean reqInd=false;
			short respTyp= IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION;
			
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					reqInd=true;
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION,
							rmcInPrflCargo, true);
				}
				//if the profile response was not 'R' or if we came from gatepost then don't persist else persist
				if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
				{
					categorySelectionProfileManager.makeSequenceDetailComplete(
					beforeTaxProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
		}else{
						categorySelectionProfileManager.makeSequenceDetailComplete(
								beforeTaxProfile, appNumber,
								categorySeqDetailBean.getIndividualSequence(),
								categorySeqDetailBean.getCategorySequence(),
								categorySeqDetailBean.getCategoryType());
						}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(beforeTaxProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(beforeTaxProfile);
			}

			txnBean.setPageCollection(pageCollection);
			beforePageColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforePageColl);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::storeBeforeTaxDedDetails::End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeBeforeTaxDedDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeBeforeTaxDedDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.storeBeforeTaxDedDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Edits the before tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void editBeforeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.editBeforeTaxDeductionDetails() - START");

		try {

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final CP_APP_IN_BEF_TAX_DED_Collection appInAsetXfer = (CP_APP_IN_BEF_TAX_DED_Collection) pageCollection
					.get(AppConstants.CP_APP_IN_BEF_TAX_DED_COLLECTION);
			final CP_APP_IN_BEF_TAX_DED_Cargo appInAsetXferCargo = appInAsetXfer
					.getCargo(0);
			final String indvSeqNum = appInAsetXferCargo.getIndv_seq_num();
			final String seq_num = appInAsetXferCargo.getSeq_num();
			final String type = AppConstants.BEFORE_TAX_DEDUCTIONS;
			final IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean(
					indvSeqNum, type, seq_num);
			indivTypeSeqBean.setUserEndInd(FwConstants.ZERO);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					AppConstants.ARBTD, driverArray);
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARBBS, driverArray, appNum);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
			txnBean.setPageCollection(pageCollection);

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::changeLiquidAssetOtherAssetTransfer:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editBeforeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editBeforeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.editBeforeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Erase before tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseBeforeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.eraseBeforeTaxDeductionDetails() - START");

		try {

			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseBeforeTaxDeductionDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			/*
			 * Get RMCSessionBean from the session Define IndvSeqNum and the
			 * SeqNum and Type and RowNum
			 */
			String indvSeqNum = null;
			String seqNum = null;
			String befType = null;

			/* Get driver info. */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			/* Get the CP_APP_IN_BEF_TAX_DED_Collection from pageCollection. */
			final CP_APP_IN_BEF_TAX_DED_Collection befColl = (CP_APP_IN_BEF_TAX_DED_Collection) pageCollection
					.get("CP_APP_IN_BEF_TAX_DED_Collection");
			final CP_APP_IN_BEF_TAX_DED_Cargo befCargo = befColl.getCargo(0);

			/* Get the results from the CP_APP_IN_BEF_TAX_DED_Collection */
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = befCargo.getIndv_seq_num();
			seqNum = befCargo.getSeq_num();
			final String src_app_ind = befCargo.getSrc_app_ind();
			/*if(src_app_ind.equals("RN"))
			 seqNum="1";*/
			
			befType = "BT";
			CP_APP_IN_BEF_TAX_DED_Cargo befbeforeCargo = (CP_APP_IN_BEF_TAX_DED_Cargo) beforeColl
					.get("CP_APP_IN_BEF_TAX_DED_Cargo");

			final ABBeforeTaxDeductionBO taxDedBO = new ABBeforeTaxDeductionBO();

			if (befbeforeCargo == null
					|| taxDedBO.isDifferentTaxDeduction(befCargo,
							befbeforeCargo)) {
				taxDedBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST, taxDedBO.getMessageList());
				befbeforeCargo = new CP_APP_IN_BEF_TAX_DED_Cargo();
				befbeforeCargo.setIndv_seq_num(indvSeqNum);
				beforeColl.put("CP_APP_IN_BEF_TAX_DED_Cargo", befbeforeCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			/* delete record from database */
			taxDedBO.deleteBeforeTaxDeductionRecords(indvSeqNum, appNum, seqNum);

			/* delete record from rmc selection profile */
			SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean flagLoadCategory = false;
			if(!rmcSelPrfl.isEmpty())
			{
				CategorySequenceDetail catSeqDetail= new CategorySequenceDetail();
				Iterator iter = rmcSelPrfl.iterator();
				while(iter.hasNext())
				{
					catSeqDetail = (CategorySequenceDetail)iter.next();
					if((String.valueOf(catSeqDetail.getIndividualSequence())).equals(indvSeqNum))
						flagLoadCategory=true;
				}
			}
				
			if(!flagLoadCategory)
			{
			rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			}
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), "OBP", befType);
			/* insert a new sequence in selection profile with No change */
			/*if(null!=src_app_ind && !src_app_ind.equals("RN"))
			{
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, "OBP", Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), befType, (short) 2, 'N');
			}*/
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final short[] responseArray = new short[] { IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION };
			if (beforeColl != null) {
							int count = 0;
							CP_APP_IN_BEF_TAX_DED_Collection befCollection = null;
							CP_APP_IN_BEF_TAX_DED_Cargo befIncCargo = null;
							befCollection = (CP_APP_IN_BEF_TAX_DED_Collection) beforeColl
									.get("CP_APP_IN_BEF_TAX_DED_Collection");

							if (befCollection != null && !befCollection.isEmpty()) {
								final int utilityCollSize = befCollection.size();
								for (int i = 0; i < utilityCollSize; i++) {
									befIncCargo = befCollection.getCargo(i);
									if (befIncCargo.getIndv_seq_num().equals(indvSeqNum) && befIncCargo.getSrc_app_ind().equals(
													AppConstants.RMC_NEW_RECORD_IND)) {
										count++;
									}
								}
							}
							if (count == 1) {
								// now we need to make that profile requirred
								final RMC_IN_PRFL_Cargo rmcResCargo = rmcResponseProfileManager
										.getProfile(rmcInPrflColl, indvSeqNum);
								rmcResponseProfileManager.makeAbsoluteNotRequired(
										responseArray, rmcResCargo, true);

							}
						}
						
			boolean rmcPrflNotRequired = false;
			/*
			 * here we need to check we have no entrys in rmcPrfl for the other
			 * income detail as well as we need to check
			 */
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.BEFORE_TAX_DEDUCTION)) {
					rmcPrflNotRequired = true;
				}
			} else {
				rmcPrflNotRequired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TRLE", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map befTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				befTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean befDetailsPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, befTypeMap, AppConstants.BEFORE_TAX_DEDUCTIONS);

			if (!befDetailsPageReg && rmcPrflNotRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBTD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBBS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::eraseBeforeTaxDeductionDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseBeforeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseBeforeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCHousingExpenseEJBBean.eraseBeforeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * End before tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void endBeforeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endBeforeTaxDeductionDetails() - START");
		try {
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endBeforeTaxDeductionDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			/* Get driver info. */
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final CP_APP_IN_BEF_TAX_DED_Collection befTaxColl = (CP_APP_IN_BEF_TAX_DED_Collection) pageCollection
					.get("CP_APP_IN_BEF_TAX_DED_Collection");
			final CP_APP_IN_BEF_TAX_DED_Cargo befTaxCargo = befTaxColl
					.getResult(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(befTaxCargo.getIndv_seq_num());
			seqBean.setSeqNum(befTaxCargo.getSeq_num());
			seqBean.setType(AppConstants.BEFORE_TAX_DEDUCTIONS);
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			final RMB_RQST_Collection rmbColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (appType.charAt(0) != FwConstants.RMC_APP_TYPE) {
				/* Get RMB_RQST_Cargo for appNum */
				final RMB_RQST_Cargo rmbRqstCargo = rmbColl.getCargo(0);
				if (rmbRqstCargo.getBefore_tax_deduction_ind() != null
						&& !rmbRqstCargo.getBefore_tax_deduction_ind().equals(
								FwConstants.YES)) {
					rmbRqstCargo.setBefore_tax_deduction_ind(FwConstants.YES);
					rmbRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
					rmbColl.addCargo(rmbRqstCargo);
					rmbColl.persist(FwConstants.DAO);
				}
				/* add to session */
				session.put(AppConstants.RMB_RQST_COLLECTION, rmbColl);
			}
			/* Get App Number */
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			/* Set RMC page Before Tax Deduction Details make required */
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARBTD, driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER,
					AppConstants.ARBBS, driverArray, appNum);
			/* End */
			log(ILog.INFO,
					"RMCHousingExpenseEJBBean::endBeforeTaxDeductionDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endBeforeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endBeforeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCHousingExpenseEJBBean.endBeforeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the before tax deduction details.
	 *
	 * @param txnBean the txn bean
	 \* @throws javax.ejb.EJBException the EJB exception
	 */
	public void addBeforeTaxDeductionDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.DEBUG,
				"RMCOtherBenefitsEJBBean.addBeforeTaxDeductionDetails() - START");

		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			/* get cargo determining user selection */
			final String befTaxIndvSeq = request
					.get("firstName_beforeTaxDeduction") != null ? (String) request
							.get("firstName_beforeTaxDeduction")
							: FwConstants.EMPTY_STRING;

							final ABBeforeTaxDeductionBO taxDeductBO = new ABBeforeTaxDeductionBO();
							/* validate selections */
							if (befTaxIndvSeq == null
									|| befTaxIndvSeq.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
								taxDeductBO.validateAdd();
								/* add validation message and return */
								request.put(FwConstants.MESSAGE_LIST,
										taxDeductBO.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);

							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(befTaxIndvSeq);
							indivSeqBean.setSeqNum(FwConstants.ONE);
							indivSeqBean.setType("BT");
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							/* set driver status */
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER,
									AppConstants.ARBTD, driver, appNum);
							session.put(FwConstants.RMC_DRIVER, driver);
							/* end */
							log(ILog.INFO, "RMCOtherBenefitsEJBBean::addBeforeTaxDeductionDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addBeforeTaxDeductionDetails");
			we.setFwException(fe);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addBeforeTaxDeductionDetails", e);
			throw rmcHousingExpenseEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.DEBUG,
				"RMCOtherBenefitsEJBBean.addBeforeTaxDeductionDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public FwException exceptionManagerLog(Exception e, String className,
			String methodName) {
		return super.exceptionManagerLog(e, className, methodName);
	}

}
