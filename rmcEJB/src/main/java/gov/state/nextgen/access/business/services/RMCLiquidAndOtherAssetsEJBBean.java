/*
 *
 */
package gov.state.nextgen.access.business.services;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;

import gov.state.nextgen.access.business.customEntities.APP_IN_ASET_CUST_Collection;
import gov.state.nextgen.access.business.customEntities.ASSETS_Custom_Cargo;
import gov.state.nextgen.access.business.customEntities.INDIVIDUAL_Custom_Cargo;
import gov.state.nextgen.access.business.customEntities.INDIVIDUAL_Custom_Collection;
import gov.state.nextgen.access.business.customEntities.RMC_RESPONSE_Custom_Cargo;
import gov.state.nextgen.access.business.customEntities.RMC_RESPONSE_Custom_Collection;
import gov.state.nextgen.access.business.entities.APP_INDV_ADDI_INFO_Cargo;
import gov.state.nextgen.access.business.entities.APP_INDV_ADDI_INFO_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_BURY_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_BURY_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_JNT_OWN_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_JNT_OWN_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_LQD_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_LQD_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_L_INS_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_L_INS_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_P_PROP_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_P_PROP_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_R_PROP_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_R_PROP_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_SPS_IMPOV_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_SPS_IMPOV_Collection;
import gov.state.nextgen.access.business.entities.APP_IN_VEH_ASET_Cargo;
import gov.state.nextgen.access.business.entities.APP_IN_VEH_ASET_Collection;
import gov.state.nextgen.access.business.entities.APP_RGST_Cargo;
import gov.state.nextgen.access.business.entities.APP_RGST_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_ASET_XFER_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_ASET_XFER_Collection;
import gov.state.nextgen.access.business.entities.CP_APP_IN_LIF_INS_CVRG_Cargo;
import gov.state.nextgen.access.business.entities.CP_APP_IN_LIF_INS_CVRG_Collection;
import gov.state.nextgen.access.business.entities.NO_ONE_Collection;
import gov.state.nextgen.access.business.entities.RMB_RQST_Cargo;
import gov.state.nextgen.access.business.entities.RMB_RQST_Collection;
import gov.state.nextgen.access.business.entities.RMC_IN_PRFL_Cargo;
import gov.state.nextgen.access.business.entities.RMC_IN_PRFL_Collection;
import gov.state.nextgen.access.business.entities.RMC_RQST_Cargo;
import gov.state.nextgen.access.business.entities.RMC_RQST_Collection;
import gov.state.nextgen.access.business.rules.ABHouseHoldMemberBO;
import gov.state.nextgen.access.business.rules.ABRegistrationBO;
import gov.state.nextgen.access.business.rules.assets.AssetBO;
import gov.state.nextgen.access.business.rules.assets.BurialAssetBO;
import gov.state.nextgen.access.business.rules.assets.LifeInsuranceBO;
import gov.state.nextgen.access.business.rules.assets.LiquidAssetBO;
import gov.state.nextgen.access.business.rules.assets.PersonalPropertyBO;
import gov.state.nextgen.access.business.rules.assets.RealPropertyBO;
import gov.state.nextgen.access.business.rules.assets.VehicleAssetBO;
import gov.state.nextgen.access.business.rules.expenses.ARHousingTypeBO;
import gov.state.nextgen.access.business.rules.household.InstitutionBO;
import gov.state.nextgen.access.business.validation.ChangingValidation;
import gov.state.nextgen.access.business.validation.afb.details.ABPPDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARASMValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARBADValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARBATValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARLADValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARLATValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARLIDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARLITValidator;
import gov.state.nextgen.access.business.validation.rmc.details.AROAQValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARRPDValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARRPTValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARVADValidator;
import gov.state.nextgen.access.business.validation.rmc.details.ARVATValidator;
import gov.state.nextgen.access.management.applications.CategorySequenceDetail;
import gov.state.nextgen.access.management.applications.IApplicationManager;
import gov.state.nextgen.access.management.applications.ICategorySelectionProfileManager;
import gov.state.nextgen.access.management.applications.IRMCResponseProfileManager;
import gov.state.nextgen.access.management.applications.QuestionsExtractionHandler;
import gov.state.nextgen.access.management.applications.RMBRequestManager;
import gov.state.nextgen.access.management.applications.RMCRequestManager;
import gov.state.nextgen.access.management.constants.AppConstants;
import gov.state.nextgen.access.management.individuals.PeopleHandler;
import gov.state.nextgen.access.management.util.IndivTypeSeqBean;
import gov.state.nextgen.access.presentation.entities.listview.ARLiquidAssetCashSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.ARLiquidAssetFinancialAccountSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.ARLiquidAssetOtherAssetTransferSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.ARLiquidAssetOtherLiquidAssetSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBBurialAssetsSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBBurialPropertyGPAssetsListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBCashLiquidAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBLifeInsuranceAssetsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBLifeInsuranceAssetsSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBLiquidAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBLiquidAssetsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBOtherLiquidAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBPersonalPropertyGPAssetsListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBPersonalPropertySummaryListview;
import gov.state.nextgen.access.presentation.entities.listview.RMBRealEstateAssetsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBRealEstateAssetsSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBSoldLiquidAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBVehicleAssetsGPListView;
import gov.state.nextgen.access.presentation.entities.listview.RMBVehicleAssetsSummaryListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCBurialAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCCashGatePostListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCLifeInsuranceAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCPersonalPropertyAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCRealEstateAssetSelectionListView;
import gov.state.nextgen.access.presentation.entities.listview.RMCVehicleAssetSelectionListView;
import gov.state.nextgen.framework.business.entities.FwTransaction;
import gov.state.nextgen.framework.driver.IDriver;
import gov.state.nextgen.framework.exceptions.FwException;
import gov.state.nextgen.framework.exceptions.FwExceptionManager;
import gov.state.nextgen.framework.exceptions.FwWrappedException;
import gov.state.nextgen.framework.exceptions.IException;
import gov.state.nextgen.framework.factories.FwServiceFactory;
import gov.state.nextgen.framework.management.constants.FwConstants;
import gov.state.nextgen.framework.management.logging.wkp.ILog;
import gov.state.nextgen.framework.management.messages.FwMessageList;
import gov.state.nextgen.framework.management.references.IReferenceConstants;
import gov.state.nextgen.framework.management.references.IReferenceTableData;
import gov.state.nextgen.framework.management.references.IReferenceTableManager;
import gov.state.nextgen.framework.management.references.ReferenceTableManager;

/**
 * Bean implementation class for Enterprise Bean: RMCLiquidAndOtherAssetsEJB.
 */

/* ************************************************************************************
 * ***************** SONAR FIXES MADE IN THIS CODE
 * ************************************** ISSUE DESCRIPTION NATURE OF FIX DATE
 * **** ================== ============= **** **** Avoid commented code Deleted
 * Commented code 08/26/2015 ** Lage Blocks of commented code *** are converted
 * to javadoc *** **
 * *************************************************************
 * *************************
 */

@javax.ejb.Stateless
@javax.ejb.LocalBean
@javax.ejb.TransactionManagement(javax.ejb.TransactionManagementType.CONTAINER)
public class RMCLiquidAndOtherAssetsEJBBean extends
gov.state.nextgen.access.business.services.RMCSessionBean {

	/** The Constant serialVersionUID. */
	static final long serialVersionUID = 3206093459760846163L;
	@EJB
	private RMCLiquidAndOtherAssetsEJBBean rmcLiquidAndOtherAssetsEJBBean;

	/**
	 * Constructor.
	 */
	public RMCLiquidAndOtherAssetsEJBBean() {
	}

	/**
	 * the personal property details
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void getPersonalPropertyDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getPersonalPropertyDetails() - START");
		try {
			log(ILog.INFO, "OtherAssetEJBBean::getPersonalPropertyDetail:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// make loopingQuestion value NO in the request
			request.put("loopingQuestion", FwConstants.NO);
			APP_IN_P_PROP_ASET_Collection rmcInPrsnPropColl;
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = null;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TPPR", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			refData.getCodeValues();
			final Map realPropertyTypeMap = new HashMap();
			/*
			 * VG SONAR Cleanup - 08/26/2015 Deleted 2,3,2,3,1 lines Commented
			 * Code in this block
			 */

			realPropertyTypeMap.put("PA", "PA");

			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (driverStatus == FwConstants.DRIVER_REQUIRED
					|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
			} else if (driverStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
			}
			final short[] responseChangeType = new short[] {

					IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY

			};

			SortedSet prsnProfile = null;
			// EDSP RMB added for rmb person
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			final PersonalPropertyBO aBPersonalPropertyBO = new PersonalPropertyBO();

			if (!currentPageID.equals(previousPageId)) {
				prsnProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseChangeType);
				// EDSP RMB need to remove

				if (driverStatus != FwConstants.DRIVER_REQUIRED) {
					APP_IN_P_PROP_ASET_Collection rmcPropCol = aBPersonalPropertyBO
							.loadPersonalProperty(appNumber);
					rmcPropCol = aBPersonalPropertyBO.splitRealColl(rmcPropCol,
							AppConstants.RMC_NEW_RECORD_IND);

					if (rmcPropCol != null && !rmcPropCol.isEmpty()) {
						APP_IN_P_PROP_ASET_Cargo rmcInPrsnPropCargo = null;
						final int newRealCollSize = rmcPropCol.size();
						for (int i = 0; i < newRealCollSize; i++) {
							rmcInPrsnPropCargo = rmcPropCol.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									prsnProfile,
									null,
									null,
									Short.parseShort(rmcInPrsnPropCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInPrsnPropCargo
													.getSeq_num()),
													AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
						}
					}
				}

				if (driverStatus == FwConstants.DRIVER_REQUIRED
						|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(prsnProfile);
				}
				if (driverStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(prsnProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				prsnProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}
				/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 6 lines Commented Code
				 * in this block
				 */

			}
			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Personal_IndSeqBean");
			}

			// When user hits the Back button or comes from the Summary Page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								prsnProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(prsnProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							prsnProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						// first we are checking rmc in profile exists in the
						// sess
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						rmcResponseProfileManager
						.makeAddNew(
								IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(prsnProfile, null, null,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(
								prsnProfile,
								null,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(prsnProfile, null,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(
								categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Personal_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}
			pageCollection
			.put(AppConstants.RMC_CATEGORY_PAGE_PRFL, prsnProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(prsnProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(prsnProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInPrsnPropColl = aBPersonalPropertyBO
					.loadIndividualPersonalPropertyDetails(appNumber,
							indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_P_PROP_ASET_Collection",
					rmcInPrsnPropColl);
			/**
			 * if (categorySeqDetail.getUserEndSelectionInd()== 1) { pageMode =
			 * "E"; } else
			 * if(indivSeqBean!=null&&indivSeqBean.getUserEndInd()!=null) { if
			 * (indivSeqBean.getUserEndInd().equalsIgnoreCase(FwConstants.ONE))
			 * { pageMode = "E"; }else{
			 * if(addnewPerson.equalsIgnoreCase(FwConstants.YES)) pageMode =
			 * FwConstants.NO; else pageMode = "C"; } }else{
			 * if(addnewPerson.equalsIgnoreCase(FwConstants.YES)) pageMode =
			 * FwConstants.NO; else pageMode = "C"; }
			 */
			// EDSP RMB added new person
			APP_IN_P_PROP_ASET_Cargo cwwPrsnPropCargo = aBPersonalPropertyBO
					.splitRealPropColl(rmcInPrsnPropColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwPrsnPropCargo == null) {
				cwwPrsnPropCargo = new APP_IN_P_PROP_ASET_Cargo();
				/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 1,2 lines Commented
				 * Code in this block
				 */

			}
			pageCollection.put("SEC_PROP", aBPersonalPropertyBO
					.settingRealPropertyDefaultValues(cwwPrsnPropCargo));
			// EDSP RMB Added RM category

			APP_IN_P_PROP_ASET_Cargo rmcPrsnCargo1 = aBPersonalPropertyBO
					.splitRealPropColl(rmcInPrsnPropColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
			if (rmcPrsnCargo1 != null) {
				pageCollection.put("FST_PROP", aBPersonalPropertyBO
						.settingRealPropertyDefaultValues(rmcPrsnCargo1));
			} else {
				rmcPrsnCargo1 = aBPersonalPropertyBO.splitRealPropColl(
						rmcInPrsnPropColl, AppConstants.RMC_NEW_RECORD_IND);
				if (rmcPrsnCargo1 != null) {
					pageCollection.put("FST_PROP", aBPersonalPropertyBO
							.settingRealPropertyDefaultValues(rmcPrsnCargo1));
				} else {
					rmcPrsnCargo1 = aBPersonalPropertyBO.splitRealPropColl(
							rmcInPrsnPropColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcPrsnCargo1 != null) {
						pageCollection
						.put("FST_PROP",
								aBPersonalPropertyBO
								.settingRealPropertyDefaultValues(rmcPrsnCargo1));
					} else {
						pageCollection
						.put("FST_PROP",
								aBPersonalPropertyBO
								.settingRealPropertyDefaultValues(cwwPrsnPropCargo));
					}

				}
			}
			if (rmcInPrsnPropColl != null && !rmcInPrsnPropColl.isEmpty()) {
				final APP_IN_P_PROP_ASET_Cargo rmcInSelfeCargo = rmcInPrsnPropColl
						.getCargo(0);
				srcAppInd = rmcInSelfeCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1)
			/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 3,3 lines Commented Code in
				 * this block
				 */

			{
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			// set Details_Collection from session to PageCollection
			if (rmcInPrsnPropColl != null && !rmcInPrsnPropColl.isEmpty()) {
				final APP_IN_P_PROP_ASET_Cargo appRPropCargo = rmcInPrsnPropColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				final String subType = appRPropCargo.getPrsn_prop_aset_typ();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (appRPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = aBPersonalPropertyBO
							.loadIndividualJointOwnerDetails(
									(String) session
									.get(AppConstants.APP_NUMBER),
									indvSeqNum,
									AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY,
									subType, appRPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						/*
						 * VG SONAR Cleanup - 08/26/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						// EDSP RMB adding CWJnt collection
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			/*
			 * VG SONAR Cleanup - 08/26/2015 Changed Commented code block to
			 * javadoc
			 */
			/**
			 * if(!previousPageId.equals(currentPageID)) { //clean Session and
			 * BeforeCollection session.remove("APP_IN_P_PROP_ASET_Collection");
			 * session.remove(FwConstants.BEFORE_COLLECTION);
			 * if(!"ABOAS".equals(previousPageId)){
			 * pageCollection.remove(FwConstants.DETAIL_KEY_BEAN); } }
			 */
			/**
			 * // driverManager.makeRequired(FwConstants.AFB_DRIVER,
			 * currentPageID, //
			 * driverArray,(String)session.get(AppConstants.APP_NUMBER)); // int
			 * driverStatus = (int) //
			 * driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
			 * // driverArray);
			 *
			 */
			/**
			 * ABPPDValidator abppdValidator = new ABPPDValidator();
			 * PersonalPropertyBO aBPersonalPropertyBO = new
			 * PersonalPropertyBO();
			 */

			// When user hits the Back button or comes from the Summary Page
			/**
			 * if(pageCollection.get(FwConstants.DETAIL_KEY_BEAN)!=null) { //get
			 * PersonalProperty details from PersonalProperty details table in
			 * database IndivTypeSeqBean indvBean =
			 * (IndivTypeSeqBean)pageCollection
			 * .get(FwConstants.DETAIL_KEY_BEAN); pageCollection = new
			 * HashMap(); //get Details_Collection from DataBase and set to
			 * PageCollection APP_IN_P_PROP_ASET_Collection appPropCol =
			 * aBPersonalPropertyBO
			 * .loadIndividualPersonalPropertyDetails((String
			 * )session.get(AppConstants.APP_NUMBER), indvBean.getIndivSeqNum(),
			 * indvBean.getSeqNum());
			 * pageCollection.put("APP_IN_P_PROP_ASET_Collection", appPropCol);
			 * populateOtherPersonalDetailsCargo(session, pageCollection,
			 * driverStatus); } else { pageCollection = new HashMap(); //check
			 * the session and pageCollection for APP_IN_P_PROP_ASET_Collection
			 * //if not found read the database and populate the RecordArray.
			 * if(session.get("APP_IN_P_PROP_ASET_Collection") == null) {
			 * setPersonalPropertyCollectionToSession(txnBean, driverStatus); }
			 * //check is pageStatus is REQ OR ADDNEW or VISIT_AGAIN
			 * if(driverStatus == FwConstants.DRIVER_REQUIRED || driverStatus ==
			 * FwConstants.DRIVER_ADD_NEW || driverStatus ==
			 * FwConstants.DRIVER_VISIT_AGAIN) { RMC_IN_PRFL_Collection
			 * appInPrflColl_Session =
			 * (RMC_IN_PRFL_Collection)session.get(AppConstants
			 * .RMC_IN_PRFL_MASTER); RMC_IN_PRFL_Cargo appinprflCargo = null;
			 * //Reference Table Code //IReferenceTableManager iref =
			 * ReferenceTableManager.getInstance(); //IReferenceTableData
			 * refData =
			 * iref.getReferenceTableData("TLAS",(String)((Map)session.
			 * get(FwConstants.HTTP_SESSION)).get(AppConstants.LANGUAGE));
			 * //String[] codeValues = refData.getCodeValues(); String
			 * indvSeqNum = null; int cargoSize = appInPrflColl_Session.size();
			 * String incType = null;
			 *
			 * int len = 0; boolean successFlag = false;
			 *
			 * String resp=null; PeopleHandler peopleHandler =
			 * (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			 * //loop thru appInPrflColl_Session for(int i=0; i<cargoSize; i++)
			 * { appinprflCargo = (RMC_IN_PRFL_Cargo)
			 * appInPrflColl_Session.getCargo(i); indvSeqNum =
			 * appinprflCargo.getIndv_seq_num();
			 * appinprflCargo.setOther_asset_personal_prop_resp("R");
			 * //appinprflCargo.setLqd_aset_ira_resp("R"); //len =
			 * codeValues.length; char typeStatus = 'N'; //for(int k=0; k<len;
			 * k++) //{ //incType = codeValues[k]; typeStatus =
			 * rmcResponseProfileManager.getProfileResponse(appinprflCargo,
			 * IRMCResponseProfileManager
			 * .OTHR_ASET_PERSONAL_PROPERTY).charAt(0);
			 *
			 *
			 * if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN)
			 * { setPersonalPropertyDetailsCargoFromSession(session,
			 * pageCollection, driverStatus, indvSeqNum); successFlag = true;
			 * break; } else if(typeStatus ==
			 * IRMCResponseProfileManager.STATUS_REQUIRED || typeStatus ==
			 * IRMCResponseProfileManager.STATUS_ADD_NEW) {
			 * setPersonalPropertyDetailsCargo(indvSeqNum, session,
			 * pageCollection); successFlag = true; break; } //} if(successFlag)
			 * { break; } } } else { PeopleHandler peopleHandler =
			 * (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			 * APP_IN_P_PROP_ASET_Collection coll_ses =
			 * (APP_IN_P_PROP_ASET_Collection)
			 * session.get("APP_IN_P_PROP_ASET_Collection");
			 * APP_IN_P_PROP_ASET_Collection newColl = new
			 * APP_IN_P_PROP_ASET_Collection(); if(coll_ses!=null){
			 * APP_IN_P_PROP_ASET_Cargo cargo_ses = null; int size =
			 * coll_ses.size(); if(size > 0){ //get last cargo from session
			 * cargo_ses = coll_ses.getCargo(size-1);
			 * pageCollection.put(AppConstants.FIRST_NAME,
			 * peopleHandler.getFirstName(cargo_ses.getIndv_seq_num())); }
			 * newColl.addCargo(cargo_ses); } //set Details_Collection from
			 * session to PageCollection
			 * pageCollection.put("APP_IN_P_PROP_ASET_Collection", newColl); } }
			 */
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("INDIVIDUAL_Custom_Collection", indivCustCol);
			pageCollection.put("PEOPLE_5211", indivCustCol);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("PROP_TYPE", categoryType);
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			/*
			 * VG SONAR Cleanup - 08/26/2015 Changed Commented code block to
			 * javadoc
			 */
			/**
			 * // set Details_Collection from session to PageCollection //
			 * APP_IN_P_PROP_ASET_Collection personalPropColl = //
			 * (APP_IN_P_PROP_ASET_Collection
			 * )pageCollection.get("APP_IN_P_PROP_ASET_Collection"); /*
			 * if(personalPropColl != null && personalPropColl.size() > 0){
			 * APP_IN_P_PROP_ASET_Cargo appPropCargo =
			 * personalPropColl.getCargo(0); //String
			 * subType=appPropCargo.getPrsn_prop_aset_typ(); String
			 * indvSeqNum=appPropCargo.getIndv_seq_num();
			 *
			 * if(appPropCargo.getSeq_num() != null){ APP_IN_JNT_OWN_Collection
			 * appInJntCol
			 * =aBPersonalPropertyBO.loadIndividualJointOwnerDetails(
			 * (String)session.get(AppConstants.APP_NUMBER), indvSeqNum,
			 * AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY,appPropCargo.
			 * getPrsn_prop_aset_typ(),appPropCargo.getSeq_num());
			 * if(appInJntCol !=null && appInJntCol.size()>0){
			 * pageCollection.put("APP_IN_JNT_OWN_Collection", appInJntCol); } }
			 * }
			 */

			// put the Current Individual Sequence Number in the pageCollection
			/**
			 * if(personalPropColl != null && personalPropColl.size() > 0){
			 * APP_IN_P_PROP_ASET_Cargo appPropCargo =
			 * personalPropColl.getCargo(0); String
			 * indvSeqNum=appPropCargo.getIndv_seq_num();
			 * pageCollection.put(AppConstants
			 * .CURRENT_INDIV_SEQ_NUM,indvSeqNum); }
			 */
			// Getting people handler object from session
			txnBean.setPageCollection(pageCollection);
			// Run ComponentManager to get the components for the current page
			componentManager.getComponents(currentPageID, txnBean);
			// Add the page collection to before collection
			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
					// EDSP RMB clearing app_in_jnt_owner collection from
					// pagecollection
					/**
					 * if (!((APP_IN_JNT_OWN_Collection)pageCollection.get(
					 * "APP_IN_JNT_OWN_Collection")).isEmpty())
					 * ((Map)pageCollection
					 * ).remove("APP_IN_JNT_OWN_Collection");
					 */
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);
			request.remove("loopingQuestion");
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			log(ILog.INFO, "OtherAssetEJBBean::getPersonalPropertyDetail:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getPersonalPropertyDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"getPersonalPropertyDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getPersonalPropertyDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void storePersonalPropertyDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		log(ILog.INFO, "OtherAssetEJBBean::storePersonalPropertyDetail:Start");
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storePersonalPropertyDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final PersonalPropertyBO aBPersonalBO = new PersonalPropertyBO();
			final ABPPDValidator abppdValidator = new ABPPDValidator();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String pageMode = (String) beforePageColl.get("PAGE_MODE");
			final SortedSet prsnPropProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			// get the APP_IN_PRFL Collection from session
			final RMC_IN_PRFL_Collection appInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// get the BeforeCollection
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			// get Details aset Collection and Cargo
			APP_IN_P_PROP_ASET_Collection appInPropAsetColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			APP_IN_P_PROP_ASET_Cargo appInPropAsetCargo = appInPropAsetColl
					.getCargo(0);

			// get the Aset collection from Before Collection
			final APP_IN_P_PROP_ASET_Collection appInPropAsetBeforeColl = (APP_IN_P_PROP_ASET_Collection) beforePageColl
					.get("APP_IN_P_PROP_ASET_Collection");
			APP_IN_P_PROP_ASET_Cargo appInPropAsetBeforeCargo = null;

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");

			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");
			final PersonalPropertyBO prsnlPropertyBO = new PersonalPropertyBO();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(prsnPropProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			if (appInPropAsetCargo.getPrsn_prop_amt_ind() == null) {
				if (appInPropAsetCargo.getPrsn_prop_amt() != null
						&& FwConstants.EMPTY_STRING.equals(appInPropAsetCargo
								.getPrsn_prop_amt().trim())) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1,1 lines
					 * Commented Code in this block
					 */

					appInPropAsetCargo.setPrsn_prop_amt_ind("2");
				} else {
					appInPropAsetCargo.setPrsn_prop_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(appInPropAsetCargo.getPrsn_prop_amt() != null && FwConstants.EMPTY_STRING
						.equals(appInPropAsetCargo.getPrsn_prop_amt().trim()))) {

					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				appInPropAsetCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				appInPropAsetCargo.setJnt_own_resp(FwConstants.NO);
			}
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getBusiness_trade_farming_ind() != null
					&& appInPropAsetCargo.getBusiness_trade_farming_ind()
					.trim().length() == 0) {

				appInPropAsetCargo.setProperty_owe_amt(null);
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;
			int seqNum = 0;
			boolean prsnPropertyDetailsUpdate = false;
			if (appInPropAsetBeforeColl != null
					&& !appInPropAsetBeforeColl.isEmpty()) {
				final int size = appInPropAsetBeforeColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}
				appInPropAsetBeforeCargo = prsnlPropertyBO.splitRealPropColl(
						appInPropAsetBeforeColl, sourceAppIndicator);
				if (appInPropAsetBeforeCargo == null
						&& AppConstants.RMC_END_RECORD_IND
						.equals(sourceAppIndicator)) {
					appInPropAsetBeforeCargo = prsnlPropertyBO
							.splitRealPropColl(appInPropAsetBeforeColl,
									AppConstants.CWW_RECORD_IND);
				}
				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& appInPropAsetBeforeCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 2 lines Commented Code
				 * in this block
				 */

				if (appInPropAsetBeforeCargo != null) {

					appInPropAsetCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));
					appInPropAsetCargo.setSrc_app_ind(appInPropAsetBeforeCargo
							.getSrc_app_ind());
					appInPropAsetCargo.setIndv_seq_num(appInPropAsetBeforeCargo
							.getIndv_seq_num());

					appInPropAsetCargo.setSeq_num(appInPropAsetBeforeCargo
							.getSeq_num());
					appInPropAsetCargo.setRec_cplt_ind(appInPropAsetBeforeCargo
							.getRec_cplt_ind());

					if ("E".equalsIgnoreCase(pageMode)) {

						appInPropAsetCargo
						.setPrsn_prop_aset_typ(appInPropAsetBeforeCargo
								.getPrsn_prop_aset_typ());

					}
					// check dirty

				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
				appInPropAsetCargo = (APP_IN_P_PROP_ASET_Cargo) isChanged(
						appInPropAsetBeforeCargo, appInPropAsetCargo);
				// EDSP RMC adding appnum,indvseqnum,seqnum and aset type
				appInPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInPropAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 3,2,5 lines Commented
				 * Code in this block
				 */

				appInPropAsetCargo.setSeq_num(String.valueOf(seqNum));

				// EDSP RMC adding ends

				appInPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);
				appInPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				appInPropAsetCargo.setRowAction(recordInd);
				if (appInPropAsetCargo.isDirty()) {
					prsnPropertyDetailsUpdate = true;
				}

				// check dirty

			} else {

				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appInPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInPropAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = prsnlPropertyBO.getMaxSeqNumber(
						(String) session.get(AppConstants.APP_NUMBER),
						indvSeqNum);
				seqNum = seqNum + 1;
				appInPropAsetCargo.setSeq_num(String.valueOf(seqNum));

				/*
				 * VG SONAR Cleanup - 08/26/2015 Deleted 1,3 lines Commented
				 * Code in this block
				 */

				appInPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appInPropAsetCargo.setRowAction(recordInd);
				prsnPropertyDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(prsnPropProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());

				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
			}


			// commented by EDSP-CP team to avoid seperate validation calls and
			// include joint owner validation in validatePersonalPropertyDetails

			// comment by EDSP-CP end
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}
			abppdValidator.validateRMBPersonalPropertyDetails(
					appInPropAsetColl,
					(String) beforePageColl.get(AppConstants.FIRST_NAME),
					peopleHandler, beforePageColl, request);

			abppdValidator.validateJointOwnerInformation(appInJntOwnColl);

			if (userEndInd == 1) {
				abppdValidator.validateEndScreen(appInPropAsetCargo);
			}

			/*
			 * VG SONAR Cleanup - 08/26/2015 Deleted 2 lines Commented Code in
			 * this block
			 */

			if (abppdValidator.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST,
						abppdValidator.getMessageList());
				pageCollection.put("PEOPLE_377",
						beforePageColl.get("PEOPLE_377"));
				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				// put the first Name into request to avoid null pointer in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));
				pageCollection.put("ShowLoopingQuestionFlag",
						beforePageColl.get("ShowLoopingQuestionFlag"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("APP_IN_P_PROP_Collection",
						appInPropAsetColl);
				pageCollection
				.put("PROP_TYPE", beforePageColl.get("PROP_TYPE"));

				pageCollection
				.put("PAGE_MODE", beforePageColl.get("PAGE_MODE"));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				if (beforePageColl.containsKey("SEC_PROP")) {
					pageCollection.put("SEC_PROP",
							beforePageColl.get("SEC_PROP"));
				}
				if (beforePageColl.containsKey("SEC_JNT")) {
					pageCollection
					.put("SEC_JNT", beforePageColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				pageCollection.put("FST_PROP", appInPropAsetCargo);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				return;
			}

			/*
			 * VG SONAR Cleanup - 08/26/2015 Deleted 1,1 lines Commented Code in
			 * this block
			 */

			// completeness check
			appInPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);
			// PersistData if the cargo is dirty
			/**
			 * if(appInPropAsetCargo!=null &&
			 * appInPropAsetCargo.getPrsn_prop_amt()!=null &&
			 * appInPropAsetCargo.getPrsn_prop_amt().trim().length() == 0){
			 * appInPropAsetCargo.setPrsn_prop_amt(FwConstants.ZERO); }
			 * if(appInPropAsetCargo!=null &&
			 * appInPropAsetCargo.getProperty_owe_amt()!=null &&
			 * appInPropAsetCargo.getProperty_owe_amt().trim().length() == 0){
			 * appInPropAsetCargo.setProperty_owe_amt(FwConstants.ZERO); }
			 */
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getPrsn_prop_aset_typ() != null
					&& FwConstants.DEFAULT_DROPDOWN_SEL
					.equalsIgnoreCase(appInPropAsetCargo
							.getPrsn_prop_aset_typ())) {

				appInPropAsetCargo.setPrsn_prop_aset_typ(null);
			}
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAcquired_dt() != null
					&& appInPropAsetCargo.getAcquired_dt().trim().length() == 0) {
				appInPropAsetCargo.setAcquired_dt(AppConstants.LOW_DATE);
			} else if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAcquired_dt() != null) {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = appInPropAsetCargo.getAcquired_dt();
				if (appInPropAsetCargo.getAcquired_dt().length() == 10
						&& appInPropAsetCargo.getAcquired_dt().charAt(2) == '/') {
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					appInPropAsetCargo.setAcquired_dt(dateConverter.toString());
				}
			}

			if (prsnPropertyDetailsUpdate) {
				appInPropAsetColl = aBPersonalBO
						.storePersonalProperty(appInPropAsetColl);
			}
			appInPropAsetCargo = appInPropAsetColl.getCargo(0);
			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;

			/**
			 * if(appInJntOwnColl != null){ int appInJntCollSize =
			 * appInJntOwnColl.size(); APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
			 * for(int i =0; i < appInJntCollSize; i++){ jntOwnCargo =
			 * appInJntOwnColl.getCargo(i); if(jntOwnCargo.getJnt_indv_seq_num()
			 * != null &&
			 * jntOwnCargo.getJnt_indv_seq_num().equals(FwConstants.ZERO) &&
			 * (jntOwnCargo.getJnt_own_fst_nam() == null
			 * ||jntOwnCargo.getJnt_own_fst_nam().trim().length() ==0) &&
			 * (jntOwnCargo.getJnt_own_last_nam() == null
			 * ||jntOwnCargo.getJnt_own_last_nam().trim().length() ==0) &&
			 * (jntOwnCargo.getOtsd_ind() == null
			 * ||jntOwnCargo.getOtsd_ind().trim().length() ==0)){
			 * appInJntOwnColl.remove(i); i--; appInJntCollSize--; } } }
			 */
			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (appInJntBeforeColl != null) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);
						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(appInPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(appInPropAsetCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
									.getPrsn_prop_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);
						/*
						 * VG SONAR Cleanup - 08/26/2015 Deleted 2,2 lines
						 * Commented Code in this block
						 */

						if (appInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
									.setApp_num(appInPropAsetCargo
											.getApp_num());
									appInJntOwnCargo
									.setJnt_own_seq_num(appInPropAsetCargo
											.getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
									.setIndv_seq_num(appInPropAsetCargo
											.getIndv_seq_num());
									appInJntOwnCargo
									.setAset_sub_typ(appInPropAsetCargo
											.getPrsn_prop_aset_typ());
									appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_last_nam(null);
									}

									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									appInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(appInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInJntOwnCargo.setApp_num(appInPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(appInPropAsetCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
									.getPrsn_prop_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& appInJntOwnCargo.getSrc_app_ind() != null
																		&& appInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					/*
					 * VG SONAR Cleanup - 08/26/2015 Deleted 5,2,2,1 lines
					 * Commented Code in this block
					 */

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}
					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(appInPropAsetCargo
								.getApp_num());
						appInJntOwnCargo.setJnt_own_seq_num(appInPropAsetCargo
								.getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
								.getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
								.getPrsn_prop_aset_typ());
						appInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInJntOwnCargo
										.getJnt_indv_seq_num())) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));

						appInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}
			/*
			 * VG SONAR Cleanup - 08/27/2015 Changed Commented code block to
			 * javadoc
			 */
			// user pressed back and the before collection is not null delete it
			// else update it.
			/**
			 * if(appInJntBeforeColl != null){ int appInjntBeforeCollSize =
			 * appInJntBeforeColl.size(); for(int i =0; i <
			 * appInjntBeforeCollSize; i++){ appInJntOwnBeforeCargo =
			 * appInJntBeforeColl.getCargo(i); appInJntOwnCargo =
			 * getMatchingCargo(appInJntOwnColl,appInJntOwnBeforeCargo);
			 * //appInJntOwnCargo =
			 * getMatchingCargo(appInJntOwnColl,appInJntOwnBeforeCargo
			 * .getJnt_indv_seq_num(),appInJntOwnBeforeCargo.getOtsd_ind());
			 * if(appInJntOwnCargo == null){
			 * appInJntOwnBeforeCargo.setRowAction(
			 * FwConstants.ROWACTION_DELETE);
			 * appInJntOwnNewColl.add(appInJntOwnBeforeCargo); } else{ //now we
			 * need to check the dirty indicator
			 * appInJntOwnCargo.setApp_num(appInPropAsetCargo.getApp_num());
			 * appInJntOwnCargo
			 * .setJnt_own_seq_num(appInPropAsetCargo.getSeq_num());
			 * appInJntOwnCargo
			 * .setIndv_seq_num(appInPropAsetCargo.getIndv_seq_num());
			 * appInJntOwnCargo
			 * .setAset_sub_typ(appInPropAsetCargo.getPrsn_prop_aset_typ());
			 * appInJntOwnCargo
			 * .setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY); if
			 * (appInJntOwnCargo.getJnt_indv_seq_num() != null &&
			 * appInJntOwnCargo.getJnt_indv_seq_num().equals(FwConstants.ZERO))
			 * appInJntOwnCargo.setOtsd_ind(FwConstants.YES); else
			 * appInJntOwnCargo.setOtsd_ind(FwConstants.NO);
			 * if(appInJntOwnCargo.getJnt_own_fst_nam() == null)
			 * appInJntOwnCargo.setJnt_own_fst_nam(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getJnt_own_last_nam() == null)
			 * appInJntOwnCargo.setJnt_own_last_nam(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getOtsd_ind() == null)
			 * appInJntOwnCargo.setOtsd_ind(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getSeq_num() == null)
			 * appInJntOwnCargo.setSeq_num(appInJntOwnBeforeCargo.getSeq_num());
			 * appInJntOwnCargo =
			 * (APP_IN_JNT_OWN_Cargo)isChanged(appInJntOwnBeforeCargo
			 * ,appInJntOwnCargo); if(appInJntOwnCargo.isDirty()){
			 * if(appInJntOwnCargo
			 * .getIndv_seq_num().equals(appInJntOwnBeforeCargo
			 * .getIndv_seq_num()) &&
			 * appInJntOwnCargo.getSeq_num().equals(appInJntOwnBeforeCargo
			 * .getSeq_num()) &&
			 * appInJntOwnCargo.getAset_typ().equals(appInJntOwnBeforeCargo
			 * .getAset_typ()) && appInJntOwnCargo.getAset_sub_typ().equals(
			 * appInJntOwnBeforeCargo .getAset_sub_typ()) &&
			 * appInJntOwnCargo.getJnt_own_seq_num().equals
			 * (appInJntOwnBeforeCargo.getJnt_own_seq_num()) ) {
			 * appInJntOwnCargo.setRowAction(FwConstants.ROWACTION_UPDATE); }
			 * else { //EDSP RMC adding src of innd
			 * appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);
			 * appInJntOwnCargo.setRowAction(FwConstants.ROWACTION_INSERT); }
			 * appInJntOwnNewColl.add(appInJntOwnCargo); } } } } //values
			 * entered and when the user tries to save the record first time
			 * if(appInJntOwnColl != null){ int appInJntCollSize =
			 * appInJntOwnColl.size(); for(int i =0; i < appInJntCollSize; i++){
			 * appInJntOwnCargo = appInJntOwnColl.getCargo(i);
			 * appInJntOwnBeforeCargo =
			 * getMatchingCargo(appInJntBeforeColl,appInJntOwnCargo);
			 * if(appInJntOwnBeforeCargo == null){
			 * appInJntOwnCargo.setApp_num(appInPropAsetCargo.getApp_num());
			 * appInJntOwnCargo
			 * .setJnt_own_seq_num(appInPropAsetCargo.getSeq_num());
			 * appInJntOwnCargo
			 * .setIndv_seq_num(appInPropAsetCargo.getIndv_seq_num());
			 * appInJntOwnCargo
			 * .setAset_sub_typ(appInPropAsetCargo.getPrsn_prop_aset_typ());
			 * appInJntOwnCargo
			 * .setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
			 * if(appInJntOwnCargo.getJnt_own_fst_nam() == null)
			 * appInJntOwnCargo.setJnt_own_fst_nam(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getJnt_own_last_nam() == null)
			 * appInJntOwnCargo.setJnt_own_last_nam(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getOtsd_ind() == null)
			 * appInJntOwnCargo.setOtsd_ind(FwConstants.SPACE);
			 * if(appInJntOwnCargo.getSeq_num() == null)
			 * appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
			 * appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);
			 * //appInJntOwnCargo.setSeq_num(appInJntBeforeCargo.getSeq_num());
			 * appInJntOwnCargo.setRowAction(FwConstants.ROWACTION_INSERT);
			 * appInJntOwnNewColl.add(appInJntOwnCargo); } } }
			 */

			aBPersonalBO.storeJointOwnerDetails(appInJntOwnNewColl);

			rmcResponseProfileManager.getProfile(appInPrflCollSession,
					appInPropAsetCargo.getIndv_seq_num());
			appInPropAsetCargo.getPrsn_prop_aset_typ();

			/*
			 * VG SONAR Cleanup - 08/27/2015 Changed Commented code block to
			 * javadoc
			 */
			/**
			 * // appinprflCargo_ses = //
			 * applicationManager.getAppInProfile(appInPrflColl_Session, //
			 * appInPropAsetCargo.getIndv_seq_num()); // String incType =
			 * appInPropAsetCargo.getPrsn_prop_aset_typ(); // short typeConstant
			 * = // applicationManager.getAppInPrflResponse(appinprflCargo_ses,
			 * // IApplicationManager.OTHR_ASET_PERSONAL_PROPERTY)); // Does
			 * LoopingQuestion flag is YES /*
			 * if(request.get("loopingQuestion")!= null &&
			 * ((String)request.get("loopingQuestion")).equals(FwConstants.YES))
			 * { if(rmcResponseProfileManager.getProfileResponse(
			 * appinprflCargo_ses ,
			 * rmcResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY).charAt(0)
			 * == rmcResponseProfileManager.STATUS_VISIT_AGAIN) { //Remove first
			 * Cargo from DetailCollection APP_IN_P_PROP_ASET_Collection
			 * coll_Session = (APP_IN_P_PROP_ASET_Collection)
			 * session.get("APP_IN_P_PROP_ASET_Collection");
			 * coll_Session.remove(appInPropAsetBeforeCargo); //Make "Complete"
			 * for Type rmcResponseProfileManager.makeComplete(typeConstant,
			 * appinprflCargo_ses,true); //Make "AddNew" for Type
			 * rmcResponseProfileManager.makeAddNew(typeConstant,
			 * appinprflCargo_ses,true); //Make driver for this page ADDNEW - if
			 * typeStatus is VisitAgain
			 * driverManager.makeAddNew(FwConstants.RMC_DRIVER, currentPageID,
			 * driverArray, (String)session.get(AppConstants.APP_NUMBER)); } }
			 * else { //check if pageStatus is REQ OR ADDNEW ? if(driverStatus
			 * == FwConstants.DRIVER_REQUIRED || driverStatus ==
			 * FwConstants.DRIVER_ADD_NEW) {
			 * if((beforePageColl.get(FwConstants.LAST_RECORD_INDEX)!= null) &&
			 * (beforePageColl.get(FwConstants.CURRENT_RECORD_INDEX)!= null) &&
			 * ( (String)beforePageColl.get(FwConstants.LAST_RECORD_INDEX)).
			 * equals
			 * ((String)beforePageColl.get(FwConstants.CURRENT_RECORD_INDEX))) {
			 * //Make "Complete" for Type and persist
			 * rmcResponseProfileManager.makeComplete(typeConstant,
			 * appinprflCargo_ses,true); } } else //when page status is
			 * VisitAgain or Complete { //Remove first Cargo from
			 * DetailCollection APP_IN_P_PROP_ASET_Collection coll_Session =
			 * (APP_IN_P_PROP_ASET_Collection)
			 * session.get("APP_IN_P_PROP_ASET_Collection");
			 * //APP_IN_JNT_OWN_Collection
			 * appJntColl=(APP_IN_JNT_OWN_Collection)
			 * session.get("APP_IN_JNT_OWN_Collection"); if(coll_Session !=
			 * null){ coll_Session.remove(appInPropAsetBeforeCargo); }
			 *
			 * if(driverStatus != FwConstants.DRIVER_COMPLETE) { //if the Next
			 * Cargo is not for the same person and same type then make the type
			 * Complete if(coll_Session.size()>0) { APP_IN_P_PROP_ASET_Cargo
			 * tempCargo = coll_Session.getCargo(0);
			 * if(!(tempCargo.getPrsn_prop_aset_typ().equals(incType))) { //Make
			 * "Complete" for Type and persist
			 * rmcResponseProfileManager.makeComplete(typeConstant,
			 * appinprflCargo_ses,true); } else
			 * if(!tempCargo.getIndv_seq_num().equals
			 * (appInPropAsetCargo.getIndv_seq_num())){ // Make "Complete" for
			 * Type and persist
			 * rmcResponseProfileManager.makeComplete(typeConstant,
			 * appinprflCargo_ses,true); } } else { //Make "Complete" for Type
			 * and persist rmcResponseProfileManager.makeComplete(typeConstant,
			 * appinprflCargo_ses,true); } } } //Define DetailsFinishedFlag as
			 * True boolean detailsFinishedFlag = true; RMC_IN_PRFL_Cargo
			 * appinprflCargo_Session = null; int cargoSize =
			 * appInPrflColl_Session.size(); //loop thru appInPrflColl_Session
			 * for(int i=0; i<cargoSize; i++) { appinprflCargo_Session = new
			 * RMC_IN_PRFL_Cargo(); appinprflCargo_Session = (RMC_IN_PRFL_Cargo)
			 * appInPrflColl_Session.getCargo(i); //Reference Table Code
			 * //IReferenceTableManager iref =
			 * ReferenceTableManager.getInstance(); //IReferenceTableData
			 * refData =
			 * iref.getReferenceTableData("TLAS",(String)((Map)session.
			 * get(FwConstants.HTTP_SESSION)).get(AppConstants.LANGUAGE));
			 * //String[] codeValues = refData.getCodeValues(); //int len =
			 * codeValues.length; //String type = null; char typeStatus = 'N';
			 * //check if any type is required, visitAgain and AddNew //for(int
			 * k=0; k<len; k++) //{ //type = codeValues[k]; typeStatus =
			 * rmcResponseProfileManager
			 * .getProfileResponse(appinprflCargo_Session,
			 * IRMCResponseProfileManager
			 * .OTHR_ASET_PERSONAL_PROPERTY).charAt(0); if(typeStatus ==
			 * IRMCResponseProfileManager.STATUS_REQUIRED || typeStatus==
			 * IRMCResponseProfileManager.STATUS_ADD_NEW || typeStatus ==
			 * IRMCResponseProfileManager.STATUS_VISIT_AGAIN) {
			 * detailsFinishedFlag = false; break; } if(detailsFinishedFlag ==
			 * false){ break; } //} } //check the detailsFinishedFlag
			 * if(detailsFinishedFlag == true) { //Make driver for this page
			 * "COMPLETE" driverManager.makeComplete(FwConstants.RMC_DRIVER,
			 * currentPageID, driverArray,
			 * (String)session.get(AppConstants.APP_NUMBER)); }
			 * beforePageColl.remove("APP_IN_P_PROP_ASET_Collection");
			 * beforePageColl.remove("APP_IN_JNT_OWN_Collection");
			 *
			 * }
			 */
			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE

				categorySelectionProfileManager.insertSequenceDetail(
						prsnPropProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			}
			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));

				if (rmcInPrflCargo != null) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented
					 * Code in this block
					 */

					rmcResponseProfileManager
					.makeComplete(
							IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			categorySelectionProfileManager.makeSequenceDetailComplete(
					prsnPropProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());

			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(prsnPropProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(prsnPropProfile);
			}
			log(ILog.INFO, "OtherAssetEJBBean::storePersonalPropertyDetail:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storePersonalPropertyDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storePersonalPropertyDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storePersonalPropertyDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load other asset gate post questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	// OTHer Resources Strts
	public void loadOtherAssetGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherAssetGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetGatePostQuestions:Start");
			final Map pageCollection = txnBean.getPageCollection();
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String currentLang = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			final String jsEnabled = (String) httpSessMap
					.get(FwConstants.JS_ENABLED);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");

			final AssetBO assetBO = new AssetBO();
			final LiquidAssetBO livingAssetBO = new LiquidAssetBO();
			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			final RealPropertyBO realPropertyBO = new RealPropertyBO();
			final BurialAssetBO burialAssetBO = new BurialAssetBO();
			final LifeInsuranceBO lifeInsuranceBO = new LifeInsuranceBO();
			// EDSP
			final PersonalPropertyBO personalPropertyBO = new PersonalPropertyBO();
			// ENDS

			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(), "R");
			}

			// get questions extraction handler from session
			final QuestionsExtractionHandler extractionHandler = (QuestionsExtractionHandler) session
					.get(AppConstants.QUESTION_EXTRACTION_HANDLER);
			// now get the components for the current page
			componentManager.getComponents("AROAQ", txnBean);
			// get component list from page collection
			final List cpntList = (ArrayList) pageCollection
					.get(FwConstants.PAGE_COMPONENT_LIST);

			// intialize webservice type array
			final List typeArrayList = new ArrayList();

			// Checking for Liquid Asset
			if (cpntList.contains("5214")
					&& !extractionHandler.checkRMBExtractionStatus("AROAQ",
							"5214")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_LIQUID);
			}
			// Checking for Vehicle Asset
			if (cpntList.contains("5215")
					&& !extractionHandler.checkRMBExtractionStatus("AROAQ",
							"5215")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_VEHICLE);
			}
			// Checking for Real Property Asset
			if (cpntList.contains("5217")
					&& !extractionHandler.checkRMBExtractionStatus("AROAQ",
							"5217")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_REAL_PROPERTY);
			}
			// Checking for Burial Property Asset
			if (cpntList.contains("5218")
					&& !extractionHandler.checkRMBExtractionStatus("AROAQ",
							"5218")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_BURIAL);
			}
			// Checking for Life Insurance Asset
			if (cpntList.contains("5219")
					&& !extractionHandler.checkRMBExtractionStatus("AROAQ",
							"5219")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_LIFE_INSURANCE);
			}

			if (typeArrayList != null && !typeArrayList.isEmpty()) {

				final List pinNumList = new ArrayList();
				final int indvCollSize = indvColl.size();
				INDIVIDUAL_Custom_Cargo indivCustCargo = null;
				// Filter pin numbers which are null (new individuals) - PCR
				// 30457
				String pinNumber = null;
				for (int i = 0; i < indvCollSize; i++) {
					indivCustCargo = indvColl.getResult(i);
					pinNumber = indivCustCargo.getIndv_pin_num();
					if (pinNumber != null) {
						pinNumList.add(indivCustCargo.getIndv_pin_num());
					}
				}

				final String[] arrayTypes = new String[typeArrayList.size()];
				for (int i = 0; i < typeArrayList.size(); i++) {
					arrayTypes[i] = (String) typeArrayList.get(i);
				}
				try {
					if (!typeArrayList.isEmpty()) {
						final ASSETS_Custom_Cargo assetsCustCargo = assetBO
								.getAssetDetailsFromCares(pinNumList, appNum,
										arrayTypes);
						if (assetsCustCargo != null) {
							if (assetsCustCargo.getLiquidAssetColl() != null
									&& !assetsCustCargo.getLiquidAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection lqdColl1 = assetsCustCargo
										.getLiquidAssetColl();
								if (lqdColl1 != null) {
									livingAssetBO.insertLiquidDetails(lqdColl1);
									extractionHandler.addRMBExtractionStatus(
											"AROAQ", "5214");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getVehicleAssetColl() != null
									&& !assetsCustCargo.getVehicleAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection vehColl1 = assetsCustCargo
										.getVehicleAssetColl();
								if (vehColl1 != null) {
									vehicleAssetBO
									.insertVehicleDetails(vehColl1);
									extractionHandler.addRMBExtractionStatus(
											"AROAQ", "5215");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getRealPropAssetColl() != null
									&& !assetsCustCargo.getRealPropAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection realColl1 = assetsCustCargo
										.getRealPropAssetColl();
								if (realColl1 != null) {
									realPropertyBO.insertRealDetails(realColl1);
									extractionHandler.addRMBExtractionStatus(
											"AROAQ", "5217");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getBuryAssetColl() != null
									&& !assetsCustCargo.getBuryAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection burialColl1 = assetsCustCargo
										.getBuryAssetColl();
								if (burialColl1 != null) {
									burialAssetBO
									.insertBurialDetails(burialColl1);
									extractionHandler.addRMBExtractionStatus(
											"AROAQ", "5218");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getLifeInsColl() != null
									&& !assetsCustCargo.getLifeInsColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection lifeInsColl1 = assetsCustCargo
										.getLifeInsColl();
								if (lifeInsColl1 != null) {
									lifeInsuranceBO
									.insertLifeInsuranceRec(lifeInsColl1);
									extractionHandler.addRMBExtractionStatus(
											"AROAQ", "5219");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}
						}
					}
				} catch (final FwException fe) {
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(fe);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadOtherAssetGatePostQuestions");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;

				} catch (final Exception e) {
					final FwException fe = createFwException(this.getClass()
							.getName(), "getIndividualAssetDetailsByPin", e);
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(e);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadOtherAssetGatePostQuestions");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;
				}

			}

			final Map newAssetoveridden = new HashMap();

			final APP_IN_VEH_ASET_Collection indVehAst = vehicleAssetBO
					.loadVehicleAssetDetails(appNum);
			final RMBVehicleAssetsGPListView vehicleAssetsListView = new RMBVehicleAssetsGPListView();
			vehicleAssetsListView.setLanguage(currentLang);
			vehicleAssetsListView.setJsEnabled(jsEnabled);
			vehicleAssetsListView.setDisplayData(indVehAst);
			vehicleAssetsListView.setName("VehicleAssetsListView_ListView");
			vehicleAssetsListView.setPageSize(100);
			pageCollection.put("VehicleAssetsListView_ListView",
					vehicleAssetsListView);
			pageCollection.put("VEH_GP_AST", indVehAst);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines Commented Code in
			 * this block
			 */

			final APP_IN_R_PROP_ASET_Collection realAsset = realPropertyBO
					.loadRealPropertyDetails(appNum);
			final RMBRealEstateAssetsGPListView realEstateAssetsListView = new RMBRealEstateAssetsGPListView();
			realEstateAssetsListView.setLanguage(currentLang);
			realEstateAssetsListView.setJsEnabled(jsEnabled);
			realEstateAssetsListView.setDisplayData(realAsset);
			realEstateAssetsListView
			.setName("RealEstateAssetsListView_ListView");
			realEstateAssetsListView.setPageSize(100);
			pageCollection.put("RealEstateAssetsListView_ListView",
					realEstateAssetsListView);
			pageCollection.put("RP_GP_AST", realAsset);

			final APP_IN_P_PROP_ASET_Collection personalAsset = personalPropertyBO
					.loadPersonalProperty(appNum);
			final RMBPersonalPropertyGPAssetsListView personalPropertyAssetsListView = new RMBPersonalPropertyGPAssetsListView();
			personalPropertyAssetsListView.setLanguage(currentLang);
			personalPropertyAssetsListView.setJsEnabled(jsEnabled);
			personalPropertyAssetsListView.setDisplayData(personalAsset);
			personalPropertyAssetsListView
			.setName("PersonalPropertyAssetsListView_ListView");
			personalPropertyAssetsListView.setPageSize(100);
			pageCollection.put("PersonalPropertyAssetsListView_ListView",
					personalPropertyAssetsListView);
			pageCollection.put("PP_GP_AST", personalAsset);

			final APP_IN_BURY_ASET_Collection burialAsset = burialAssetBO
					.loadBurialAssetDetails(appNum);
			final RMBBurialPropertyGPAssetsListView burialPropertyAssetsListView = new RMBBurialPropertyGPAssetsListView();
			burialPropertyAssetsListView.setLanguage(currentLang);
			burialPropertyAssetsListView.setJsEnabled(jsEnabled);
			burialPropertyAssetsListView.setDisplayData(burialAsset);
			burialPropertyAssetsListView
			.setName("BurialPropertyAssetsListView_ListView");
			burialPropertyAssetsListView.setPageSize(100);
			pageCollection.put("BurialPropertyAssetsListView_ListView",
					burialPropertyAssetsListView);
			pageCollection.put("BA_GP_AST", burialAsset);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			final APP_IN_L_INS_ASET_Collection lifeInsuranceAsset = lifeInsuranceBO
					.loadLifeInsuranceDetails(appNum);
			final RMBLifeInsuranceAssetsGPListView lifeInsuranceAssetsListView = new RMBLifeInsuranceAssetsGPListView();
			lifeInsuranceAssetsListView.setLanguage(currentLang);
			lifeInsuranceAssetsListView.setJsEnabled(jsEnabled);
			lifeInsuranceAssetsListView.setDisplayData(lifeInsuranceAsset);
			lifeInsuranceAssetsListView
			.setName("LifeInsuranceAssetsListView_ListView");
			lifeInsuranceAssetsListView.setPageSize(100);
			pageCollection.put("LifeInsuranceAssetsListView_ListView",
					lifeInsuranceAssetsListView);
			pageCollection.put("LI_GP_AST", lifeInsuranceAsset);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines Commented Code in
			 * this block
			 */

			request.put("INDV_COLL", indvColl);
			pageCollection.put("INDV_COLL", indvColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			// if comming back load with previously selection resposnes
			// get current page driver status
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int currentPageStaus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "AROAQ", driverArray);
			// get session RMC_CHG_SEL_PRFL
			SortedSet sessChgSelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// this map holds the response of
			Map securityRadioOptionsMap = new HashMap();
			// get RMB Rqst Manager
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			// get rmc_in_prfl from session
			final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// get RMB_RQST from session
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// preapare security map for questions if the user is re-visting the
			// page
			if (currentPageStaus != FwConstants.DRIVER_REQUIRED) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_LIQUID_ASSET_PRFL + "'" + ","
						+ "'" + AppConstants.RMC_CAT_BURIAL_ASSET_PRFL + "'"
						+ "," + "'" + AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL
						+ "'" + "," + "'"
						+ AppConstants.RMC_CAT_REAL_ASSET_PRFL + "'" + ","
						+ "'" + AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL + "'"
						+ "," + "'" + AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL
						+ "'";

				sessChgSelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
				securityRadioOptionsMap = rmbRqstManager.getStatusForGatePost(
						AppConstants.RMB_OTHER_ASSET_GATE_POST_PAGE,
						sessRMBRqstColl, driverArray, sessRMCInPrflColl,
						sessChgSelectionProfile, peopleHandler);
				pageCollection.put("RADIO_OPTION_MAP", securityRadioOptionsMap);

				final Map indvSelectedMap = new HashMap();
				for (int a = 0; a < sessRMCInPrflColl.size(); a++) {
					final RMC_IN_PRFL_Cargo cargo = sessRMCInPrflColl
							.getCargo(a);
					indvSelectedMap.put(cargo.getIndv_seq_num(),
							cargo.getOther_asset_transfer_resp());
				}
				pageCollection.put("GIVING_AWAY_ASSET_SELECTED",
						indvSelectedMap);

			}

			pageCollection.get("RMC_IN_PRFL_Collection");

			final RMBRequestManager rmbRequestManager = new RMBRequestManager();
			if (pageRMBRqstColl == null) {
				pageRMBRqstColl = new RMB_RQST_Collection();
				pageRMBRqstColl.add(rmbRequestManager.loadRMBRequest(appNum));
			}
			pageCollection
			.put("NEW_ASSET_MAP", beforeColl.get("NEW_ASSET_MAP"));
			pageCollection.put("PAGE_STATUS", String.valueOf(currentPageStaus));
			pageCollection.put("NO_ONE_Collection",
					beforeColl.get("NO_ONE_Collection"));
			pageCollection.put("RMB_RQST_Collection", pageRMBRqstColl);
			pageCollection.put("NEW_ASSET_OVERRIDE", newAssetoveridden);
			componentManager.getComponents("AROAQ", txnBean);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetGatePostQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherAssetGatePostQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherAssetGatePostQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherAssetGatePostQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store other asset gate post questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeOtherAssetGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherAssetGatePostQuestions:Start");

			final Map pageCollection = txnBean.getPageCollection();
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			httpSessMap.get(FwConstants.LANGUAGE);
			httpSessMap.get(FwConstants.JS_ENABLED);


			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "AROAQ", driverArray);
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getInHomeIndividuals();

			final AROAQValidator aroaqValidator = new AROAQValidator();
			final RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");
			RMB_RQST_Cargo pageRMBRqstCargo = null;

			final NO_ONE_Collection noOneColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");
			final RMB_RQST_Cargo sessRMBRqstCargo = sessRMBRqstColl.getCargo(0);
			// get RMB_RQST_Cargo
			pageRMBRqstCargo = pageRMBRqstColl.getCargo(0);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			pageCollection.put("NO_ONE_Collection", noOneColl);

			if (backToMyAccess == null) {
				aroaqValidator.validateAROAQ(pageRMBRqstColl.getCargo(0),
						beforeColl, rmcInPrflColl, noOneColl);

			}

			if (checkBackToMyAccessSelected(request)
					|| aroaqValidator.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							aroaqValidator.getMessageList());
				}

				pageCollection.put("VehicleAssetsListView_ListView",
						beforeColl.get("VehicleAssetsListView_ListView"));
				pageCollection.put("RealEstateAssetsListView_ListView",
						beforeColl.get("RealEstateAssetsListView_ListView"));
				// EDSP
				pageCollection
				.put("PersonalPropertyAssetsListView_ListView",
						beforeColl
						.get("PersonalPropertyAssetsListView_ListView"));
				//
				pageCollection
				.put("BurialPropertyAssetsListView_ListView",
						beforeColl
						.get("BurialPropertyAssetsListView_ListView"));
				pageCollection.put("LifeInsuranceAssetsListView_ListView",
						beforeColl.get("LifeInsuranceAssetsListView_ListView"));

				pageCollection.put("VEH_GP_AST", beforeColl.get("VEH_GP_AST"));
				pageCollection.put("RP_GP_AST", beforeColl.get("RP_GP_AST"));
				pageCollection.put("BA_GP_AST", beforeColl.get("BA_GP_AST"));
				pageCollection.put("LI_GP_AST", beforeColl.get("LI_GP_AST"));
				pageCollection.put("PP_GP_AST", beforeColl.get("PP_GP_AST"));

				pageCollection.put("INDV_COLL", beforeColl.get("INDV_COLL"));
				pageCollection.put("RMB_RQST_Collection",
						beforeColl.get("RMB_RQST_Collection"));
				pageCollection.put("NEW_ASSET_OVERRIDE",
						beforeColl.get("NEW_ASSET_OVERRIDE"));
				pageCollection.put("RMB_RQST_Collection", pageRMBRqstColl);

				if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "AROAQ",
						driverArray) == FwConstants.DRIVER_REQUIRED) {
					pageCollection
					.put("RADIO_OPTION_MAP",
							rmbRqstManager
							.getStatusForGatePostAfterValidation(
									AppConstants.RMB_OTHER_ASSET_GATE_POST_PAGE,
									pageRMBRqstColl));
				} else {
					final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					// get session RMC_CHG_SEL_PRFL
					final SortedSet sessChgSelectionProfile = (SortedSet) session
							.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
					pageCollection
					.put("RADIO_OPTION_MAP",
							rmbRqstManager
							.getStatusForGatePost(
									AppConstants.RMB_OTHER_ASSET_GATE_POST_PAGE,
									sessRMBRqstColl,
									driverArray,
									sessRMCInPrflColl,
									sessChgSelectionProfile,
									peopleHandler));
				}
				return;
			}

			// call request manager to get complete cargo
			pageRMBRqstCargo = rmbRqstManager.getCompleteCargo(
					sessRMBRqstCargo, pageRMBRqstCargo);
			// now call ischanged
			pageRMBRqstCargo = (RMB_RQST_Cargo) isChanged(sessRMBRqstCargo,
					pageRMBRqstCargo);

			if (driverStatus != FwConstants.DRIVER_REQUIRED) {
				rmbRqstManager.changeStatusOnGatePost(pageRMBRqstColl, session,
						AppConstants.RMB_OTHER_ASSET_GATE_POST_PAGE);
			}

			// check if collection is Dirty Update RMBRequest Table with user
			// response .
			if (pageRMBRqstCargo.isDirty()) {
				pageRMBRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				final RMB_RQST_Collection rMBRqstColl = new RMB_RQST_Collection();
				rMBRqstColl.add(pageRMBRqstCargo);
				rmbRqstManager.storeRMBRqst(rMBRqstColl);
				// put the update RMB_RQST_Collection into session
				session.put(AppConstants.RMB_RQST_COLLECTION, rMBRqstColl);
			}
			// Update Driver to schedule required Asset change selection page
			boolean pageAROACRequiredFlag = false;
			boolean pageAROACCompletedFlag = false;
			final int aAROACPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "AROAC", driverArray);
			// check Liquid asset
			if (FwConstants.YES.equals(pageRMBRqstCargo.getLqd_aset_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getLqd_aset_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getLqd_aset_stat_ind()))) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLqd_aset_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLqd_aset_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}

			// check for Vehicle asset
			if (FwConstants.YES.equals(pageRMBRqstCargo.getVeh_aset_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getVeh_aset_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getVeh_aset_stat_ind()))) {
				pageAROACRequiredFlag = true;

			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getVeh_aset_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getVeh_aset_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}

			// check for Real asset
			if (FwConstants.YES
					.equals(pageRMBRqstCargo.getReal_aset_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getReal_aset_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getReal_aset_stat_ind()))) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getReal_aset_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getReal_aset_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}

			// check for Personal Property
			if (FwConstants.YES
					.equals(pageRMBRqstCargo.getPrsn_prop_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getPrsn_prop_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getPrsn_prop_stat_ind()))) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getPrsn_prop_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getPrsn_prop_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}

			// check for Burial asset
			if (FwConstants.YES
					.equals(pageRMBRqstCargo.getBury_aset_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getBury_aset_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getBury_aset_stat_ind()))) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getBury_aset_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getBury_aset_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}

			// check for Life Insurance asset
			if (FwConstants.YES.equals(pageRMBRqstCargo.getLi_aset_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getLi_aset_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo.getLi_aset_stat_ind()))) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLi_aset_stat_ind())
					&& (aAROACPageStatus == FwConstants.DRIVER_REQUIRED || aAROACPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageAROACRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLi_aset_stat_ind())
					&& aAROACPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageAROACCompletedFlag = true;
			}
			if (!pageAROACRequiredFlag) {
				if (!pageAROACCompletedFlag) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "AROAC", driverArray,
							appNum);

				}
			} else if (pageAROACRequiredFlag) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAC",
						driverArray, appNum);

			}

			// NEEDS this to updated
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAQ",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherAssetGatePostQuestions:End");
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetGatePostQuestions() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return;
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherAssetGatePostQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherAssetGatePostQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Load other resources type.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadOtherResourcesType(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherResourcesType() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherResourcesType:Start");

			final Map request = txnBean.getRequest();
			loadTypes(txnBean,
					IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherResourcesType:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherResourcesType");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherResourcesType", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherResourcesType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store other resources type.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeOtherResourcesType(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLifeInsuranceTypeSelection() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherResourcesType");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			final ARLITValidator lifeInsuranceValidator = new ARLITValidator();

			// Initialize messageList
			FwMessageList validateInfo = null;
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			
			
			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.PERS_PROP_BUS_EQPT,
					IRMCResponseProfileManager.PERS_PROP_CEMETARY_LOT,
					IRMCResponseProfileManager.PERS_PROP_LIVESTOCK,
					IRMCResponseProfileManager.PERS_PROP_SAF_DEPST_BOX,
					IRMCResponseProfileManager.PERS_PROP_OTH_VAL,
					IRMCResponseProfileManager.DISASTER_ASSISTANCE,
					IRMCResponseProfileManager.NON_BUSINESS_EQUIPMENT,
					IRMCResponseProfileManager.HOUSEHOLD_GOODS,
					IRMCResponseProfileManager.OTHER_NON_COUNTABLE };

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ARLIT Other Life Insurance Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARORT_FIRST_NAME_LIST");
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARORT_NO_ONE_COLLECTION");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARORT_RMC_IN_PRFL_COLLECTION");

			final NO_ONE_Collection noOneOtherAssetColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = lifeInsuranceTypeBO.compareRmcInPrflColl(
					rmcInPrflBeforeColl, pageColl);

			// Get NoOneCollection
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = lifeInsuranceTypeBO.compareNoOneCollection(
					noOneBeforeColl, noOneOtherAssetColl);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}
			
			validateInfo = lifeInsuranceValidator.validateNoOneOtherResourceType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);

			if (validateInfo != null && lifeInsuranceValidator.hasMessages()) {
				// Translate Profile Response After Validation
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARORT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARORT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARORT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 9;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getOther_asset_personal_prop_resp()
						.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);

					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {
						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getPers_prop_bus_eqpt());
						reqResponse.add(rmcInPrflCargoRequest
								.getPers_prop_cemetary_lot());
						reqResponse.add(rmcInPrflCargoRequest
								.getPers_prop_livestock());
						reqResponse.add(rmcInPrflCargoRequest
								.getPers_prop_saf_depst_box());
						reqResponse.add(rmcInPrflCargoRequest
								.getPers_prop_oth_val());
						reqResponse.add(rmcInPrflCargoRequest
								.getDisaster_assistance());
						reqResponse.add(rmcInPrflCargoRequest
								.getNon_business_equipment());
						reqResponse.add(rmcInPrflCargoRequest
								.getHousehold_goods());
						reqResponse.add(rmcInPrflCargoRequest
								.getOther_non_countable());
						// session
						sesResponse.add(rmcInPrflBeforeCargo
								.getPers_prop_bus_eqpt());
						sesResponse.add(rmcInPrflBeforeCargo
								.getPers_prop_cemetary_lot());
						sesResponse.add(rmcInPrflBeforeCargo
								.getPers_prop_livestock());
						sesResponse.add(rmcInPrflBeforeCargo
								.getPers_prop_saf_depst_box());
						sesResponse.add(rmcInPrflBeforeCargo
								.getPers_prop_oth_val());
						sesResponse.add(rmcInPrflBeforeCargo
								.getDisaster_assistance());
						sesResponse.add(rmcInPrflBeforeCargo
								.getNon_business_equipment());
						sesResponse.add(rmcInPrflBeforeCargo
								.getHousehold_goods());
						sesResponse.add(rmcInPrflBeforeCargo
								.getOther_non_countable());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY);

						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getPers_prop_bus_eqpt()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getPers_prop_cemetary_lot()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getPers_prop_livestock()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getPers_prop_saf_depst_box()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getPers_prop_oth_val()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getDisaster_assistance()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getNon_business_equipment()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getHousehold_goods()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getOther_non_countable()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
									rmcInPrflBeforeCargo, true);

							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARORT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getPers_prop_bus_eqpt()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getPers_prop_cemetary_lot()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getPers_prop_livestock()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getPers_prop_saf_depst_box()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																|| rmcInPrflBeforeCargo
																.getPers_prop_oth_val()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getDisaster_assistance()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getNon_business_equipment()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																						|| rmcInPrflBeforeCargo
																						.getHousehold_goods()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																								|| rmcInPrflBeforeCargo
																								.getOther_non_countable()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}
						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}
			}

			// persist the data
			final int persistArraySize = persistArray.size();
			boolean otherResourcesPageRequired = false;
			String busEquip = null;
			String cemetery = null;
			String stock = null;
			String box = null;
			String otherValuable = null;
			String disaster = null;
			String nonBusiness = null;
			String householdGoods = null;
			String otherNonCountable = null;
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = { cargo.getPers_prop_bus_eqpt(),
						cargo.getPers_prop_cemetary_lot(),
						cargo.getPers_prop_livestock(),
						cargo.getPers_prop_saf_depst_box(),
						cargo.getPers_prop_oth_val(),
						cargo.getDisaster_assistance(),
						cargo.getNon_business_equipment(),
						cargo.getHousehold_goods(),
						cargo.getOther_non_countable() };
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				busEquip = cargo.getPers_prop_bus_eqpt();
				cemetery = cargo.getPers_prop_cemetary_lot();
				stock = cargo.getPers_prop_livestock();
				box = cargo.getPers_prop_saf_depst_box();
				otherValuable = cargo.getPers_prop_oth_val();
				disaster = cargo.getDisaster_assistance();
				nonBusiness = cargo.getNon_business_equipment();
				householdGoods = cargo.getHousehold_goods();
				otherNonCountable = cargo.getOther_non_countable();
				if ("R".equalsIgnoreCase(otherValuable)
						|| "R".equalsIgnoreCase(busEquip)
						|| "R".equalsIgnoreCase(cemetery)
						|| "R".equalsIgnoreCase(stock)
						|| "R".equalsIgnoreCase(box)
						|| "R".equalsIgnoreCase(otherValuable)
						|| "R".equalsIgnoreCase(disaster)
						|| "R".equalsIgnoreCase(nonBusiness)
						|| "R".equalsIgnoreCase(householdGoods)
						|| "R".equalsIgnoreCase(otherNonCountable)) {
					otherResourcesPageRequired = true;
				}

			}
			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORT",
						driverArray, appNum);
			}
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (otherResourcesPageRequired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARORD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARORD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String utilityDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARORD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE
						.equals(utilityDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(utilityDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(utilityDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARORD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARORD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORD",
						driverArray, appNum);
			}

			if (!otherResourcesPageRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherResourcesType:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherResourcesType");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherResourcesType", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherResourcesType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load other resources details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void loadOtherResourcesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherResourcesDetails() - START");
		try {
			log(ILog.INFO, "OtherAssetEJBBean::loadOtherResourcesDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// make loopingQuestion value NO in the request
			request.put("loopingQuestion", FwConstants.NO);

			String pageMode = FwConstants.EMPTY_STRING;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			String srcAppInd = FwConstants.EMPTY_STRING;
			APP_IN_P_PROP_ASET_Collection rmcInPrsnPropColl;
			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"ORTY", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map realPropertyTypeMap = new HashMap();

			for (int i = 0; i < codeValues.length; i++) {
				realPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (driverStatus == FwConstants.DRIVER_REQUIRED
					|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
			} else if (driverStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
			}
			final short[] responseChangeType = new short[] {
					IRMCResponseProfileManager.PERS_PROP_BUS_EQPT,
					IRMCResponseProfileManager.PERS_PROP_CEMETARY_LOT,
					IRMCResponseProfileManager.PERS_PROP_LIVESTOCK,
					IRMCResponseProfileManager.PERS_PROP_SAF_DEPST_BOX,
					IRMCResponseProfileManager.PERS_PROP_OTH_VAL,
					IRMCResponseProfileManager.DISASTER_ASSISTANCE,
					IRMCResponseProfileManager.NON_BUSINESS_EQUIPMENT,
					IRMCResponseProfileManager.HOUSEHOLD_GOODS,
					IRMCResponseProfileManager.OTHER_NON_COUNTABLE

			};

			SortedSet prsnProfile = null;
			// EDSP RMB added for rmb person
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			final PersonalPropertyBO aBPersonalPropertyBO = new PersonalPropertyBO();

			if (!currentPageID.equals(previousPageId)) {
				prsnProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseChangeType);

				if (driverStatus != FwConstants.DRIVER_REQUIRED) {
					APP_IN_P_PROP_ASET_Collection rmcPropCol = aBPersonalPropertyBO
							.loadPersonalProperty(appNumber);
					rmcPropCol = aBPersonalPropertyBO.splitRealColl(rmcPropCol,
							AppConstants.RMC_NEW_RECORD_IND);

					if (rmcPropCol != null && !rmcPropCol.isEmpty()) {
						APP_IN_P_PROP_ASET_Cargo rmcInPrsnPropCargo = null;
						final int newRealCollSize = rmcPropCol.size();
						for (int i = 0; i < newRealCollSize; i++) {
							rmcInPrsnPropCargo = rmcPropCol.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(prsnProfile,
									null, null,
									Short.parseShort(rmcInPrsnPropCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInPrsnPropCargo
													.getSeq_num()),
													rmcInPrsnPropCargo
													.getPrsn_prop_aset_typ());
						}
					}
				}

				if (driverStatus == FwConstants.DRIVER_REQUIRED
						|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(prsnProfile);
				}
				if (driverStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(prsnProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				prsnProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Personal_IndSeqBean");
			}

			// When user hits the Back button or comes from the Summary Page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								prsnProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(prsnProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							prsnProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						// first we are checking rmc in profile exists in the
						// sess
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						final short[] responseArray = new short[] {
								IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
								rmcResponseProfileManager.getResponseByType(
										IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS,
										indivSeqBean.getType()) };
						rmcResponseProfileManager
						.makeAddNew(
								responseArray,
								rmcInPrflCargo, true);
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						categorySelectionProfileManager
						.insertSequenceDetail(prsnProfile, appNumber, AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(
								prsnProfile,
								null,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(prsnProfile, null,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(
								categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Personal_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}
			pageCollection
			.put(AppConstants.RMC_CATEGORY_PAGE_PRFL, prsnProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(prsnProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(prsnProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInPrsnPropColl = aBPersonalPropertyBO
					.loadIndividualPersonalPropertyDetails(appNumber,
							indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_P_PROP_ASET_Collection",
					rmcInPrsnPropColl);

			// EDSP RMB added new person
			APP_IN_P_PROP_ASET_Cargo cwwPrsnPropCargo = aBPersonalPropertyBO
					.splitRealPropColl(rmcInPrsnPropColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwPrsnPropCargo == null) {
				cwwPrsnPropCargo = new APP_IN_P_PROP_ASET_Cargo();

			}
			pageCollection.put("SEC_PROP", aBPersonalPropertyBO
					.settingRealPropertyDefaultValues(cwwPrsnPropCargo));
			APP_IN_P_PROP_ASET_Cargo rmcPrsnCargo1 = aBPersonalPropertyBO
					.splitRealPropColl(rmcInPrsnPropColl,

							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcPrsnCargo1 != null) {
				pageCollection.put("FST_PROP", aBPersonalPropertyBO
						.settingRealPropertyDefaultValues(rmcPrsnCargo1));
			} else {
				rmcPrsnCargo1 = aBPersonalPropertyBO.splitRealPropColl(
						rmcInPrsnPropColl, AppConstants.RMC_END_RECORD_IND);
				if (rmcPrsnCargo1 != null) {
					pageCollection.put("FST_PROP", aBPersonalPropertyBO
							.settingRealPropertyDefaultValues(rmcPrsnCargo1));
				} else {
					rmcPrsnCargo1 = aBPersonalPropertyBO.splitRealPropColl(
							rmcInPrsnPropColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
					if (rmcPrsnCargo1 != null) {
						pageCollection
						.put("FST_PROP",
								aBPersonalPropertyBO
								.settingRealPropertyDefaultValues(rmcPrsnCargo1));
					} else {
						pageCollection
						.put("FST_PROP",
								aBPersonalPropertyBO
								.settingRealPropertyDefaultValues(cwwPrsnPropCargo));
					}

				}
			}
			if (rmcInPrsnPropColl != null && !rmcInPrsnPropColl.isEmpty()) {
				final APP_IN_P_PROP_ASET_Cargo rmcInSelfeCargo = rmcInPrsnPropColl
						.getCargo(0);
				srcAppInd = rmcInSelfeCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			// set Details_Collection from session to PageCollection
			if (rmcInPrsnPropColl != null && !rmcInPrsnPropColl.isEmpty()) {
				final APP_IN_P_PROP_ASET_Cargo appRPropCargo = rmcInPrsnPropColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				final String subType = appRPropCargo.getPrsn_prop_aset_typ();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (appRPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = aBPersonalPropertyBO
							.loadIndividualJointOwnerDetails(
									(String) session
									.get(AppConstants.APP_NUMBER),
									indvSeqNum,
									AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY,
									subType, appRPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						// EDSP RMB adding CWJnt collection
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			INDIVIDUAL_Custom_Collection indivCustCol = null;
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("INDIVIDUAL_Custom_Collection", indivCustCol);
			pageCollection.put("PEOPLE_5211", indivCustCol);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("PROP_TYPE", categoryType);
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			// Getting people handler object from session
			txnBean.setPageCollection(pageCollection);
			// Run ComponentManager to get the components for the current page
			final APP_IN_P_PROP_ASET_Collection perspColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			componentManager.getComponents(currentPageID, txnBean);
			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;
			}
			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			if (perspColl != null && !perspColl.isEmpty()) {
				final APP_IN_P_PROP_ASET_Cargo perspCargo = perspColl
						.getCargo(0);
				indvSeqNum = perspCargo.getIndv_seq_num();
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
						indvSeqNum);
			}
			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}

			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);
			request.remove("loopingQuestion");
			pageCollection.put("APP_IN_P_PROP_ASET_Collection",
					rmcInPrsnPropColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			log(ILog.INFO, "OtherAssetEJBBean::loadOtherResourcesDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherResourcesDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherResourcesDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherResourcesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Store other resources details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeOtherResourcesDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		log(ILog.INFO, "OtherAssetEJBBean::storeOtherResourcesDetails:Start");
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherResourcesDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			session.remove("Vehicle_IndSeqBean");
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final PersonalPropertyBO aBPersonalBO = new PersonalPropertyBO();
			final ABPPDValidator abppdValidator = new ABPPDValidator();

			final String pageMode = (String) beforePageColl.get("PAGE_MODE");
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final SortedSet prsnPropProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			// get the APP_IN_PRFL Collection from session
			final RMC_IN_PRFL_Collection appInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// get the BeforeCollection

			// get Details aset Collection and Cargo
			final APP_IN_P_PROP_ASET_Collection appInPropAsetColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			APP_IN_P_PROP_ASET_Cargo appInPropAsetCargo = appInPropAsetColl
					.getCargo(0);

			// get the Aset collection from Before Collection
			final APP_IN_P_PROP_ASET_Collection appInPropAsetBeforeColl = (APP_IN_P_PROP_ASET_Collection) beforePageColl
					.get("APP_IN_P_PROP_ASET_Collection");
			APP_IN_P_PROP_ASET_Cargo appInPropAsetBeforeCargo = null;

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(prsnPropProfile);
			appInPropAsetCargo.setPrsn_prop_aset_typ(categorySeqDetailBean
					.getCategoryType());
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");
			final PersonalPropertyBO prsnlPropertyBO = new PersonalPropertyBO();

			if (appInPropAsetCargo.getPrsn_prop_amt_ind() == null) {
				if (appInPropAsetCargo.getPrsn_prop_amt() != null
						&& FwConstants.EMPTY_STRING.equals(appInPropAsetCargo
								.getPrsn_prop_amt().trim())) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1,1 lines
					 * Commented Code in this block
					 */

					appInPropAsetCargo.setPrsn_prop_amt_ind("2");
				} else {
					appInPropAsetCargo.setPrsn_prop_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(appInPropAsetCargo.getPrsn_prop_amt() != null && FwConstants.EMPTY_STRING
						.equals(appInPropAsetCargo.getPrsn_prop_amt().trim()))) {

					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				appInPropAsetCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				appInPropAsetCargo.setJnt_own_resp(FwConstants.NO);
			}
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getBusiness_trade_farming_ind() != null
					&& appInPropAsetCargo.getBusiness_trade_farming_ind()
					.trim().length() == 0) {

				appInPropAsetCargo.setProperty_owe_amt(null);
			}
			if (appInPropAsetCargo.getPrsn_prop_dsc() != null
					&& FwConstants.EMPTY_STRING.equals(appInPropAsetCargo
							.getPrsn_prop_dsc().trim())) {
				appInPropAsetCargo.setPrsn_prop_dsc(null);
			}
			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;
			int seqNum = 0;
			boolean prsnPropertyDetailsUpdate = false;
			if (appInPropAsetBeforeColl != null
					&& !appInPropAsetBeforeColl.isEmpty()) {
				final int size = appInPropAsetBeforeColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if (seqNum == 0) {
					seqNum = seqNum + 1;
				}
				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}
				appInPropAsetBeforeCargo = prsnlPropertyBO.splitRealPropColl(
						appInPropAsetBeforeColl, sourceAppIndicator);
				if (appInPropAsetBeforeCargo == null
						&& AppConstants.RMC_END_RECORD_IND
						.equals(sourceAppIndicator)) {
					appInPropAsetBeforeCargo = prsnlPropertyBO
							.splitRealPropColl(appInPropAsetBeforeColl,
									AppConstants.CWW_RECORD_IND);
				}
				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& appInPropAsetBeforeCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (appInPropAsetBeforeCargo != null) {
					if (categorySeqDetailBean
							.getCategoryType()
							.equals(String
									.valueOf(IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS))) {
						appInPropAsetCargo
						.setPrsn_prop_amt(appInPropAsetBeforeCargo
								.getPrsn_prop_amt());
						appInPropAsetCargo
						.setProperty_owe_amt(appInPropAsetBeforeCargo
								.getProperty_owe_amt());
						appInPropAsetCargo
						.setPrsn_prop_dsc(appInPropAsetBeforeCargo
								.getPrsn_prop_dsc());
						appInPropAsetCargo
						.setAsset_end_dt(appInPropAsetBeforeCargo
								.getAsset_end_dt());

					}
					appInPropAsetCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));
					appInPropAsetCargo.setSrc_app_ind(appInPropAsetBeforeCargo
							.getSrc_app_ind());
					appInPropAsetCargo.setIndv_seq_num(appInPropAsetBeforeCargo
							.getIndv_seq_num());
					appInPropAsetCargo
					.setPrsn_prop_aset_typ(appInPropAsetBeforeCargo
							.getPrsn_prop_aset_typ());
					appInPropAsetCargo.setSeq_num(appInPropAsetBeforeCargo
							.getSeq_num());
					appInPropAsetCargo.setRec_cplt_ind(appInPropAsetBeforeCargo
							.getRec_cplt_ind());

					if ("E".equalsIgnoreCase(pageMode)) {

						appInPropAsetCargo.setApp_num(appInPropAsetBeforeCargo
								.getApp_num());
						appInPropAsetCargo
						.setPrsn_prop_aset_typ(appInPropAsetBeforeCargo
								.getPrsn_prop_aset_typ());
						appInPropAsetCargo
						.setPrsn_prop_amt(appInPropAsetBeforeCargo
								.getPrsn_prop_amt());
						appInPropAsetCargo
						.setProperty_owe_amt(appInPropAsetBeforeCargo
								.getProperty_owe_amt());
						appInPropAsetCargo
						.setPrsn_prop_dsc(appInPropAsetBeforeCargo
								.getPrsn_prop_dsc());

					}
					// check dirty

				} else {
					final APP_IN_P_PROP_ASET_Cargo beforeCargo = appInPropAsetBeforeColl
							.getCargo(0);
					appInPropAsetCargo.setEcp_id(beforeCargo.getEcp_id());
				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
				appInPropAsetCargo = (APP_IN_P_PROP_ASET_Cargo) isChanged(
						appInPropAsetBeforeCargo, appInPropAsetCargo);
				// EDSP RMC adding appnum,indvseqnum,seqnum and aset type
				appInPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInPropAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base

				appInPropAsetCargo.setSeq_num(String.valueOf(seqNum));

				// EDSP RMC adding ends
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				appInPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);
				appInPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				appInPropAsetCargo.setRowAction(recordInd);
				if (appInPropAsetCargo.isDirty()) {
					prsnPropertyDetailsUpdate = true;
				}

			} else {

				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appInPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInPropAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = prsnlPropertyBO.getMaxSeqNumber(
						(String) session.get(AppConstants.APP_NUMBER),
						indvSeqNum);
				seqNum = seqNum + 1;
				appInPropAsetCargo.setSeq_num(String.valueOf(seqNum));
				appInPropAsetCargo.setAsset_end_dt(AppConstants.HIGH_DATE);
				appInPropAsetCargo.setPrsn_prop_aset_typ(categorySeqDetailBean
						.getCategoryType());
				appInPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appInPropAsetCargo.setRowAction(recordInd);
				prsnPropertyDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(prsnPropProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
			}


			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);

					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (userEndInd == 1) {
				abppdValidator.validateEndScreen(appInPropAsetCargo);
			} else {
				abppdValidator.validateRMBPersonalPropertyDetails(
						appInPropAsetColl,
						(String) beforePageColl.get(AppConstants.FIRST_NAME),
						peopleHandler, beforePageColl, request);
				abppdValidator.validateJointOwnerInformation(appInJntOwnColl);
			}

			if (checkBackToMyAccessSelected(request)
					|| abppdValidator.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST,
						abppdValidator.getMessageList());
				pageCollection.put("PEOPLE_377",
						beforePageColl.get("PEOPLE_377"));
				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				// put the first Name into request to avoid null pointer in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));
				pageCollection.put("ShowLoopingQuestionFlag",
						beforePageColl.get("ShowLoopingQuestionFlag"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("APP_IN_P_PROP_Collection",
						appInPropAsetColl);
				pageCollection
				.put("APP_IN_JNT_OWN_Collection", appInJntOwnColl);
				pageCollection
				.put("PROP_TYPE", beforePageColl.get("PROP_TYPE"));

				pageCollection
				.put("PAGE_MODE", beforePageColl.get("PAGE_MODE"));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				if (beforePageColl.containsKey("SEC_PROP")) {
					pageCollection.put("SEC_PROP",
							beforePageColl.get("SEC_PROP"));
				}
				if (beforePageColl.containsKey("SEC_JNT")) {
					pageCollection
					.put("SEC_JNT", beforePageColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				pageCollection.put("FST_PROP", appInPropAsetCargo);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				return;
			}
			// completeness check
			appInPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);

			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getPrsn_prop_aset_typ() != null
					&& FwConstants.DEFAULT_DROPDOWN_SEL
					.equalsIgnoreCase(appInPropAsetCargo
							.getPrsn_prop_aset_typ())) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1,2 lines Commented
				 * Code in this block
				 */

				appInPropAsetCargo.setPrsn_prop_aset_typ(null);
			}
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAcquired_dt() != null
					&& appInPropAsetCargo.getAcquired_dt().trim().length() == 0) {
				appInPropAsetCargo.setAcquired_dt(AppConstants.LOW_DATE);
			} else if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAcquired_dt() != null) {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = appInPropAsetCargo.getAcquired_dt();
				if (appInPropAsetCargo.getAcquired_dt().length() == 10
						&& appInPropAsetCargo.getAcquired_dt().charAt(2) == '/') {
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					appInPropAsetCargo.setAcquired_dt(dateConverter.toString());
				}
			}
			if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAsset_end_dt() != null
					&& appInPropAsetCargo.getAsset_end_dt().trim().length() == 0) {
				appInPropAsetCargo.setAcquired_dt(AppConstants.LOW_DATE);
			} else if (appInPropAsetCargo != null
					&& appInPropAsetCargo.getAsset_end_dt() != null) {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = appInPropAsetCargo.getAsset_end_dt();
				if (appInPropAsetCargo.getAsset_end_dt().length() == 10
						&& appInPropAsetCargo.getAsset_end_dt().charAt(2) == '/') {
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					appInPropAsetCargo
					.setAsset_end_dt(dateConverter.toString());
				}
			}
			if (prsnPropertyDetailsUpdate) {

				aBPersonalBO.storePersonalProperty(appInPropAsetColl);
			}
			appInPropAsetCargo = appInPropAsetColl.getCargo(0);
			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;

			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (appInJntBeforeColl != null && !appInJntBeforeColl.isEmpty()) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);
						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(appInPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(appInPropAsetCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
									.getPrsn_prop_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						if (appInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
									.setApp_num(appInPropAsetCargo
											.getApp_num());
									appInJntOwnCargo
									.setJnt_own_seq_num(appInPropAsetCargo
											.getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
									.setIndv_seq_num(appInPropAsetCargo
											.getIndv_seq_num());
									appInJntOwnCargo
									.setAset_sub_typ(appInPropAsetCargo
											.getPrsn_prop_aset_typ());
									appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_last_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_share() == null) {
										appInJntOwnCargo
										.setJnt_own_share(FwConstants.ZERO);
									}
									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									appInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(appInJntOwnCargo);
									/*
									 * VG SONAR Cleanup - 08/27/2015 Deleted 2
									 * lines Commented Code in this block
									 */

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInJntOwnCargo.setApp_num(appInPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(appInPropAsetCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
									.getPrsn_prop_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& appInJntOwnCargo.getSrc_app_ind() != null
																		&& appInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(appInPropAsetCargo
								.getApp_num());
						appInJntOwnCargo.setJnt_own_seq_num(appInPropAsetCargo
								.getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(appInPropAsetCargo
								.getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(appInPropAsetCargo
								.getPrsn_prop_aset_typ());
						appInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInJntOwnCargo
										.getJnt_indv_seq_num())) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (FwConstants.EMPTY_STRING.equals(appInJntOwnCargo
								.getJnt_own_share())) {
							appInJntOwnCargo.setJnt_own_share(FwConstants.ZERO);
						}
						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines
						 * Commented Code in this block
						 */

						appInJntOwnCargo
						.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						appInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}

			aBPersonalBO.storeJointOwnerDetails(appInJntOwnNewColl);

			rmcResponseProfileManager.getProfile(appInPrflCollSession,
					appInPropAsetCargo.getIndv_seq_num());
			appInPropAsetCargo.getPrsn_prop_aset_typ();

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE

				categorySelectionProfileManager.insertSequenceDetail(
						prsnPropProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			}
			//reqInd is indicator to decide if we have complete the response profile or not
			boolean reqInd=false;

			if (!loopingQuestion) {
				short respTyp=rmcResponseProfileManager
						.getResponseByType(
								IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS,
								categorySeqDetailBean
								.getCategoryType());
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));

				if (rmcInPrflCargo != null && (rmcResponseProfileManager.getProfileResponse(
						rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcResponseProfileManager.getProfileResponse(
								rmcInPrflCargo, respTyp).charAt(0) == IRMCResponseProfileManager.STATUS_ADD_NEW)) {
					reqInd=true;
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager
					.makeComplete(
							IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			//if the profile response was not 'R' or if we came from gatepost then don't persist else persist
			if(!reqInd || categorySeqDetailBean.getChangeSelectionCategoryCd()==null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					prsnPropProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}else
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					prsnPropProfile, appNumber,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
		}	
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(prsnPropProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(prsnPropProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNumber);
			log(ILog.INFO, "OtherAssetEJBBean::storeOtherResourcesDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherResourcesDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherResourcesDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherResourcesDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	// //GatePost ends- EDSP

	// //EDSP ADDED METHOD

	/**
	 * Load other asset change selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadOtherAssetChangeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherAssetChangeSelection() - START");

		try {

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessMap
					.get(FwConstants.LANGUAGE);

			final RMCRequestManager rmcRequestManager = new RMCRequestManager();

			final INDIVIDUAL_Custom_Collection indvSortedCustColl = null;

			// Getting RMC_IN_PROFILE from session
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			RMC_RQST_Collection rmcPageColl = (RMC_RQST_Collection) session
					.get("RMC_RQST_COLLECTION");

			if (rmcPageColl == null) {
				rmcPageColl = new RMC_RQST_Collection();
				rmcPageColl.add(rmcRequestManager.loadRMCRequest(appNum));
			}
			final RMC_RQST_Cargo rmcCargo = rmcPageColl.getCargo(0);

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Get vehicel Asset Collection
			final VehicleAssetBO vehicleBO = new VehicleAssetBO();
			final APP_IN_VEH_ASET_Collection vehicleAsstDtl = vehicleBO
					.loadVehicleAssetDetails(appNum);
			// Get Real estate property Collection
			final RealPropertyBO realPropertyBO = new RealPropertyBO();
			final APP_IN_R_PROP_ASET_Collection realAsstDtl = realPropertyBO
					.loadRealPropertyDetails(appNum);

			// GetPersonal property Collection
			final PersonalPropertyBO personalPropertyBO = new PersonalPropertyBO();
			final APP_IN_P_PROP_ASET_Collection personalAsstDtl = personalPropertyBO
					.loadPersonalProperty(appNum);

			// Get Burial Asset Collecion
			final BurialAssetBO burialAssetBO = new BurialAssetBO();
			final APP_IN_BURY_ASET_Collection burialAssetDtl = burialAssetBO
					.loadBurialAssetDetails(appNum);

			// Get Life Insurance Collection
			final LifeInsuranceBO lifeInsuranceBO = new LifeInsuranceBO();
			final APP_IN_L_INS_ASET_Collection lifeInsuranceAssetDtl = lifeInsuranceBO
					.loadLifeInsuranceDetails(appNum);

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean loadCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadCatSelProfile = true;

			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {

				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);
					if (catSeqDetail != null
							&& (AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL
									.equals(catSeqDetail
											.getChangeSelectionCategoryCd())
											|| AppConstants.RMC_CAT_REAL_ASSET_PRFL
											.equals(catSeqDetail
													.getChangeSelectionCategoryCd())
													|| AppConstants.RMC_CAT_BURIAL_ASSET_PRFL
													.equals(catSeqDetail
															.getChangeSelectionCategoryCd())
															|| AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL
															.equals(catSeqDetail
																	.getChangeSelectionCategoryCd()) || AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL
																	.equals(catSeqDetail
																			.getChangeSelectionCategoryCd()))) {
						loadCatSelProfile = false;
					} else {
						loadCatSelProfile = true;
					}
				}
			}

			// now loading the cat selection profile from the data base
			if (loadCatSelProfile) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL + "'" + ","
						+ "'" + AppConstants.RMC_CAT_REAL_ASSET_PRFL + "'"
						+ "," + "'" + AppConstants.RMC_CAT_BURIAL_ASSET_PRFL
						+ "'" + "," + "'"
						+ AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL + "'" + ","
						+ "'" + AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL + "'";

				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						selectionProfile);
			}

			final List vehList = new ArrayList();
			vehList.add(vehicleAsstDtl);
			vehList.add(indvColl);
			vehList.add(rmcInPrflColl);
			vehList.add(rmcCargo);
			vehList.add(selectionProfile);
			vehList.add(driverStatus);

			final RMCVehicleAssetSelectionListView rmcVehicleAssetSelectionListView = new RMCVehicleAssetSelectionListView();
			rmcVehicleAssetSelectionListView.setLanguage(language);
			rmcVehicleAssetSelectionListView.setName("VEHAST");
			rmcVehicleAssetSelectionListView.setCollection(indvSortedCustColl);
			rmcVehicleAssetSelectionListView.setDisplayData(vehList);
			rmcVehicleAssetSelectionListView.setPageSize(1000);
			pageCollection.put("VEHAST", rmcVehicleAssetSelectionListView);
			pageCollection.put("VEHAST_COLL", vehicleAsstDtl);

			final List realList = new ArrayList();
			realList.add(realAsstDtl);
			realList.add(indvColl);
			realList.add(rmcInPrflColl);
			realList.add(rmcCargo);
			realList.add(selectionProfile);
			realList.add(driverStatus);

			final RMCRealEstateAssetSelectionListView rmcRealAssetSelectionListView = new RMCRealEstateAssetSelectionListView();
			rmcRealAssetSelectionListView.setLanguage(language);
			rmcRealAssetSelectionListView.setName("REALAST");
			rmcRealAssetSelectionListView.setCollection(indvSortedCustColl);
			rmcRealAssetSelectionListView.setDisplayData(realList);
			rmcRealAssetSelectionListView.setPageSize(1000);
			pageCollection.put("REALAST", rmcRealAssetSelectionListView);
			pageCollection.put("REALAST_COLL", realAsstDtl);

			final List perpropList = new ArrayList();
			perpropList.add(personalAsstDtl);
			perpropList.add(indvColl);
			perpropList.add(rmcInPrflColl);
			perpropList.add(rmcCargo);
			perpropList.add(selectionProfile);
			perpropList.add(driverStatus);

			final RMCPersonalPropertyAssetSelectionListView rmcPersonalAssetSelectionListView = new RMCPersonalPropertyAssetSelectionListView();
			rmcPersonalAssetSelectionListView.setLanguage(language);
			rmcPersonalAssetSelectionListView.setName("PPAST");
			rmcPersonalAssetSelectionListView.setCollection(indvSortedCustColl);
			rmcPersonalAssetSelectionListView.setDisplayData(perpropList);
			rmcPersonalAssetSelectionListView.setPageSize(1000);
			pageCollection.put("PPAST", rmcPersonalAssetSelectionListView);
			pageCollection.put("PPAST_COLL", personalAsstDtl);

			final List burList = new ArrayList();
			burList.add(burialAssetDtl);
			burList.add(indvColl);
			burList.add(rmcInPrflColl);
			burList.add(rmcCargo);
			burList.add(selectionProfile);
			burList.add(driverStatus);

			final RMCBurialAssetSelectionListView rmcBurialAssetSelectionListView = new RMCBurialAssetSelectionListView();
			rmcBurialAssetSelectionListView.setLanguage(language);
			rmcBurialAssetSelectionListView.setName("BURAST");
			rmcBurialAssetSelectionListView.setCollection(indvSortedCustColl);
			rmcBurialAssetSelectionListView.setDisplayData(burList);
			rmcBurialAssetSelectionListView.setPageSize(1000);
			pageCollection.put("BURAST", rmcBurialAssetSelectionListView);
			pageCollection.put("BURAST_COLL", burialAssetDtl);

			final List lifInsList = new ArrayList();
			lifInsList.add(lifeInsuranceAssetDtl);
			lifInsList.add(indvColl);
			lifInsList.add(rmcInPrflColl);
			lifInsList.add(rmcCargo);
			lifInsList.add(selectionProfile);
			lifInsList.add(driverStatus);

			final RMCLifeInsuranceAssetSelectionListView rmclifeInsuranceAssetSelectionListView = new RMCLifeInsuranceAssetSelectionListView();
			rmclifeInsuranceAssetSelectionListView.setLanguage(language);
			rmclifeInsuranceAssetSelectionListView.setName("LIAST");
			rmclifeInsuranceAssetSelectionListView
			.setCollection(indvSortedCustColl);
			rmclifeInsuranceAssetSelectionListView.setDisplayData(lifInsList);
			rmclifeInsuranceAssetSelectionListView.setPageSize(1000);
			pageCollection.put("LIAST", rmclifeInsuranceAssetSelectionListView);
			pageCollection.put("LIAST_COLL", lifeInsuranceAssetDtl);
			//Run component manager
			componentManager.getComponents((String) request.get(FwConstants.CURRENT_PAGE_ID), txnBean);

			final Map newAssetMap = new HashMap();
			pageCollection.put("NEW_ASSET_MAP", newAssetMap);
			pageCollection.put("RMC_RQST_Collection", rmcPageColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			

		} catch (final FwException fe) {
			log(ILog.ERROR,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetChangeSelection: THREW_EXCEPTION:"
							+ fe.getExceptionType());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadOtherAssetChangeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());

		} catch (final Exception e) {
			log(ILog.ERROR,
					"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetChangeSelection: THREW_EXCEPTION:"
							+ e.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadOtherAssetChangeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());

		} finally {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.loadOtherAssetChangeSelection() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
		}

	}

	/**
	 * Store other asset change selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeOtherAssetChangeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetChangeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherAssetChangeSelection:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			request.get(FwConstants.CURRENT_PAGE_ID);
			final RMCRequestManager rmcRequestManager = new RMCRequestManager();

			final RMC_RESPONSE_Custom_Collection respColl = (RMC_RESPONSE_Custom_Collection) pageCollection
					.get("RMC_RESPONSE_Custom_Collection");

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			final AssetBO assetBO = new AssetBO();
			assetBO.formatAssetResponse(respColl);

			RMC_RQST_Collection rmcRqstPageColl = (RMC_RQST_Collection) pageCollection
					.get("RMC_RQST_Collection");

			if (rmcRqstPageColl == null) {
				rmcRqstPageColl = new RMC_RQST_Collection();
				rmcRqstPageColl.add(rmcRequestManager.loadRMCRequest(appNum));
			}

			final RMC_RQST_Cargo rmcRqstCargo = rmcRqstPageColl.getCargo(0);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}

			final Map assetValidationMap = new HashMap();
			assetValidationMap.put("VEH", beforeColl.get("VEHAST_COLL"));
			assetValidationMap.put("REAL", beforeColl.get("REALAST_COLL"));
			assetValidationMap.put("BURL", beforeColl.get("BURAST_COLL"));
			assetValidationMap.put("PP", beforeColl.get("PPAST_COLL"));
			assetValidationMap.put("LI", beforeColl.get("LIAST_COLL"));
			assetValidationMap.put("RMC_RQST_Cargo", rmcRqstCargo);

			final short[] responseArray = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
					IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
					IRMCResponseProfileManager.OTHR_ASET_BURIAL,
					IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
					IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE };

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// Getting RMC_IN_PROFILE from session
			RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
			int size = respColl.size();
			RMC_IN_PRFL_Collection rmcPrflPageColl = null;
			RMC_IN_PRFL_Cargo rmcPrflSessCargo = null;
			RMC_IN_PRFL_Cargo rmcPrflPageCargo = null;
			String seqNum = null;
			String catType = null;
			String indvSeqNum = null;

			String newTypeIndicatorResp = null;

			boolean vehicleChangeSelected = false;
			boolean burialChangeSelected = false;
			boolean realChangeSelected = false;
			boolean perpropChangeSelected = false;
			boolean lifeInsChangeSelected = false;

			boolean vehAddSelected = false;
			boolean realAddSelected = false;
			boolean burAddSelected = false;
			boolean ppAddSelected = false;
			boolean lifeddSelected = false;
			if (respColl != null && !respColl.isEmpty()) {
				for (int i = 0; i < respColl.size(); i++) {
					final RMC_RESPONSE_Custom_Cargo cargo = respColl
							.getCargo(i);
					if (cargo != null && cargo.getCategoryType() != null) {
						log(ILog.INFO,
								"category type.." + cargo.getCategoryType());
						final Map vehicleMap = assetBO.getVehicleAssetTypes();
						assetBO.getLiquidAssetTypes();
						final Map burialMap = assetBO.getBurialAssetTypes();
						final Map realMap = assetBO.getRealAssetTypes();
						final Map prsnMap = assetBO.getPersonalPropertyTypes();
						// To be added
						final Map lifeInsMap = assetBO
								.getLifeInsuranceAssetTypes();
						vehicleMap.put(AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL,
								AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
						prsnMap.put(AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
								AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
						burialMap.put(AppConstants.RMC_CAT_BURIAL_ASSET_PRFL,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);
						realMap.put(AppConstants.RMC_CAT_REAL_ASSET_PRFL,
								AppConstants.RMC_CAT_REAL_ASSET_PRFL);
						lifeInsMap.put(
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);
						if (vehicleMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								vehicleChangeSelected = true;
							}

						}
						if (burialMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								burialChangeSelected = true;
							}

						}
						if (realMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								realChangeSelected = true;
							}

						}
						// to be added perpropMap
						if (prsnMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								perpropChangeSelected = true;
							}

						}
						if (lifeInsMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								lifeInsChangeSelected = true;
							}

						}
					}
				}
			}

			for (int i = 0; i < size; i++) {

				rmcCustomCargo = respColl.getCargo(i);
				seqNum = rmcCustomCargo.getSeqNum();
				catType = rmcCustomCargo.getCategoryType();

				indvSeqNum = rmcCustomCargo.getIndvSeqNum();
				newTypeIndicatorResp = rmcCustomCargo.getResponse();
				if (AppConstants.RMC_ADD_NEW_IND.equals(seqNum)
						&& !AppConstants.NO.equals(newTypeIndicatorResp)) {
					// this one is for the page collection
					if (rmcPrflPageColl != null) {
						rmcPrflPageCargo = rmcResponseProfileManager
								.getProfile(rmcPrflPageColl, indvSeqNum);
					} else {
						rmcPrflPageColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflPageCargo == null) {
						rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflPageCargo.setApp_num(appNum);
						rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines
						 * Commented Code in this block
						 */

						rmcPrflPageColl.addCargo(rmcPrflPageCargo);
					}
					// this one is for the session collection
					if (rmcInPrflSessColl != null) {
						rmcPrflSessCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflSessColl, indvSeqNum);
					} else {
						rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflSessCargo == null) {
						rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflSessCargo.setApp_num(appNum);
						rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
						rmcResponseProfileManager
						.createRMCIndividualProfile(rmcPrflSessCargo);
						rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
					}

					if (AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL.equals(catType)) {
						rmcPrflPageCargo
						.setOther_asset_vehicle_resp(FwConstants.YES);
						vehAddSelected = true;
					} else if (AppConstants.RMC_CAT_REAL_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setOther_asset_real_property_resp(FwConstants.YES);
						realAddSelected = true;
					} else if (AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setOther_asset_personal_prop_resp(FwConstants.YES);
						ppAddSelected = true;
					} else if (AppConstants.RMC_CAT_BURIAL_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setOther_asset_burial_resp(FwConstants.YES);
						burAddSelected = true;
					} else if (AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setOther_aset_life_insurance_resp(FwConstants.YES);
						lifeddSelected = true;
					}

					respColl.remove(i);
					size--;
					i--;
				} else if (AppConstants.RMC_ADD_NEW_IND.equals(seqNum)
						&& AppConstants.NO.equals(newTypeIndicatorResp)) {
					// this one is for the page collection
					if (rmcPrflPageColl != null) {
						rmcPrflPageCargo = rmcResponseProfileManager
								.getProfile(rmcPrflPageColl, indvSeqNum);
					} else {
						rmcPrflPageColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflPageCargo == null) {
						rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflPageCargo.setApp_num(appNum);
						rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);

						rmcPrflPageColl.addCargo(rmcPrflPageCargo);
					}
					// this one is for the session collection
					if (rmcInPrflSessColl != null) {
						rmcPrflSessCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflSessColl, indvSeqNum);
					} else {
						rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflSessCargo == null) {
						rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflSessCargo.setApp_num(appNum);
						rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
						rmcResponseProfileManager
						.createRMCIndividualProfile(rmcPrflSessCargo);
						rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
					}
					// Updating the driver
					if (AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL.equals(catType)) {

					} else if (AppConstants.RMC_CAT_REAL_ASSET_PRFL
							.equals(catType)) {

					} else if (AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL
							.equals(catType)) {

					} else if (AppConstants.RMC_CAT_BURIAL_ASSET_PRFL
							.equals(catType)) {

					} else if (AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL
							.equals(catType)) {

					}
					respColl.remove(i);
					size--;
					i--;
				}
			}

			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflSessColl);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			// Below variable contains list of all the warning message codes
			// displayed previously on this page delimited by '~'
			final String reqWarningMsgs = (String) request
					.get(FwConstants.WARNING_MSG_DETAILS);
			List<String> warningsShown = new ArrayList();
			if (session.get(FwConstants.WARNING_MSG_DETAILS) != null) {
				warningsShown = (ArrayList) session
						.get(FwConstants.WARNING_MSG_DETAILS);
			}
			if (!warningsShown.contains(reqWarningMsgs)) {
				warningsShown.add(reqWarningMsgs);
				session.put(FwConstants.WARNING_MSG_DETAILS, warningsShown);
			}
			FwMessageList msgList = null;

			if (backToMyAccess == null) {
			    final List cmpList = (List) beforeColl.get("PAGE_COMPONENT_LIST");
				// Change selction validation.
				assetBO.validateAssetChangeSelection(respColl,
						assetValidationMap, indvNameMap, warningsShown,cmpList);
			}
			session.put(FwConstants.WARNING_MSG_DETAILS, warningsShown);
			if (assetBO.hasMessages()) {
				msgList = assetBO.getMessageList();

			}
			final boolean isWarningMessageShown = false;

			if (checkBackToMyAccessSelected(request) || msgList != null
					&& !isWarningMessageShown) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST, msgList);
				}

				// here i am calling the translate profile to trans late the
				// session values to the page collection
				if (rmcPrflPageColl != null) {
					rmcResponseProfileManager
					.translateProfileResponseAfterValidation(
							rmcPrflPageColl, rmcInPrflSessColl,
							responseArray);
				}
				if (respColl != null && !respColl.isEmpty()) {
					categorySelectionProfile = categorySelectionProfileManager
							.buildSelectionProfileAfterValidation(
									categorySelectionProfile, respColl);
				}

				final RMCVehicleAssetSelectionListView rmcVehicleAssetSelectionListView = (RMCVehicleAssetSelectionListView) beforeColl
						.get("VEHAST");
				final RMCRealEstateAssetSelectionListView rmcRealEstateAssetSelectionListView = (RMCRealEstateAssetSelectionListView) beforeColl
						.get("REALAST");
				final RMCPersonalPropertyAssetSelectionListView rmcPersonalPropertyAssetSelectionListView = (RMCPersonalPropertyAssetSelectionListView) beforeColl
						.get("PPAST");
				final RMCBurialAssetSelectionListView rmcBurialAssetSelectionListView = (RMCBurialAssetSelectionListView) beforeColl
						.get("BURAST");
				final RMCLifeInsuranceAssetSelectionListView rmcLifeInsuranceAssetSelectionListView = (RMCLifeInsuranceAssetSelectionListView) beforeColl
						.get("LIAST");

				final APP_IN_VEH_ASET_Collection vehColl = (APP_IN_VEH_ASET_Collection) beforeColl
						.get("VEHAST_COLL");
				final APP_IN_R_PROP_ASET_Collection realColl = (APP_IN_R_PROP_ASET_Collection) beforeColl
						.get("REALAST_COLL");
				final APP_IN_P_PROP_ASET_Collection personalColl = (APP_IN_P_PROP_ASET_Collection) beforeColl
						.get("PPAST_COLL");
				final APP_IN_BURY_ASET_Collection burialColl = (APP_IN_BURY_ASET_Collection) beforeColl
						.get("BURAST_COLL");
				final APP_IN_L_INS_ASET_Collection lifeInsColl = (APP_IN_L_INS_ASET_Collection) beforeColl
						.get("LIAST_COLL");

				final List vehicleDataList = new ArrayList();
				vehicleDataList.add(vehColl);
				vehicleDataList.add(indvColl);
				vehicleDataList.add(rmcPrflPageColl);
				vehicleDataList.add(rmcRqstCargo);
				vehicleDataList.add(categorySelectionProfile);
				vehicleDataList.add(driverStatus);

				final List realAssetDataList = new ArrayList();
				realAssetDataList.add(realColl);
				realAssetDataList.add(indvColl);
				realAssetDataList.add(rmcPrflPageColl);
				realAssetDataList.add(rmcRqstCargo);
				realAssetDataList.add(categorySelectionProfile);
				realAssetDataList.add(driverStatus);

				final List personalAssetDataList = new ArrayList();
				personalAssetDataList.add(personalColl);
				personalAssetDataList.add(indvColl);
				personalAssetDataList.add(rmcPrflPageColl);
				personalAssetDataList.add(rmcRqstCargo);
				personalAssetDataList.add(categorySelectionProfile);
				personalAssetDataList.add(driverStatus);

				final List burialAssetDataList = new ArrayList();
				burialAssetDataList.add(burialColl);
				burialAssetDataList.add(indvColl);
				burialAssetDataList.add(rmcPrflPageColl);
				burialAssetDataList.add(rmcRqstCargo);
				burialAssetDataList.add(categorySelectionProfile);
				burialAssetDataList.add(driverStatus);

				final List lifeInsuranceAssetDataList = new ArrayList();
				lifeInsuranceAssetDataList.add(lifeInsColl);
				lifeInsuranceAssetDataList.add(indvColl);
				lifeInsuranceAssetDataList.add(rmcPrflPageColl);
				lifeInsuranceAssetDataList.add(rmcRqstCargo);
				lifeInsuranceAssetDataList.add(categorySelectionProfile);
				lifeInsuranceAssetDataList.add(driverStatus);

				rmcVehicleAssetSelectionListView
				.setDisplayData(vehicleDataList);
				rmcRealEstateAssetSelectionListView
				.setDisplayData(realAssetDataList);
				rmcPersonalPropertyAssetSelectionListView
				.setDisplayData(personalAssetDataList);
				rmcBurialAssetSelectionListView
				.setDisplayData(burialAssetDataList);
				rmcLifeInsuranceAssetSelectionListView
				.setDisplayData(lifeInsuranceAssetDataList);

				pageCollection.put("VEHAST", rmcVehicleAssetSelectionListView);
				pageCollection.put("REALAST",
						rmcRealEstateAssetSelectionListView);
				pageCollection.put("PPAST",
						rmcPersonalPropertyAssetSelectionListView);
				pageCollection.put("BURAST", rmcBurialAssetSelectionListView);
				pageCollection.put("LIAST",
						rmcLifeInsuranceAssetSelectionListView);

				pageCollection.put("VEHAST_COLL", vehColl);
				pageCollection.put("REALAST_COLL", realColl);
				pageCollection.put("PPAST_COLL", personalColl);
				pageCollection.put("BURAST_COLL", burialColl);
				pageCollection.put("LIAST_COLL", lifeInsColl);
				pageCollection.put("RMC_RQST_Collection", rmcRqstPageColl);
				pageCollection.put("PAGE_COMPONENT_LIST",beforeColl.get("PAGE_COMPONENT_LIST"));
				return;
			}
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 2,2 lines Commented Code in
			 * this block
			 */

			boolean vehAstTypeSelRequired = false;
			boolean realEstateAstTypeSelRequired = false;
			boolean ppAstTypeSelRequired = false;
			boolean burialAstTypeSelRequired = false;
			boolean lifeInsAstTypeSelRequired = false;

			if (rmcInPrflSessColl != null) {
				if (rmcPrflPageColl == null) {
					rmcPrflPageColl = new RMC_IN_PRFL_Collection();
				}
				// populating missing app in profile collection into page
				// collection for enter key press
				rmcResponseProfileManager.preparePageColl(rmcPrflPageColl,
						rmcInPrflSessColl, responseArray);

				final int rmcInPrflSessCollectionSize = rmcInPrflSessColl
						.size();
				final int rmcInPrflPageCollectionSize = rmcPrflPageColl.size();
				RMC_IN_PRFL_Cargo rmcInPrflPageCargo = null;
				String[] translatedProfileArray = null;
				String indivSeqNum = null;

				final int[] vehicleAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] realEstateAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] ppAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] burialAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] lifeInsAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };

				final Map indvResponseMap = new HashMap();
				final boolean[] dirtyIndicatorArray = new boolean[rmcResponseProfileManager
				                                                  .getMaxIndvSeqNumber(rmcInPrflSessColl) + 1];
				char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
				// Loop for each individual in session app indv profile
				for (int s = 0; s < rmcInPrflSessCollectionSize; s++) {

					final RMC_IN_PRFL_Cargo rmcInPrflSessCargo = rmcInPrflSessColl
							.getCargo(s);
					// Loop for each individual in page collection app indv
					// profile
					for (int p = 0; p < rmcInPrflPageCollectionSize; p++) {
						rmcInPrflPageCargo = rmcPrflPageColl.getCargo(p);
						// Picking up the matching individuals of session app
						// indv profile from page collection app indv profile
						if (rmcInPrflPageCargo.getIndv_seq_num().equals(
								rmcInPrflSessCargo.getIndv_seq_num())) {
							translatedProfileArray = new String[responseArray.length];
							indivSeqNum = rmcInPrflPageCargo.getIndv_seq_num();

							// Vehicle asset other response
							// Determing Dirty Status
							if (rmcResponseProfileManager.determineDirtyStatus(
									rmcInPrflPageCargo
									.getOther_asset_vehicle_resp(),
									rmcInPrflSessCargo
									.getOther_asset_vehicle_resp(),
									vehicleAstDetailDirtyIndicator,
									driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							// Translating Profile Response
							if (!rmcInPrflSessCargo
									.getOther_asset_vehicle_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getOther_asset_vehicle_resp(),
										rmcInPrflSessCargo
										.getOther_asset_vehicle_resp(),
										driverStatus,
										IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
										rmcInPrflSessCargo);
							}
							// Setting Response Value in array
							translatedProfileArray[0] = rmcInPrflSessCargo
									.getOther_asset_vehicle_resp();
							status = (null != rmcInPrflSessCargo
									.getOther_asset_vehicle_resp()) ? (rmcInPrflSessCargo
									.getOther_asset_vehicle_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							// Scheduling Details Page
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								vehAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARVAD",
										driverArray, appNum);
							}
							// Getting Vehicle Details page status flag value
							if (!vehAstTypeSelRequired) {
								vehAstTypeSelRequired = isVehicleAssetPageRequired(rmcInPrflSessCargo);
							}
							// Getting driver status of vehicle details page
							// from driver array and scheduling page
							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARVAD",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARVAD",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARVAD",
										driverArray, appNum);
							}

							// Real Estate response
							// Determing Dirty Status
							if (rmcResponseProfileManager
									.determineDirtyStatus(
											rmcInPrflPageCargo
											.getOther_asset_real_property_resp(),
											rmcInPrflSessCargo
											.getOther_asset_real_property_resp(),
											realEstateAstDetailDirtyIndicator,
											driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							// Translating Profile Response
							if (!rmcInPrflSessCargo
									.getOther_asset_real_property_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getOther_asset_real_property_resp(),
										rmcInPrflSessCargo
										.getOther_asset_real_property_resp(),
										driverStatus,
										IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
										rmcInPrflSessCargo);
							}
							// Setting Response Value in array
							translatedProfileArray[1] = rmcInPrflSessCargo
									.getOther_asset_real_property_resp();
							status = (null != rmcInPrflSessCargo
									.getOther_asset_real_property_resp()) ? (rmcInPrflSessCargo
									.getOther_asset_real_property_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							// Scheduling Details Page
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								realEstateAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARRPD",
										driverArray, appNum);
							}
							// Getting Real Prop Details page status flag value
							if (!realEstateAstTypeSelRequired) {
								realEstateAstTypeSelRequired = isRealAssetPageRequired(rmcInPrflSessCargo);
							}
							// Getting driver status of Real Pro details page
							// from driver array and scheduling page
							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARRPD",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARRPD",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARRPD",
										driverArray, appNum);
							}

							// Burial Asset response
							if (rmcResponseProfileManager
									.determineDirtyStatus(
											rmcInPrflPageCargo
											.getOther_asset_burial_resp(),
											rmcInPrflSessCargo
											.getOther_asset_burial_resp(),
											burialAstDetailDirtyIndicator,
											driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							// Translating Profile Response
							if (!rmcInPrflSessCargo
									.getOther_asset_burial_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getOther_asset_burial_resp(),
										rmcInPrflSessCargo
										.getOther_asset_burial_resp(),
										driverStatus,
										IRMCResponseProfileManager.OTHR_ASET_BURIAL,
										rmcInPrflSessCargo);
							}
							// Translating Profile Response
							translatedProfileArray[2] = rmcInPrflSessCargo
									.getOther_asset_burial_resp();
							status = (null != rmcInPrflSessCargo
									.getOther_asset_burial_resp()) ? (rmcInPrflSessCargo
									.getOther_asset_burial_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							// Scheduling Details Page
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								burialAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARBAD",
										driverArray, appNum);
							}
							// Getting Burial Details page status flag value
							if (!burialAstTypeSelRequired) {
								burialAstTypeSelRequired = isBurialAssetPageRequired(rmcInPrflSessCargo);
							}
							// Getting driver status of Burial details page from
							// driver array and scheduling page
							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARBAD",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARBAD",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARBAD",
										driverArray, appNum);
							}

							// Personal Property response
							// Determing Dirty Status:
							if (rmcResponseProfileManager
									.determineDirtyStatus(
											rmcInPrflPageCargo
											.getOther_asset_personal_prop_resp(),
											rmcInPrflSessCargo
											.getOther_asset_personal_prop_resp(),
											ppAstDetailDirtyIndicator,
											driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							// Translating Profile Response
							if (!rmcInPrflSessCargo
									.getOther_asset_personal_prop_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getOther_asset_personal_prop_resp(),
										rmcInPrflSessCargo
										.getOther_asset_personal_prop_resp(),
										driverStatus,
										IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
										rmcInPrflSessCargo);
								translatedProfileArray[3] = rmcInPrflSessCargo
										.getOther_asset_personal_prop_resp();
							}
							// Setting Response Value in array
							translatedProfileArray[3] = rmcInPrflSessCargo
									.getOther_asset_personal_prop_resp();
							status = (null != rmcInPrflSessCargo
									.getOther_asset_personal_prop_resp()) ? (rmcInPrflSessCargo
									.getOther_asset_personal_prop_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							// Scheduling Details Page
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								ppAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARORD",
										driverArray, appNum);
							}
							// Getting Perso Prop Details page status flag value
							if (!ppAstTypeSelRequired) {
								ppAstTypeSelRequired = isPersonalPropertypageRequired(rmcInPrflSessCargo);
							}
							// Getting driver status of Personal Prop details
							// page from driver array and scheduling page
							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARORD",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARORD",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARORD",
										driverArray, appNum);
							}

							// Life Insurance response
							// Determing Dirty Status:
							if (rmcResponseProfileManager
									.determineDirtyStatus(
											rmcInPrflPageCargo
											.getOther_aset_life_insurance_resp(),
											rmcInPrflSessCargo
											.getOther_aset_life_insurance_resp(),
											lifeInsAstDetailDirtyIndicator,
											driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;
							}
							// Translating Profile Response
							if (!rmcInPrflSessCargo
									.getOther_aset_life_insurance_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getOther_aset_life_insurance_resp(),
										rmcInPrflSessCargo
										.getOther_aset_life_insurance_resp(),
										driverStatus,
										IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
										rmcInPrflSessCargo);
							}
							// Setting Response Value in array
							translatedProfileArray[4] = rmcInPrflSessCargo
									.getOther_aset_life_insurance_resp();
							status = (null != rmcInPrflSessCargo
									.getOther_aset_life_insurance_resp()) ? (rmcInPrflSessCargo
									.getOther_aset_life_insurance_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							// Scheduling Details Page
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								lifeInsAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARLID",
										driverArray, appNum);
							}
							// Getting Life Insurance Details page status flag
							// value
							if (!lifeInsAstTypeSelRequired) {
								lifeInsAstTypeSelRequired = isLIAssetPageRequired(rmcInPrflSessCargo);
							}
							// Getting driver status of Life Insurance details
							// page from driver array and scheduling page
							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARLID",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARLID",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARLID",
										driverArray, appNum);
							}

							// Addind Response Array to the IndvResponse Map
							indvResponseMap.put(indivSeqNum,
									translatedProfileArray);
							// breaking to pick the next matching individual
							// from session app indv profile
							break;
						}
					}
				}
				// Persistence logic start
				if (dirtyIndicatorArray[0]) {
					String indvSeqNumber = null;
					for (int i = 0; i < rmcInPrflPageCollectionSize; i++) {
						indvSeqNumber = rmcPrflPageColl.getCargo(i)
								.getIndv_seq_num();
						// Changed indvSeqNum to indvSeqNumber
						if (dirtyIndicatorArray[Integer.parseInt(indvSeqNumber)]) {
							rmcResponseProfileManager.persist(appNum,
									indvSeqNumber, responseArray,
									(String[]) indvResponseMap
									.get(indvSeqNumber));
						}
					}
				}
			}

			if (categorySelectionProfile == null
					|| categorySelectionProfile.isEmpty()) {
				// This method will build profile for all the 6 assets types
				categorySelectionProfile = categorySelectionProfileManager
						.buildSelectionProfile(respColl, appNum);
			} else {

				// Here we rebuild the profile for each asset types
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 2,3 lines Commented
				 * Code in this block
				 */

				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_REAL_ASSET_PRFL);
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);

			}

			if (vehAstTypeSelRequired && vehAddSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAT",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAT", driverArray, appNum);
			}
			if (realEstateAstTypeSelRequired && realAddSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPT",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPT", driverArray, appNum);
			}
			if (burialAstTypeSelRequired && burAddSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAD", driverArray, appNum);
			}
			if (ppAstTypeSelRequired && ppAddSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARORT",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORT", driverArray, appNum);
			}
			if (lifeInsAstTypeSelRequired && lifeddSelected) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLIT",
						driverArray, appNum);
			} else {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLIT", driverArray, appNum);
			}

			String assetDetailPageStat = null;
			final Map vehCatTypes = assetBO.getVehicleAssetTypes();
			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			if (vehAstTypeSelRequired
					|| assetBO.checkAssetPageRequired(categorySelectionProfile,
							vehCatTypes,
							AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL)) {

				if (vehAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile, vehCatTypes)
								&& vehicleChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAD",
							driverArray, appNum);
				}
			} else {

				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARVAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)
						&& !vehicleAssetBO.checkVehicleDataExistance(appNum)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARVAD", driverArray, appNum);
				} else {
					// if any other type of job income exists than make page as
					// complete
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAD",
							driverArray, appNum);
				}
			}

			final Map realCatTypes = assetBO.getRealAssetTypes();
			final RealPropertyBO realPropertyBO = new RealPropertyBO();
			if (realEstateAstTypeSelRequired
					|| assetBO.checkAssetPageRequired(categorySelectionProfile,
							realCatTypes, AppConstants.RMC_CAT_REAL_ASSET_PRFL)) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented Code
				 * in this block
				 */

				if (realEstateAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile, realCatTypes)
								&& realChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPD",
							driverArray, appNum);
				}
			} else {
				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARRPD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)
						&& !realPropertyBO
						.checkRealPropertyDataExistance(appNum)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARRPD", driverArray, appNum);
				} else {
					// if any other type of job income exists than make page as
					// complete
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPD",
							driverArray, appNum);
				}
			}

			final Map burialCatTypes = assetBO.getBurialAssetTypes();
			final BurialAssetBO burialAssetBO = new BurialAssetBO();
			if (burialAstTypeSelRequired
					|| assetBO.checkAssetPageRequired(categorySelectionProfile,
							burialCatTypes,
							AppConstants.RMC_CAT_BURIAL_ASSET_PRFL)) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented Code
				 * in this block
				 */

				if (burialAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile,
								burialCatTypes) && burialChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBAD",
							driverArray, appNum);
				}
			} else {
				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARBAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)
						&& !burialAssetBO.checkBurialAssetDataExistance(appNum)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARBAD", driverArray, appNum);
				} else {
					// if any other type of job income exists than make page as
					// complete
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBAD",
							driverArray, appNum);
				}
			}

			final Map perpropCatTypes = assetBO.getPersonalPropertyTypes();
			if (ppAstTypeSelRequired
					|| assetBO.checkAssetPageRequired(categorySelectionProfile,
							perpropCatTypes,
							AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL)) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented Code
				 * in this block
				 */

				if (ppAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile,
								perpropCatTypes)
								&& perpropChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARORD",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORD",
							driverArray, appNum);
				}
			} else {
				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARORD", driverArray);
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented Code
				 * in this block
				 */

				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARORD", driverArray, appNum);
				} else {
					// if any other type of job income exists than make page as
					// complete
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORD",
							driverArray, appNum);
				}
			}

			final Map lifeInsCatTypes = assetBO.getLifeInsuranceAssetTypes();
			final LifeInsuranceBO lifeInsuranceBO = new LifeInsuranceBO();
			if (lifeInsAstTypeSelRequired
					|| assetBO.checkAssetPageRequired(categorySelectionProfile,
							lifeInsCatTypes,
							AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL)) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3,2 lines Commented
				 * Code in this block
				 */

				if (lifeInsAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile,
								lifeInsCatTypes)
								&& lifeInsChangeSelected) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLID",
							driverArray, appNum);
				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLID",
							driverArray, appNum);
				}
			} else {
				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARLID", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)
						&& !lifeInsuranceBO
						.checkLifeInsuranceDataExistance(appNum)) {

					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARLID", driverArray, appNum);
				} else {
					// if any other type of job income exists than make page as
					// complete
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLID",
							driverArray, appNum);
				}
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNum);
			// Store values in session
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
					categorySelectionProfile);
			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());
			session.put(FwConstants.RMC_DRIVER, driverArray);
			pageCollection.put("RMC_RQST_Collection", rmcRqstPageColl);
			txnBean.setSession(session);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherAssetChangeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherAssetChangeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherAssetChangeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetChangeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	// //EDSP ENDS storeOtherAssetChangeSelection METHODS

	// EDSP STA Starts
	/**
	 * the sold and transferred assets
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void getSoldAndTransferredAssets(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getSoldAndTransferredAssets() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			request.put("loopingQuestion", FwConstants.NO);

			CP_APP_IN_ASET_XFER_Collection rmcInLqdAsetColl;
			String pageMode = null;
			String indvSeqNum = null;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TLAS", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			refData.getCodeValues();
			final Map liquidAssetTypeMap = new HashMap();
			liquidAssetTypeMap.put("XR", "XR");
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, liquidAssetTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, liquidAssetTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

			final short[] responseNewType = new short[] { IRMCResponseProfileManager.LIQUID_ASSET_XFER };
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			SortedSet liquidAssetProfile = null;

			if (!previousPageId.equals(currentPageID)) {

				liquidAssetProfile = createPageProfileLiquid(
						categorySelectionProfile, rmcInPrflColl,
						responseNewType);
				// EDSP RMB need to remove
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final CP_APP_IN_ASET_XFER_Collection lqdAssetColl = liquidAssetBO
							.loadAssetXferDetails(appNumber);
					final CP_APP_IN_ASET_XFER_Collection newLqdAssetColl = liquidAssetBO
							.splitLiqCollXfer(lqdAssetColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (newLqdAssetColl != null && !newLqdAssetColl.isEmpty()) {
						CP_APP_IN_ASET_XFER_Cargo rmcInLqdAssetCargo = null;
						final int newLqdAssetCollSize = newLqdAssetColl.size();
						for (int i = 0; i < newLqdAssetCollSize; i++) {
							rmcInLqdAssetCargo = newLqdAssetColl.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									liquidAssetProfile, null, null,
									Short.parseShort(rmcInLqdAssetCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInLqdAssetCargo
													.getSeq_num()), "XR");
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(liquidAssetProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(liquidAssetProfile);
				}
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);

			} else {
				// catAddNewProfile get it from the before collection - Holding
				// the profile for looping the page
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				liquidAssetProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Liquid_Asset_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								liquidAssetProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}

					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(liquidAssetProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							liquidAssetProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						categorySelectionProfileManager
						.insertSequenceDetail(liquidAssetProfile, appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(liquidAssetProfile, null,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(liquidAssetProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Liquid_Asset_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					liquidAssetProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(liquidAssetProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(liquidAssetProfile);
			}

			categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInLqdAsetColl = liquidAssetBO.loadIndividualAssetXferDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("CP_APP_IN_ASET_XFER_Collection",
					rmcInLqdAsetColl);
			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else {
					if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
						pageMode = FwConstants.NO;
					} else {
						pageMode = "C";
					}
				}
			} else {
				if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
					pageMode = FwConstants.NO;
				} else {
					pageMode = "C";
				}
			}
			// EDSP RMB added new person

			final LiquidAssetBO liquidAssetBO1 = new LiquidAssetBO();

			CP_APP_IN_ASET_XFER_Cargo cwwLiquidAssetCargo = liquidAssetBO1
					.splitInLiquidAssetCollXfer(rmcInLqdAsetColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwLiquidAssetCargo == null) {

				cwwLiquidAssetCargo = new CP_APP_IN_ASET_XFER_Cargo();
				addnewPerson = FwConstants.YES;
				pageMode = FwConstants.NO;
			} else {
				if (categorySeqDetail.getUserEndSelectionInd() == 1) {
					pageMode = "E";
				} else {
					pageMode = "C";
				}
				addnewPerson = FwConstants.NO;
			}

			pageCollection.put("SEC_LIQUID_ASSET_XFER", cwwLiquidAssetCargo);
			CP_APP_IN_ASET_XFER_Cargo rmcLiqAsetCargo = liquidAssetBO1
					.splitInLiquidAssetCollXfer(rmcInLqdAsetColl,
							AppConstants.RMC_NEW_RECORD_IND);

			if (rmcLiqAsetCargo != null) {

				pageCollection.put("FST_LIQUID_ASSET_XFER", liquidAssetBO1
						.settingDefaultValuesXfer(rmcLiqAsetCargo));
			} else {

				rmcLiqAsetCargo = liquidAssetBO1.splitInLiquidAssetCollXfer(
						rmcInLqdAsetColl, AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcLiqAsetCargo != null) {

					pageCollection.put("FST_LIQUID_ASSET_XFER", liquidAssetBO1
							.settingDefaultValuesXfer(rmcLiqAsetCargo));
				} else {
					rmcLiqAsetCargo = liquidAssetBO1
							.splitInLiquidAssetCollXfer(rmcInLqdAsetColl,
									AppConstants.RMC_END_RECORD_IND);
					if (rmcLiqAsetCargo != null) {
						pageCollection
						.put("FST_LIQUID_ASSET_XFER",
								liquidAssetBO1
								.settingDefaultValuesXfer(rmcLiqAsetCargo));
					} else {

						pageCollection
						.put("FST_LIQUID_ASSET_XFER",
								liquidAssetBO1
								.settingDefaultValuesXfer(cwwLiquidAssetCargo));
					}

				}
			}
			if (rmcInLqdAsetColl != null && !rmcInLqdAsetColl.isEmpty()) {
				final CP_APP_IN_ASET_XFER_Cargo rmcInSelfeCargo = rmcInLqdAsetColl
						.getCargo(0);
				rmcInSelfeCargo.getSrc_app_ind();
			}

			rmcInPrflColl.size();
			char typeStatus = 'N';
			String showLoopingQuestionFlag = FwConstants.YES;

			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);

			pageCollection.put("PAGE_MODE", pageMode);
			request.put("PAGE_MODE", pageMode);
			// set first name to page collection
			// EDSP LR added PEOPLE_5211 cust coll
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			INDIVIDUAL_Custom_Collection indivCustCol = null;

			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_5211", indivCustCol);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);

			txnBean.setPageCollection(pageCollection);

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}

			// Run ComponentManager to get the components for the current page
			componentManager.getComponents(currentPageID, txnBean);
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getSoldAndTransferredAssets");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"getSoldAndTransferredAssets", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getSoldAndTransferredAssets() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void storeSoldAndTransferredAssets(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		log(ILog.INFO,
				"LiquidAssetEJBBean::storeSoldAndTransferredAssets:Start");
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeSoldAndTransferredAssets() - START");
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		String currentPageID = null;
		String indvSeqNum = null;
		try {

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);

			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			// get the BeforeCollection
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final SortedSet liquidAssetProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforePageColl.get("PAGE_MODE");

			beforePageColl.get(AppConstants.FIRST_NAME);

			// get the RMC_IN_PRFLCollection from session
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// get Details aset Collection and Cargo
			final CP_APP_IN_ASET_XFER_Collection rmcInLqdAsetColl = (CP_APP_IN_ASET_XFER_Collection) pageCollection
					.get("CP_APP_IN_ASET_XFER_Collection");
			CP_APP_IN_ASET_XFER_Cargo rmcInLqdAsetCargo = rmcInLqdAsetColl
					.getCargo(0);

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(liquidAssetProfile);

			categorySeqDetailBean.getUserEndSelectionInd();

			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

			final CP_APP_IN_ASET_XFER_Collection beforeCollRmcInLqdAstColl = (CP_APP_IN_ASET_XFER_Collection) beforePageColl
					.get("CP_APP_IN_ASET_XFER_Collection");
			CP_APP_IN_ASET_XFER_Cargo beforeLiquidAssetCargo = null;

			indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());

			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int lqdAstSeqNum = 0;
			boolean liquidAssetDtlsUpdate = false;


			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (backToMyAccess == null) {
				String showLoopingQuestion = AppConstants.NO;
				if(beforePageColl.containsKey("showLoopingQuestion")){
					showLoopingQuestion = (String) beforePageColl.get("showLoopingQuestion");
				}
				liquidAssetBO.validateSoldAndTransferredAssetDetailsRMC(
						rmcInLqdAsetCargo, peopleHandler, driverStatus,showLoopingQuestion);

			}

			if (checkBackToMyAccessSelected(request)
					|| liquidAssetBO.hasMessages()) {
				if (backToMyAccess == null) {

					request.put(FwConstants.MESSAGE_LIST,
							liquidAssetBO.getMessageList());

				}

				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("CP_APP_IN_ASET_XFER_Collection",
						rmcInLqdAsetColl);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));

				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection
				.put("PAGE_MODE", beforePageColl.get("PAGE_MODE"));

				pageCollection.put("FST_LIQUID_ASSET_XFER", rmcInLqdAsetCargo);

				if (beforePageColl.containsKey("SEC_LIQUID_ASSET_XFER")) {
					pageCollection.put("SEC_LIQUID_ASSET_XFER",
							beforePageColl.get("SEC_LIQUID_ASSET_XFER"));
				}

				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));

				return;
			}

			if (rmcInLqdAsetCargo.getAsset_type() == null
					|| rmcInLqdAsetCargo.getAsset_type().trim().length() == 0) {
				rmcInLqdAsetCargo.setAsset_type(FwConstants.SPACE);
			}
			if (rmcInLqdAsetCargo.getAsset_val_amt() == null
					|| rmcInLqdAsetCargo.getAsset_val_amt().trim().length() == 0) {
				rmcInLqdAsetCargo.setAsset_val_amt(FwConstants.SPACE);
			}
			if (rmcInLqdAsetCargo.getAsset_xfer_amt() == null
					|| rmcInLqdAsetCargo.getAsset_xfer_amt().trim().length() == 0) {
				rmcInLqdAsetCargo.setAsset_xfer_amt(FwConstants.SPACE);
			}
			if (rmcInLqdAsetCargo.getAsset_xfer_rsn_cd() == null
					|| rmcInLqdAsetCargo.getAsset_xfer_rsn_cd().trim().length() == 0) {
				rmcInLqdAsetCargo.setAsset_xfer_rsn_cd(FwConstants.SPACE);
			}
			if (rmcInLqdAsetCargo.getFirst_name() == null
					|| AppConstants.SELECT_DEFAULT_OPTION
					.equals(rmcInLqdAsetCargo.getFirst_name().trim())) {
				rmcInLqdAsetCargo.setFirst_name(FwConstants.SPACE);
			}
			if (rmcInLqdAsetCargo.getLast_name() == null
					|| rmcInLqdAsetCargo.getLast_name().trim().length() == 0) {
				rmcInLqdAsetCargo.setLast_name(FwConstants.SPACE);
			}

			if (rmcInLqdAsetCargo.getAsset_acq_dt() == null
					|| rmcInLqdAsetCargo.getAsset_acq_dt().trim().length() == 0
					|| AppConstants.HIGH_TIMESTAMP
					.equalsIgnoreCase(rmcInLqdAsetCargo
							.getAsset_acq_dt())
							|| AppConstants.HIGH_TIMESTAMP1
							.equalsIgnoreCase(rmcInLqdAsetCargo
									.getAsset_acq_dt())) {
				rmcInLqdAsetCargo.setAsset_acq_dt(AppConstants.HIGH_DATE);
			} else {
				String sDate = rmcInLqdAsetCargo.getAsset_acq_dt();
				if (sDate.length() > 10) {
					sDate = sDate.substring(0, 10);
				}
				rmcInLqdAsetCargo.setAsset_acq_dt(sDate);
			}
			if (rmcInLqdAsetCargo.getAsset_xfer_dt() == null
					|| rmcInLqdAsetCargo.getAsset_xfer_dt().trim().length() == 0
					|| AppConstants.HIGH_TIMESTAMP
					.equalsIgnoreCase(rmcInLqdAsetCargo
							.getAsset_xfer_dt())
							|| AppConstants.HIGH_TIMESTAMP1
							.equalsIgnoreCase(rmcInLqdAsetCargo
									.getAsset_xfer_dt())) {
				rmcInLqdAsetCargo.setAsset_xfer_dt(AppConstants.HIGH_DATE);
			} else {
				String sDate = rmcInLqdAsetCargo.getAsset_xfer_dt();
				if (sDate.length() > 10) {
					sDate = sDate.substring(0, 10);
				}
				rmcInLqdAsetCargo.setAsset_xfer_dt(sDate);
			}

			rmcInLqdAsetCargo.setSrc_app_ind(FwConstants.EMPTY_STRING);

			if (beforeCollRmcInLqdAstColl != null
					&& !beforeCollRmcInLqdAstColl.isEmpty()) {
				final int size = beforeCollRmcInLqdAstColl.size();
				lqdAstSeqNum = (int) categorySeqDetailBean
						.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				}
				if (size == 0) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				if (size == 1
						&& AppConstants.CWW_RECORD_IND
						.equalsIgnoreCase(beforeCollRmcInLqdAstColl
								.getCargo(0).getSrc_app_ind())) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				// RM or RN record
				if (size == 1
						&& (AppConstants.RMC_NEW_RECORD_IND
								.equalsIgnoreCase(beforeCollRmcInLqdAstColl
										.getCargo(0).getSrc_app_ind()) || AppConstants.RMC_MODIFIED_RECORD_IND
										.equalsIgnoreCase(beforeCollRmcInLqdAstColl
												.getCargo(0).getSrc_app_ind()))) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							|| AppConstants.RMC_MODIFIED_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeLiquidAssetCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				beforeLiquidAssetCargo = liquidAssetBO
						.splitInLiquidAssetCollXfer(beforeCollRmcInLqdAstColl,
								sourceAppIndicator);
				if (beforeLiquidAssetCargo == null
						&& (AppConstants.RMC_MODIFIED_RECORD_IND
								.equals(sourceAppIndicator) || AppConstants.RMC_END_RECORD_IND
								.equals(sourceAppIndicator))) {
					beforeLiquidAssetCargo = liquidAssetBO
							.splitInLiquidAssetCollXfer(
									beforeCollRmcInLqdAstColl,
									AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeLiquidAssetCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (beforeLiquidAssetCargo != null) {
					beforeLiquidAssetCargo = beforeCollRmcInLqdAstColl
							.getCargo(0);
					rmcInLqdAsetCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));

					rmcInLqdAsetCargo.setSrc_app_ind(beforeLiquidAssetCargo
							.getSrc_app_ind());
					rmcInLqdAsetCargo.setIndv_seq_num(beforeLiquidAssetCargo
							.getIndv_seq_num());
					rmcInLqdAsetCargo.setSeq_num(beforeLiquidAssetCargo
							.getSeq_num());
					rmcInLqdAsetCargo.setRec_cplt_ind(beforeLiquidAssetCargo
							.getRec_cplt_ind());
					rmcInLqdAsetCargo.setEcp_id(beforeLiquidAssetCargo
							.getEcp_id());

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInLqdAsetCargo.setAsset_type(beforeLiquidAssetCargo
								.getAsset_type());
						rmcInLqdAsetCargo
						.setAsset_val_amt(beforeLiquidAssetCargo
								.getAsset_val_amt());
						rmcInLqdAsetCargo
						.setAsset_xfer_amt(beforeLiquidAssetCargo
								.getAsset_xfer_amt());
						rmcInLqdAsetCargo
						.setAsset_xfer_dt(beforeLiquidAssetCargo
								.getAsset_xfer_dt());
						rmcInLqdAsetCargo
						.setAsset_acq_dt(beforeLiquidAssetCargo
								.getAsset_acq_dt());

					}

				} else {
					if (beforeCollRmcInLqdAstColl != null) {
						final CP_APP_IN_ASET_XFER_Cargo beforeCargo = beforeCollRmcInLqdAstColl
								.getCargo(0);
						rmcInLqdAsetCargo.setEcp_id(beforeCargo.getEcp_id());
					}
				}

				rmcInLqdAsetCargo.setApp_num(appNumber);
				rmcInLqdAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));

				rmcInLqdAsetCargo.setSeq_num(String.valueOf(lqdAstSeqNum));

				rmcInLqdAsetCargo = (CP_APP_IN_ASET_XFER_Cargo) isChanged(
						beforeLiquidAssetCargo, rmcInLqdAsetCargo);
				// EDSP LR added appnumber ,indv_sql_num,seq_num ends
				rmcInLqdAsetCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInLqdAsetCargo.setSrc_app_ind(sourceAppIndicator);

				rmcInLqdAsetCargo.setRowAction(recordInd);
				if (rmcInLqdAsetCargo.isDirty()) {
					liquidAssetDtlsUpdate = true;
				}
			} else {
				if (rmcInLqdAsetCargo.getRec_cplt_ind() == null
						|| rmcInLqdAsetCargo.getRec_cplt_ind().trim().length() == 0) {
					rmcInLqdAsetCargo.setRec_cplt_ind(FwConstants.ZERO);
				}

				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInLqdAsetCargo.setApp_num(appNumber);
				rmcInLqdAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base

				lqdAstSeqNum = liquidAssetBO.getMaxSeqNumberXfer(appNumber,
						indvSeqNum);
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines Commented
				 * Code in this block
				 */

				lqdAstSeqNum = lqdAstSeqNum + 1;
				rmcInLqdAsetCargo.setSeq_num(String.valueOf(lqdAstSeqNum));
				rmcInLqdAsetCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInLqdAsetCargo.setRowAction(recordInd);
				liquidAssetDtlsUpdate = true;

				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager.updateSequence(
						liquidAssetProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) lqdAstSeqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), lqdAstSeqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(lqdAstSeqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
			}

			/** END DATE Commented for Future Purpose **/

			if (liquidAssetDtlsUpdate) {
				if (FwConstants.ROWACTION_INSERT.equals(rmcInLqdAsetCargo
						.getRowAction())) {
					liquidAssetBO
					.insertExistingLqdAstDetailsXfer(rmcInLqdAsetColl);
				} else {
					liquidAssetBO.storeAssetXferDetails(rmcInLqdAsetColl);
				}
			}
			// completeness check
			rmcInLqdAsetCargo.setRec_cplt_ind(liquidAssetBO
					.completenessCheckXfer(rmcInLqdAsetCargo));

			rmcInLqdAsetCargo = rmcInLqdAsetColl.getCargo(0);

			rmcResponseProfileManager.getProfile(rmcInPrflCollSession,
					rmcInLqdAsetCargo.getIndv_seq_num());

			rmcResponseProfileManager.getResponseByType(
					IRMCResponseProfileManager.LIQUID_ASSET_DETAILS, "XR");

			boolean loopingQuestion = false;

			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;

				categorySelectionProfileManager.insertSequenceDetail(
						liquidAssetProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());

				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
						driverArray, appNumber);

			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.LIQUID_ASSET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.LIQUID_ASSET_XFER,
							rmcInPrflCargo, true);
				}
			}
			request.put("loopingQuestion", loopingQuestion);
			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					liquidAssetProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						liquidAssetProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(liquidAssetProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// //Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(liquidAssetProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARACS",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLiquidAssetDetails::End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeSoldAndTransferredAssets");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeSoldAndTransferredAssets", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeSoldAndTransferredAssets() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	// EDSP Ends - STA

	/**
	 * Load asset gate post questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadAssetGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetGatePostQuestions:Start");
			final Map pageCollection = txnBean.getPageCollection();
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String currentLang = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			final String jsEnabled = (String) httpSessMap
					.get(FwConstants.JS_ENABLED);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");

			final AssetBO assetBO = new AssetBO();
			final LiquidAssetBO livingAssetBO = new LiquidAssetBO();
			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			final RealPropertyBO realPropertyBO = new RealPropertyBO();
			final BurialAssetBO burialAssetBO = new BurialAssetBO();
			final LifeInsuranceBO lifeInsuranceBO = new LifeInsuranceBO();

			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(), "R");
			}

			// get questions extraction handler from session
			final QuestionsExtractionHandler extractionHandler = (QuestionsExtractionHandler) session
					.get(AppConstants.QUESTION_EXTRACTION_HANDLER);
			// now get the components for the current page
			componentManager.getComponents("ARAGQ", txnBean);
			// get component list from page collection
			final List cpntList = (ArrayList) pageCollection
					.get(FwConstants.PAGE_COMPONENT_LIST);

			// intialize webservice type array
			final List typeArrayList = new ArrayList();

			// Checking for Liquid Asset
			if (cpntList.contains("5214")
					&& !extractionHandler.checkRMBExtractionStatus("ARAGQ",
							"5214")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_LIQUID);
			}
			// Checking for Vehicle Asset
			if (cpntList.contains("5215")
					&& !extractionHandler.checkRMBExtractionStatus("ARAGQ",
							"5215")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_VEHICLE);
			}
			// Checking for Real Property Asset
			if (cpntList.contains("5217")
					&& !extractionHandler.checkRMBExtractionStatus("ARAGQ",
							"5217")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_REAL_PROPERTY);
			}
			// Checking for Burial Property Asset
			if (cpntList.contains("5218")
					&& !extractionHandler.checkRMBExtractionStatus("ARAGQ",
							"5218")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_BURIAL);
			}
			// Checking for Life Insurance Asset
			if (cpntList.contains("5219")
					&& !extractionHandler.checkRMBExtractionStatus("ARAGQ",
							"5219")) {
				typeArrayList.add(AppConstants.ASSETS_EXT_LIFE_INSURANCE);
			}

			if (typeArrayList != null && !typeArrayList.isEmpty()) {

				final List pinNumList = new ArrayList();
				final int indvCollSize = indvColl.size();
				INDIVIDUAL_Custom_Cargo indivCustCargo = null;
				// Filter pin numbers which are null (new individuals) - PCR
				// 30457
				String pinNumber = null;
				for (int i = 0; i < indvCollSize; i++) {
					indivCustCargo = indvColl.getResult(i);
					pinNumber = indivCustCargo.getIndv_pin_num();
					if (pinNumber != null) {
						pinNumList.add(indivCustCargo.getIndv_pin_num());
					}
				}

				final String[] arrayTypes = new String[typeArrayList.size()];
				for (int i = 0; i < typeArrayList.size(); i++) {
					arrayTypes[i] = (String) typeArrayList.get(i);
				}
				try {
					if (!typeArrayList.isEmpty()) {
						final ASSETS_Custom_Cargo assetsCustCargo = assetBO
								.getAssetDetailsFromCares(pinNumList, appNum,
										arrayTypes);
						if (assetsCustCargo != null) {
							if (assetsCustCargo.getLiquidAssetColl() != null
									&& !assetsCustCargo.getLiquidAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection lqdColl1 = assetsCustCargo
										.getLiquidAssetColl();
								if (lqdColl1 != null) {
									livingAssetBO.insertLiquidDetails(lqdColl1);
									extractionHandler.addRMBExtractionStatus(
											"ARAGQ", "5214");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getVehicleAssetColl() != null
									&& !assetsCustCargo.getVehicleAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection vehColl1 = assetsCustCargo
										.getVehicleAssetColl();
								if (vehColl1 != null) {
									vehicleAssetBO
									.insertVehicleDetails(vehColl1);
									extractionHandler.addRMBExtractionStatus(
											"ARAGQ", "5215");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getRealPropAssetColl() != null
									&& !assetsCustCargo.getRealPropAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection realColl1 = assetsCustCargo
										.getRealPropAssetColl();
								if (realColl1 != null) {
									realPropertyBO.insertRealDetails(realColl1);
									extractionHandler.addRMBExtractionStatus(
											"ARAGQ", "5217");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getBuryAssetColl() != null
									&& !assetsCustCargo.getBuryAssetColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection burialColl1 = assetsCustCargo
										.getBuryAssetColl();
								if (burialColl1 != null) {
									burialAssetBO
									.insertBurialDetails(burialColl1);
									extractionHandler.addRMBExtractionStatus(
											"ARAGQ", "5218");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}

							if (assetsCustCargo.getLifeInsColl() != null
									&& !assetsCustCargo.getLifeInsColl()
									.isEmpty()) {

								final APP_IN_ASET_CUST_Collection lifeInsColl1 = assetsCustCargo
										.getLifeInsColl();
								if (lifeInsColl1 != null) {
									lifeInsuranceBO
									.insertLifeInsuranceRec(lifeInsColl1);
									extractionHandler.addRMBExtractionStatus(
											"ARAGQ", "5219");
									session.put(
											AppConstants.QUESTION_EXTRACTION_HANDLER,
											extractionHandler);
								}
							}
						}
					}
				} catch (final FwException fe) {
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(fe);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadAssetGatePostQuestions");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;

				} catch (final Exception e) {
					final FwException fe = createFwException(this.getClass()
							.getName(), "getIndividualAssetDetailsByPin", e);
					fe.setParameterText("Pin List is: " + pinNumList.toString()
							+ " AppNumber is: " + appNum);
					final FwWrappedException we = new FwWrappedException(fe);
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID("loadAssetGatePostQuestions");
					we.setFwException(fe);
					final FwExceptionManager exceptionMgr = (FwExceptionManager) FwServiceFactory
							.getInstance().create(IException.class);
					exceptionMgr.log(we);
					return;
				}

			}

			final Map newAssetoveridden = new HashMap();

			final APP_IN_LQD_ASET_Collection indLqdAst = livingAssetBO
					.loadLiquidAssetDetails(appNum);
			final APP_IN_LQD_ASET_Collection cashLqdAst = livingAssetBO
					.splitLiqCollByAsetType(indLqdAst, "CAS");
			final APP_IN_LQD_ASET_Collection fALqdAst = livingAssetBO
					.splitLiqCollByAsetType(indLqdAst, "FA");
			final APP_IN_LQD_ASET_Collection otherLqdAst = livingAssetBO
					.splitOtherLiqAsetType(indLqdAst, "OT");

			final RMBLiquidAssetsGPListView liquidAssetsListFAView = new RMBLiquidAssetsGPListView();
			liquidAssetsListFAView.setLanguage(currentLang);
			liquidAssetsListFAView.setCollection(fALqdAst);
			liquidAssetsListFAView.setJsEnabled(jsEnabled);
			liquidAssetsListFAView.setDisplayData(fALqdAst);
			liquidAssetsListFAView.setName("LiquidAssetsListView_ListView");
			liquidAssetsListFAView.setPageSize(100);
			if (liquidAssetsListFAView.getDisplayData().length != 0) {
			}
			pageCollection.put("LiquidAssetsListView_ListView",
					liquidAssetsListFAView);
			pageCollection.put("LQD_FA_GP_AST", fALqdAst);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			// EDSP RMB adding cash list

			final RMCCashGatePostListView liquidAssetsCashListView = new RMCCashGatePostListView();
			liquidAssetsCashListView.setLanguage(currentLang);
			liquidAssetsCashListView.setJsEnabled(jsEnabled);
			liquidAssetsCashListView.setDisplayData(cashLqdAst);
			liquidAssetsCashListView
			.setName("LiquidAssetsListView_CashListView");
			liquidAssetsCashListView.setPageSize(100);
			if (liquidAssetsCashListView.getDisplayData().length != 0) {
			}
			pageCollection.put("LiquidAssetsListView_CashListView",
					liquidAssetsCashListView);
			pageCollection.put("LQD_CASH_GP_AST", cashLqdAst);

			// start other resources

			final RMBLiquidAssetsGPListView liquidAssetsListotherView = new RMBLiquidAssetsGPListView();
			liquidAssetsListotherView.setLanguage(currentLang);
			liquidAssetsListotherView.setCollection(otherLqdAst);
			liquidAssetsListotherView.setJsEnabled(jsEnabled);
			liquidAssetsListotherView.setDisplayData(otherLqdAst);
			liquidAssetsListotherView
			.setName("LiquidAssetsListView_OtherListView");
			liquidAssetsListotherView.setPageSize(100);
			if (liquidAssetsListotherView.getDisplayData().length != 0) {
			}
			pageCollection.put("LiquidAssetsListView_OtherListView",
					liquidAssetsListotherView);
			pageCollection.put("LQD_OTHER_GP_AST", otherLqdAst);

			// end other resources
			final RMBRealEstateAssetsGPListView realEstateAssetsListView = new RMBRealEstateAssetsGPListView();
			pageCollection.put("RealEstateAssetsListView_ListView",
					realEstateAssetsListView);

			request.put("INDV_COLL", indvColl);
			pageCollection.put("INDV_COLL", indvColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			// if comming back load with previously selection resposnes
			// get current page driver status
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int currentPageStaus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARAGQ", driverArray);
			// get session RMC_CHG_SEL_PRFL
			SortedSet sessChgSelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// this map holds the response of
			Map securityRadioOptionsMap = new HashMap();
			// get RMB Rqst Manager
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			// get rmc_in_prfl from session
			final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// get RMB_RQST from session
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			// preapare security map for questions if the user is re-visting the
			// page
			if (currentPageStaus != FwConstants.DRIVER_REQUIRED) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_LIQUID_ASSET_PRFL + "'";
				sessChgSelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
				securityRadioOptionsMap = rmbRqstManager.getStatusForGatePost(
						AppConstants.RMB_ASSET_GATE_POST_PAGE, sessRMBRqstColl,
						driverArray, sessRMCInPrflColl,
						sessChgSelectionProfile, peopleHandler);
				pageCollection.put("RADIO_OPTION_MAP", securityRadioOptionsMap);

				final Map indvSelectedMap = new HashMap();
				for (int a = 0; a < sessRMCInPrflColl.size(); a++) {
					final RMC_IN_PRFL_Cargo cargo = sessRMCInPrflColl
							.getCargo(a);
					indvSelectedMap.put(cargo.getIndv_seq_num(),
							cargo.getOther_asset_transfer_resp());
				}
				pageCollection.put("GIVING_AWAY_ASSET_SELECTED",
						indvSelectedMap);

			}

			pageCollection.get("RMC_IN_PRFL_Collection");

			getPeopleCollectionAndUpdateMaps(sessRMCInPrflColl, pageCollection,
					peopleHandler, "SGA",
					IRMCResponseProfileManager.OTHR_ASET_TRANSFER, true,
					currentPageStaus, true);

			final RMBRequestManager rmbRequestManager = new RMBRequestManager();
			if (pageRMBRqstColl == null) {
				pageRMBRqstColl = new RMB_RQST_Collection();
				pageRMBRqstColl.add(rmbRequestManager.loadRMBRequest(appNum));
			}
			pageCollection
			.put("NEW_ASSET_MAP", beforeColl.get("NEW_ASSET_MAP"));
			pageCollection.put("PAGE_STATUS", String.valueOf(currentPageStaus));
			pageCollection.put("NO_ONE_Collection",
					beforeColl.get("NO_ONE_Collection"));
			pageCollection.put("RMB_RQST_Collection", pageRMBRqstColl);
			pageCollection.put("NEW_ASSET_OVERRIDE", newAssetoveridden);
			componentManager.getComponents("ARAGQ", txnBean);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetGatePostQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadAssetGatePostQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadAssetGatePostQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetGatePostQuestions() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store asset gate post questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeAssetGatePostQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeAssetGatePostQuestions() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetGatePostQuestions:Start");

			final Map pageCollection = txnBean.getPageCollection();
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			httpSessMap.get(FwConstants.LANGUAGE);
			httpSessMap.get(FwConstants.JS_ENABLED);


			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARAGQ", driverArray);
			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getInHomeIndividuals();

			final AssetBO assetBO = new AssetBO();
			final RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");
			RMB_RQST_Cargo pageRMBRqstCargo = null;

			final NO_ONE_Collection noOneColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			final RMB_RQST_Collection sessRMBRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			final RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final RMB_RQST_Cargo sessRMBRqstCargo = sessRMBRqstColl.getCargo(0);
			// get RMB_RQST_Cargo
			pageRMBRqstCargo = pageRMBRqstColl.getCargo(0);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			pageCollection.put("NO_ONE_Collection", noOneColl);

			if (backToMyAccess == null) {
				assetBO.validateARAGQ(pageRMBRqstColl.getCargo(0), beforeColl,
						rmcInPrflColl, noOneColl);
				/*
				 * VG SONAR Cleanup - 08/27/2015 Changed Commented code block to
				 * javadoc
				 */
				/**
				 * if(request.get("checkboxGroup") == null){
				 * assetBO.validateNewAssetType(); }else{
				 * if(request.get("checkboxGroup").toString().length() <= 2 ){
				 * String var = (String)request.get("checkboxGroup"); addNewList
				 * = new String[1]; addNewList[0] = var; }else{ addNewList =
				 * (String[])request.get("checkboxGroup"); }
				 *
				 * // Update the add new indicator in to pageRMB request. int
				 * arraysize = addNewList.length;
				 *
				 * for(int k=0;k<arraysize;k++){
				 * newAssetMap.put(addNewList[k],addNewList[k]); }
				 *
				 * // By default set the add indicator to NO.
				 * pageRMBRqstCargo.setBury_aset_add_ind(AppConstants.NO);
				 * pageRMBRqstCargo.setLi_aset_add_ind(AppConstants.NO);
				 * pageRMBRqstCargo.setLqd_aset_add_ind(AppConstants.NO);
				 * pageRMBRqstCargo.setReal_aset_add_ind(AppConstants.NO);
				 * pageRMBRqstCargo.setVeh_aset_add_ind(AppConstants.NO);
				 *
				 * // check for any new asset to be added
				 * if(newAssetMap.containsKey
				 * (AppConstants.RMC_CAT_BURIAL_ASSET_PRFL)){
				 * pageRMBRqstCargo.setBury_aset_add_ind(AppConstants.YES); }
				 * if( newAssetMap.containsKey(AppConstants.
				 * RMC_CAT_LIFE_INS_ASSET_PRFL )){
				 * pageRMBRqstCargo.setLi_aset_add_ind(AppConstants.YES); } if
				 * (newAssetMap
				 * .containsKey(AppConstants.RMC_CAT_LIQUID_ASSET_PRFL )){
				 * pageRMBRqstCargo.setLqd_aset_add_ind(AppConstants.YES); } if
				 * (newAssetMap.containsKey(AppConstants.RMC_CAT_REAL_ASSET_PRFL
				 * )){ pageRMBRqstCargo.setReal_aset_add_ind(AppConstants.YES);
				 * } if(newAssetMap.containsKey(AppConstants.
				 * RMC_CAT_VEHICLE_ASSET_PRFL)){
				 * pageRMBRqstCargo.setVeh_aset_add_ind(AppConstants.YES); }
				 *
				 * request.put("NEW_ASSET_MAP",newAssetMap);
				 *
				 * if(newAssetMap.containsKey("NN") && arraysize > 1){
				 * assetBO.validateNewAssetType(); }else
				 * if(newAssetMap.containsKey("NN") && arraysize == 1){
				 * addNewFlag = false; } }
				 */
			}

			if (checkBackToMyAccessSelected(request) || assetBO.hasMessages()) {

				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							assetBO.getMessageList());
				}

				pageCollection.put("LiquidAssetsListView_ListView",
						beforeColl.get("LiquidAssetsListView_ListView"));

				pageCollection.put("LiquidAssetsListView_CashListView",
						beforeColl.get("LiquidAssetsListView_CashListView"));

				pageCollection.put("LiquidAssetsListView_OtherListView",
						beforeColl.get("LiquidAssetsListView_OtherListView"));

				/**
				 * pageCollection.put("VehicleAssetsListView_ListView",(
				 * RMBVehicleAssetsGPListView
				 * )beforeColl.get("VehicleAssetsListView_ListView"));
				 * pageCollection.put("RealEstateAssetsListView_ListView",(
				 * RMBRealEstateAssetsGPListView
				 * )beforeColl.get("RealEstateAssetsListView_ListView"));
				 * pageCollection.put("BurialPropertyAssetsListView_ListView",(
				 * RMBBurialPropertyGPAssetsListView
				 * )beforeColl.get("BurialPropertyAssetsListView_ListView"));
				 * pageCollection.put("LifeInsuranceAssetsListView_ListView",(
				 * RMBLifeInsuranceAssetsGPListView
				 * )beforeColl.get("LifeInsuranceAssetsListView_ListView"));
				 */

				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1,4,4,4 lines Commented
				 * Code in this block
				 */

				pageCollection.put("LQD_FA_GP_AST",
						beforeColl.get("LQD_FA_GP_AST"));
				pageCollection.put("LQD_OTHER_GP_AST",
						beforeColl.get("LQD_OTHER_GP_AST"));
				pageCollection.put("LQD_CASH_GP_AST",
						beforeColl.get("LQD_CASH_GP_AST"));

				pageCollection.put("INDV_COLL", beforeColl.get("INDV_COLL"));
				pageCollection.put("RMB_RQST_Collection",
						beforeColl.get("RMB_RQST_Collection"));
				pageCollection.put("NEW_ASSET_OVERRIDE",
						beforeColl.get("NEW_ASSET_OVERRIDE"));

				final Map indvSelectedMap = new HashMap();
				for (int a = 0; a < rmcInPrflColl.size(); a++) {
					final RMC_IN_PRFL_Cargo cargo = rmcInPrflColl.getCargo(a);
					if (AppConstants.YES.equalsIgnoreCase(cargo
							.getOther_asset_transfer_resp())) {
						indvSelectedMap
						.put(cargo.getIndv_seq_num(),
								String.valueOf(ICategorySelectionProfileManager.STATUS_REQUIRED));
					}
				}

				String noOneChecked = FwConstants.NO;
				if (!noOneColl.isEmpty()) {
					noOneChecked = FwConstants.YES;
				}
				final Map noOneCheckedMap = new HashMap();
				// update the noOneCheckedMap and re-add it to the page coll
				final StringBuilder noOneCheckedString = new StringBuilder();
				noOneCheckedString.append(AppConstants.NO_ONE_CHECKED);
				noOneCheckedString.append("SGA");
				noOneCheckedMap
				.put(noOneCheckedString.toString(), noOneChecked);
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);

				pageCollection.put("RESP_MAP_SGA", indvSelectedMap);
				pageCollection.put("RMB_RQST_Collection", pageRMBRqstColl);

				if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "ARAGQ",
						driverArray) == FwConstants.DRIVER_REQUIRED) {
					pageCollection.put("RADIO_OPTION_MAP", rmbRqstManager
							.getStatusForGatePostAfterValidation(
									AppConstants.RMB_ASSET_GATE_POST_PAGE,
									pageRMBRqstColl));
				} else {
					final RMC_IN_PRFL_Collection sessRMCInPrflColl = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					// get session RMC_CHG_SEL_PRFL
					final SortedSet sessChgSelectionProfile = (SortedSet) session
							.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
					pageCollection.put("RADIO_OPTION_MAP", rmbRqstManager
							.getStatusForGatePost(
									AppConstants.RMB_ASSET_GATE_POST_PAGE,
									sessRMBRqstColl, driverArray,
									sessRMCInPrflColl, sessChgSelectionProfile,
									peopleHandler));
				}
				return;
			}

			// call request manager to get complete cargo
			pageRMBRqstCargo = rmbRqstManager.getCompleteCargo(
					sessRMBRqstCargo, pageRMBRqstCargo);
			// now call ischanged
			pageRMBRqstCargo = (RMB_RQST_Cargo) isChanged(sessRMBRqstCargo,
					pageRMBRqstCargo);

			if (driverStatus != FwConstants.DRIVER_REQUIRED) {
				rmbRqstManager.changeStatusOnGatePost(pageRMBRqstColl, session,
						AppConstants.RMB_ASSET_GATE_POST_PAGE);
			}

			// check if collection is Dirty Update RMBRequest Table with user
			// response .
			if (pageRMBRqstCargo.isDirty()) {
				pageRMBRqstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				final RMB_RQST_Collection rMBRqstColl = new RMB_RQST_Collection();
				rMBRqstColl.add(pageRMBRqstCargo);
				rmbRqstManager.storeRMBRqst(rMBRqstColl);
				// put the update RMB_RQST_Collection into session
				session.put(AppConstants.RMB_RQST_COLLECTION, rMBRqstColl);
			}

			// Added for Given away assets.

			RMC_IN_PRFL_Cargo pageCargo = null;
			RMC_IN_PRFL_Cargo sesnCargo = null;
			String[] indivResponseArray = null;
			final Map indivResponseMap = new HashMap();
			final int[] dirtyIndicatorGivenAwayAsset = { IApplicationManager.NOT_DIRTY };

			final short[] questionsArray = new short[1];
			questionsArray[0] = IRMCResponseProfileManager.OTHR_ASET_TRANSFER;
			rmcResponseProfileManager.preparePageColl(rmcInPrflColl,
					rmcInPrflSessColl, questionsArray);

			final boolean[] persistPeople = new boolean[rmcResponseProfileManager
			                                            .getMaxIndvSeqNumber(rmcInPrflSessColl) + 1];

			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				for (int i = 0; i < rmcInPrflSessColl.size(); i++) {
					sesnCargo = rmcInPrflSessColl.getCargo(i);
					final String indvSeqNum = sesnCargo.getIndv_seq_num();
					for (int j = 0; j < rmcInPrflColl.size(); j++) {
						pageCargo = rmcInPrflColl.getCargo(j);
						if (pageCargo.getIndv_seq_num().equals(indvSeqNum)) {
							sesnCargo = rmcResponseProfileManager.getProfile(
									rmcInPrflSessColl,
									pageCargo.getIndv_seq_num());
							break;
						} else {
							sesnCargo = null;
						}
					}

					if (sesnCargo != null) {
						indivResponseArray = new String[1];
						if (rmcResponseProfileManager.determineDirtyStatus(
								pageCargo.getOther_asset_transfer_resp(),
								sesnCargo.getOther_asset_transfer_resp(),
								dirtyIndicatorGivenAwayAsset, driverStatus)) {
							trackPeopleToPersist(persistPeople,
									Integer.parseInt(pageCargo
											.getIndv_seq_num()));
						}
						rmcResponseProfileManager.translateProfileResponses(
								pageCargo.getOther_asset_transfer_resp(),
								sesnCargo.getOther_asset_transfer_resp(),
								driverStatus,
								IRMCResponseProfileManager.OTHR_ASET_TRANSFER,
								sesnCargo);
						char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
						indivResponseArray[0] = sesnCargo
								.getOther_asset_transfer_resp();						
						status = (null != sesnCargo
								.getOther_asset_transfer_resp()) ? (sesnCargo
								.getOther_asset_transfer_resp().charAt(0))
								: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
						if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
								|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
								|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
							/*
							 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines
							 * Commented Code in this block
							 */

							driverManager.makeRequired(FwConstants.RMC_DRIVER,
									"ARXFR", driverArray, appNum);
						}
						indivResponseMap.put(pageCargo.getIndv_seq_num(),
								indivResponseArray);

					}
					session.put(AppConstants.RMC_IN_PRFL_MASTER,
							rmcInPrflSessColl);
				}
			}

			if (persistPeople[IRMCResponseProfileManager.ARE_PEOPLE_DIRTY] == true) {
				// For each INDV_SEQ_NUM
				for (int i = 0; i < rmcInPrflSessColl.size(); i++) {
					// Get cargo i from the collection
					sesnCargo = (RMC_IN_PRFL_Cargo) rmcInPrflSessColl.get(i);
					// Get INDV_SEQ_NUM for current cargo
					final String indivSeqNum = sesnCargo.getIndv_seq_num();
					final int indivSeqNumInt = Integer.parseInt(indivSeqNum);
					// Does persistPeople[INDV_SEQ_NUM] = true?
					if (persistPeople[indivSeqNumInt] == true) {
						// Yes, data is dirty, call persist()
						rmcResponseProfileManager.persist(appNum, indivSeqNum,
								questionsArray,
								(String[]) indivResponseMap.get(indivSeqNum));
					}
				}
			}
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 10 lines Commented Code in
			 * this block
			 */

			/**
			 * if(pageRMBRqstCargo.isDirty()){
			 * if(pageRMBRqstCargo.getLqd_aset_stat_ind
			 * ().equalsIgnoreCase(AppConstants.YES) ||
			 * pageRMBRqstCargo.getVeh_aset_stat_ind
			 * ().equalsIgnoreCase(AppConstants.YES) ||
			 * pageRMBRqstCargo.getReal_aset_stat_ind
			 * ().equalsIgnoreCase(AppConstants.YES) ||
			 * pageRMBRqstCargo.getBury_aset_stat_ind
			 * ().equalsIgnoreCase(AppConstants.YES) ||
			 * pageRMBRqstCargo.getLi_aset_stat_ind
			 * ().equalsIgnoreCase(AppConstants.YES) || addNewFlag ) {
			 * driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARACS",
			 * driverArray, appNum); }else {
			 * driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
			 * "ARACS", driverArray, appNum); } }else {
			 *
			 * short[] superResponseArray = new short[]
			 * {IRMCResponseProfileManager.LIQ_ASET_OTHER,
			 * IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
			 * IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
			 * IRMCResponseProfileManager.OTHR_ASET_BURIAL,
			 * IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE}; // Check
			 * for change selection page is req or not SortedSet rmcSelPrfl =
			 * (SortedSet)session.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			 * if (categorySelectionProfileManager.areAllSequencesComplete(
			 * rmcSelPrfl) &&
			 * rmcResponseProfileManager.isRMCInPrflRespCompleted(
			 * rmcInPrflSessColl,superResponseArray) ) {
			 * driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
			 * "ARACS", driverArray, appNum); }
			 *
			 * //driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
			 * "ARACS", driverArray, appNum); }
			 */

			// Update Driver to schedule required Asset change selection page
			boolean pageARACSRequiredFlag = false;
			boolean pageARACSCompletedFlag = false;
			final int aARACSPageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, "ARACS", driverArray);

			// check cash Liquid asset
			if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_cash_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getLiquid_asset_cash_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo
									.getLiquid_asset_cash_stat_ind()))) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_cash_stat_ind())
					&& (aARACSPageStatus == FwConstants.DRIVER_REQUIRED || aARACSPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_cash_stat_ind())
					&& aARACSPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageARACSCompletedFlag = true;
			}
			// check bank liquid asset

			if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_bank_acc_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getLiquid_asset_bank_acc_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo
									.getLiquid_asset_bank_acc_stat_ind()))) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_bank_acc_stat_ind())
					&& (aARACSPageStatus == FwConstants.DRIVER_REQUIRED || aARACSPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_bank_acc_stat_ind())
					&& aARACSPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageARACSCompletedFlag = true;
			}

			// check other liquid asset

			if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_other_stat_ind())
					&& (FwConstants.NO.equals(sessRMBRqstCargo
							.getLiquid_asset_other_stat_ind()) || FwConstants.HIDDEN
							.equals(sessRMBRqstCargo
									.getLiquid_asset_other_stat_ind()))) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_other_stat_ind())
					&& (aARACSPageStatus == FwConstants.DRIVER_REQUIRED || aARACSPageStatus == FwConstants.DRIVER_VISIT_AGAIN)) {
				pageARACSRequiredFlag = true;
			} else if (FwConstants.YES.equals(pageRMBRqstCargo
					.getLiquid_asset_other_stat_ind())
					&& aARACSPageStatus == FwConstants.DRIVER_COMPLETE) {
				pageARACSCompletedFlag = true;
			}
			if (!pageARACSRequiredFlag) {
				if (!pageARACSCompletedFlag) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARACS", driverArray,
							appNum);
				}
			} else if (pageARACSRequiredFlag) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARACS",
						driverArray, appNum);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARAGQ",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetGatePostQuestions:End");
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.storeAssetGatePostQuestions() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return;
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAssetGatePostQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAssetGatePostQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Load asset intermediate questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadAssetIntermediateQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetIntermediateQuestions:Start");

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetIntermediateQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadAssetIntermediateQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadAssetIntermediateQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Store asset intermediate questions.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeAssetIntermediateQuestions(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetIntermediateQuestions:Start");

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetIntermediateQuestions:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAssetIntermediateQuestions");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAssetIntermediateQuestions", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Load asset change selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadAssetChangeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetChangeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetChangeSelection:Start");

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			final Map request = txnBean.getRequest();
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			final Map httpSessMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessMap
					.get(FwConstants.LANGUAGE);
			final RMBRequestManager rmbRequestManager = new RMBRequestManager();
			final String currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);

			final List dataList = new ArrayList();

			// Getting RMC_IN_PROFILE from session
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMB_RQST_Collection rmbPageColl = (RMB_RQST_Collection) session
					.get("RMB_RQST_COLLECTION");
			if (rmbPageColl == null) {
				rmbPageColl = new RMB_RQST_Collection();
				rmbPageColl.add(rmbRequestManager.loadRMBRequest(appNum));
			}
			final RMB_RQST_Cargo rmbCargo = rmbPageColl.getCargo(0);

			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Get liquid Asset Collection
			final LiquidAssetBO livingAssetBO = new LiquidAssetBO();

			final APP_IN_LQD_ASET_Collection liquidAsstDtl = livingAssetBO
					.loadLiquidAssetDetails(appNum);
			final APP_IN_LQD_ASET_Collection cashLiquidAsstDtl = livingAssetBO
					.splitLiqCollByAsetType(liquidAsstDtl, "CAS");
			final APP_IN_LQD_ASET_Collection faLiquidAsstDtl = livingAssetBO
					.splitLiqFinancialCollByAsetType(liquidAsstDtl, "FA");
			final APP_IN_LQD_ASET_Collection othrLiquidAsstDtl = livingAssetBO
					.splitOtherLiqAsetType(liquidAsstDtl, "OT");
			final CP_APP_IN_ASET_XFER_Collection xferLiquidAsstDtl = livingAssetBO
					.loadIndividualAssetXferDetails(appNum, "CW");

			SortedSet selectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			boolean loadCatSelProfile = false;

			if ((selectionProfile == null || selectionProfile.isEmpty())
					&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
				// load selection profile form the data base
				loadCatSelProfile = true;
			} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
				// here we need to check the session profile is housing/utility
				// session profile
				CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
						.getCurrentSequenceDetail(selectionProfile);
				if (catSeqDetail == null) {
					catSeqDetail = categorySelectionProfileManager
							.getNextSequenceDetail(selectionProfile);

					if (catSeqDetail != null
							&& AppConstants.RMC_CAT_LIQUID_ASSET_PRFL
							.equals(catSeqDetail
									.getChangeSelectionCategoryCd())) {
						loadCatSelProfile = false;
					} else {
						loadCatSelProfile = true;
					}
				}
			}

			// now loading the cat selection profile from the data base
			if (loadCatSelProfile) {
				final String categoryCodes = "'"
						+ AppConstants.RMC_CAT_LIQUID_ASSET_PRFL + "'";

				selectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfileByCategoryCds(
								appNum, categoryCodes);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						selectionProfile);
			}
			dataList.add(faLiquidAsstDtl);
			dataList.add(indvColl);
			dataList.add(rmcInPrflColl);
			dataList.add(rmbCargo);
			dataList.add(selectionProfile);
			dataList.add(driverStatus);

			final RMBLiquidAssetSelectionListView rmcfaliquidAssetSelectionListView = new RMBLiquidAssetSelectionListView();
			// Preparing listView for regular job
			rmcfaliquidAssetSelectionListView.setLanguage(language);
			rmcfaliquidAssetSelectionListView.setName("FALQDAST");
			rmcfaliquidAssetSelectionListView.setCollection(indvColl);
			rmcfaliquidAssetSelectionListView.setDisplayData(dataList);
			rmcfaliquidAssetSelectionListView.setPageSize(1000);
			pageCollection.put("FALQDAST", rmcfaliquidAssetSelectionListView);
			pageCollection.put("FALQDAST_COLL", faLiquidAsstDtl);

			final List othrList = new ArrayList();
			othrList.add(othrLiquidAsstDtl);
			othrList.add(indvColl);
			othrList.add(rmcInPrflColl);
			othrList.add(rmbCargo);
			othrList.add(selectionProfile);
			othrList.add(driverStatus);

			final RMBOtherLiquidAssetSelectionListView rmcothrliquidAssetSelectionListView = new RMBOtherLiquidAssetSelectionListView();
			// Preparing listView for regular job
			rmcothrliquidAssetSelectionListView.setLanguage(language);
			rmcothrliquidAssetSelectionListView.setName("OTHRLQDAST");
			rmcothrliquidAssetSelectionListView.setCollection(indvColl);
			rmcothrliquidAssetSelectionListView.setDisplayData(othrList);
			rmcothrliquidAssetSelectionListView.setPageSize(1000);
			pageCollection.put("OTHRLQDAST",
					rmcothrliquidAssetSelectionListView);
			pageCollection.put("OTHRLQDAST_COLL", othrLiquidAsstDtl);

			// Adding CASH
			final List cashList = new ArrayList();
			cashList.add(cashLiquidAsstDtl);
			cashList.add(indvColl);
			cashList.add(rmcInPrflColl);
			cashList.add(rmbCargo);
			cashList.add(selectionProfile);
			cashList.add(driverStatus);

			final RMBCashLiquidAssetSelectionListView rmccashliquidAssetSelectionListView = new RMBCashLiquidAssetSelectionListView();
			// Preparing listView for regular job
			rmccashliquidAssetSelectionListView.setLanguage(language);
			rmccashliquidAssetSelectionListView.setName("CASHLQDAST");
			rmccashliquidAssetSelectionListView.setCollection(indvColl);
			rmccashliquidAssetSelectionListView.setDisplayData(cashList);
			rmccashliquidAssetSelectionListView.setPageSize(1000);
			pageCollection.put("CASHLQDAST",
					rmccashliquidAssetSelectionListView);
			pageCollection.put("CASHLQDAST_COLL", cashLiquidAsstDtl);

			final List xferList = new ArrayList();
			xferList.add(xferLiquidAsstDtl);
			xferList.add(indvColl);
			xferList.add(rmcInPrflColl);
			xferList.add(rmbCargo);
			xferList.add(selectionProfile);
			xferList.add(driverStatus);

			final RMBSoldLiquidAssetSelectionListView rmcxferliquidAssetSelectionListView = new RMBSoldLiquidAssetSelectionListView();
			// Preparing listView for regular job
			rmcxferliquidAssetSelectionListView.setLanguage(language);
			rmcxferliquidAssetSelectionListView.setName("SOLDLQDAST");
			rmcxferliquidAssetSelectionListView.setCollection(indvColl);
			rmcxferliquidAssetSelectionListView.setDisplayData(xferList);
			rmcxferliquidAssetSelectionListView.setPageSize(1000);
			pageCollection.put("SOLDLQDAST",
					rmcxferliquidAssetSelectionListView);
			pageCollection.put("SOLDLQDAST_COLL", xferLiquidAsstDtl);
			
			//Million dollar Q
			final ABHouseHoldMemberBO hmbo = new ABHouseHoldMemberBO();
			APP_INDV_ADDI_INFO_Collection addiInfoColl = new APP_INDV_ADDI_INFO_Collection();
			addiInfoColl = hmbo.getMigFarmWrkrDtl(appNum);
			pageCollection.put("APP_INDV_ADDI_INFO_Collection", addiInfoColl);
			
			componentManager.getComponents(currentPageID, txnBean);

			final Map newAssetMap = new HashMap();
			pageCollection.put("NEW_ASSET_MAP", newAssetMap);
			pageCollection.put("RMB_RQST_Collection", rmbPageColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadAssetChangeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadAssetChangeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadAssetChangeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetChangeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store asset change selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeAssetChangeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeAssetChangeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetChangeSelection:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			request.get(FwConstants.CURRENT_PAGE_ID);
			final RMBRequestManager rmbRequestManager = new RMBRequestManager();
			RMC_RESPONSE_Custom_Collection beforeRespColl = (RMC_RESPONSE_Custom_Collection) pageCollection
					.get("RMC_RESPONSE_Custom_Collection");
			final AssetBO assetBO = new AssetBO();
			beforeRespColl = assetBO.formatResponse(beforeRespColl);
			final RMC_RESPONSE_Custom_Collection respColl = new RMC_RESPONSE_Custom_Collection();
			for (int i = 0; i < beforeRespColl.size(); i++) {
				RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
				rmcCustomCargo = beforeRespColl.getCargo(i);
				if (!FwConstants.NO.equals(rmcCustomCargo.getResponse())) {
					respColl.add(rmcCustomCargo);
				}

			}
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			assetBO.formatAssetResponse(respColl);
			RMB_RQST_Collection rmbRqstPageColl = (RMB_RQST_Collection) pageCollection
					.get("RMB_RQST_Collection");
			
			APP_INDV_ADDI_INFO_Collection additionalInfoColl = new APP_INDV_ADDI_INFO_Collection();
			APP_INDV_ADDI_INFO_Collection beforeAdditionalInfoColl = new APP_INDV_ADDI_INFO_Collection();
			additionalInfoColl = (APP_INDV_ADDI_INFO_Collection) pageCollection
					.get("APP_INDV_ADDI_INFO_Collection");
			beforeAdditionalInfoColl = (APP_INDV_ADDI_INFO_Collection) beforeColl.get("APP_INDV_ADDI_INFO_Collection");
			
			if (rmbRqstPageColl == null) {
				rmbRqstPageColl = new RMB_RQST_Collection();
				rmbRqstPageColl.add(rmbRequestManager.loadRMBRequest(appNum));
			}
			final RMB_RQST_Cargo rmbRqstCargo = rmbRqstPageColl.getCargo(0);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
					.getInHomeIndividuals();
			final int indvSize = indvColl.size();
			final Map indvNameMap = new HashMap();
			for (int i = 0; i < indvSize; i++) {
				final INDIVIDUAL_Custom_Cargo indvCargo = (INDIVIDUAL_Custom_Cargo) indvColl
						.get(i);
				indvNameMap.put(indvCargo.getIndv_seq_num(),
						indvCargo.getFst_nam());
			}

			final Map assetValidationMap = new HashMap();
			assetValidationMap.put("FALQD", beforeColl.get("FALQDAST_COLL"));
			assetValidationMap
			.put("OTHRLQD", beforeColl.get("OTHRLQDAST_COLL"));
			assetValidationMap
			.put("CASHLQD", beforeColl.get("CASHLQDAST_COLL"));
			assetValidationMap
			.put("SOLDLQD", beforeColl.get("SOLDLQDAST_COLL"));
			assetValidationMap.put("RMB_RQST_Cargo", rmbRqstCargo);
			final short[] responseArray = new short[] {
					IRMCResponseProfileManager.LIQUID_ASET_BANK,
					IRMCResponseProfileManager.LIQ_ASET_CASH,

					IRMCResponseProfileManager.LIQUID_ASSET_OTHER, // liquid_asset_other_response
					IRMCResponseProfileManager.LIQUID_ASSET_XFER };

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// Getting RMC_IN_PROFILE from session
			RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// if empl seq is "A" then set to empty string

			RMC_RESPONSE_Custom_Cargo rmcCustomCargo = null;
			int size = respColl.size();
			RMC_IN_PRFL_Collection rmcPrflPageColl = null;
			RMC_IN_PRFL_Cargo rmcPrflSessCargo = null;
			RMC_IN_PRFL_Cargo rmcPrflPageCargo = null;
			String seqNum = null;
			String catType = null;
			String indvSeqNum = null;
			boolean cashliquidChangeSelected = false;
			boolean bankliquidChangeSelected = false;
			boolean othrliquidChangeSelected = false;
			boolean xferliquidChangeSelected = false;
			if (respColl != null && !respColl.isEmpty()) {
				for (int i = 0; i < respColl.size(); i++) {
					final RMC_RESPONSE_Custom_Cargo cargo = respColl
							.getCargo(i);
					if (cargo != null && cargo.getCategoryType() != null) {
						final Map cashMap = new HashMap();
						final Map bankMap = new HashMap();
						final Map xferMap = new HashMap();
						final Map othrLqdmap = new HashMap();
						cashMap.put(
								AppConstants.RMC_CAT_CASH_LIQUID_ASSET_PRFL,
								AppConstants.RMC_CAT_CASH_LIQUID_ASSET_PRFL);
						cashMap.put("CAS", "CAS");
						bankMap.put(
								AppConstants.RMC_CAT_BANK_LIQUID_ASSET_PRFL,
								AppConstants.RMC_CAT_BANK_LIQUID_ASSET_PRFL);
						bankMap.put("CA", "CA");
						bankMap.put("HRA", "HRA");
						bankMap.put("IDA", "IDA");
						bankMap.put("IRA", "IRA");
						bankMap.put("KEO", "KEO");
						bankMap.put("SA", "SA");

						xferMap.put(
								AppConstants.RMC_CAT_XFER_LIQUID_ASSET_PRFL,
								AppConstants.RMC_CAT_XFER_LIQUID_ASSET_PRFL);
						othrLqdmap.put(
								AppConstants.RMC_CAT_OTHER_LIQUID_ASSET_PRFL,
								AppConstants.RMC_CAT_OTHER_LIQUID_ASSET_PRFL);
						othrLqdmap.put("MQ", "MQ");
						othrLqdmap.put("ST", "ST");
						othrLqdmap.put("PP", "PP");
						othrLqdmap.put("DIV", "DIV");
						othrLqdmap.put("BD", "BD");
						othrLqdmap.put("PN", "PN");
						othrLqdmap.put("SP", "SP");
						othrLqdmap.put("TR", "TR");
						othrLqdmap.put("UNG", "UNG");
						othrLqdmap.put("PTF", "PTF");

						if (cashMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								cashliquidChangeSelected = true;
							}

						}
						if (bankMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								bankliquidChangeSelected = true;
							}

						}

						if (othrLqdmap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								othrliquidChangeSelected = true;
							}

						}

						if (xferMap.containsKey(cargo.getCategoryType())) {
							if (!"2".equals(cargo.getUserEndSelectionInd())) {
								xferliquidChangeSelected = true;
							}

						}

					}
				}
			}

			for (int i = 0; i < size; i++) {

				rmcCustomCargo = respColl.getCargo(i);
				seqNum = rmcCustomCargo.getSeqNum();
				catType = rmcCustomCargo.getCategoryType();

				indvSeqNum = rmcCustomCargo.getIndvSeqNum();
				if (AppConstants.RMC_ADD_NEW_IND.equals(seqNum)) {
					// this one is for the page collection
					if (rmcPrflPageColl != null) {
						rmcPrflPageCargo = rmcResponseProfileManager
								.getProfile(rmcPrflPageColl, indvSeqNum);
					} else {
						rmcPrflPageColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflPageCargo == null) {
						rmcPrflPageCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflPageCargo.setApp_num(appNum);
						rmcPrflPageCargo.setIndv_seq_num(indvSeqNum);
						rmcPrflPageColl.addCargo(rmcPrflPageCargo);
					}
					// this one is for the session collection
					if (rmcInPrflSessColl != null) {
						rmcPrflSessCargo = rmcResponseProfileManager
								.getProfile(rmcInPrflSessColl, indvSeqNum);
					} else {
						rmcInPrflSessColl = new RMC_IN_PRFL_Collection();
					}
					if (rmcPrflSessCargo == null) {
						rmcPrflSessCargo = new RMC_IN_PRFL_Cargo();
						rmcPrflSessCargo.setApp_num(appNum);
						rmcPrflSessCargo.setIndv_seq_num(indvSeqNum);
						rmcResponseProfileManager
						.createRMCIndividualProfile(rmcPrflSessCargo);
						rmcInPrflSessColl.addCargo(rmcPrflSessCargo);
					}

					if (AppConstants.RMC_CAT_CASH_LIQUID_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setLiquid_asset_cash_resp(FwConstants.YES);
					} else if (AppConstants.RMC_CAT_BANK_LIQUID_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setLiquid_asset_bank_acc_resp(FwConstants.YES);
					} else if (AppConstants.RMC_CAT_XFER_LIQUID_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo.setLqd_aset_tr_f_resp(FwConstants.YES);
					} else if (AppConstants.RMC_CAT_OTHER_LIQUID_ASSET_PRFL
							.equals(catType)) {
						rmcPrflPageCargo
						.setLiquid_asset_other_response(FwConstants.YES);
					}

					respColl.remove(i);
					size--;
					i--;
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflSessColl);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);

			request.get(FwConstants.WARNING_MSG_DETAILS);
			FwMessageList msgList = null;
			
			boolean isMA=false;
		    boolean isSNAP=false;
			short[] programKey = (short[])session.get(FwConstants.RMC_PROGRAM_KEY);	
			if(programKey!=null) {
				if(programKey[AppConstants.PROGRAM_KEY_MA] == 1) {
					isMA = true;
				}
				if(programKey[AppConstants.PROGRAM_KEY_SNAP] == 1) {
					isSNAP = true;
				}
			}
			List pageCompList = (List) beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);

			if (backToMyAccess == null) {
				// Change selction validation.
				assetBO.validateEndRMC(respColl, assetValidationMap);
				assetBO.validateLiquidAssetChangeSelectionRMC(respColl,
						assetValidationMap, indvNameMap, isMA, isSNAP,additionalInfoColl,pageCompList,(String)session.get(FwConstants.ACCESS_APPLICATION_TYPE));

			}

			if (assetBO.hasMessages()) {
				msgList = assetBO.getMessageList();
			}

			boolean isWarningMessageShown = false;

			// Below variable contains list of all the warning message codes
			// displayed previously on this page delimited by '~'
			String reqWarningMsgs1 = FwConstants.EMPTY_STRING;
			if (request.get(FwConstants.WARNING_MSG_DETAILS) != null) {
				reqWarningMsgs1 = (String) request
						.get(FwConstants.WARNING_MSG_DETAILS);
			}
			if (assetBO.hasMessages()) {
				msgList = assetBO.getMessageList();
				if (reqWarningMsgs1 != null
						&& reqWarningMsgs1.trim().length() > 0) {
					// First check if no-selection warning message is in the
					// previously displayed list and then if it is also present
					// in the current list.

					// Cash
					if (reqWarningMsgs1.indexOf("00584") > -1) {
						if (checkForWarningMesgs("00584", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// Financial
					if (reqWarningMsgs1.indexOf("00586") > -1) {
						if (checkForWarningMesgs("00586", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Annuity
					if (reqWarningMsgs1.indexOf("99277") > -1) {
						if (checkForWarningMesgs("99277", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Bonds
					if (reqWarningMsgs1.indexOf("99278") > -1) {
						if (checkForWarningMesgs("99278", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Certificate of Deposit
					if (reqWarningMsgs1.indexOf("99279") > -1) {
						if (checkForWarningMesgs("99279", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Dividend
					if (reqWarningMsgs1.indexOf("99280") > -1) {
						if (checkForWarningMesgs("99280", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Patient Fund
					if (reqWarningMsgs1.indexOf("99281") > -1) {
						if (checkForWarningMesgs("99281", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Pension Fund
					if (reqWarningMsgs1.indexOf("99282") > -1) {
						if (checkForWarningMesgs("99282", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Qualified Tuition Savings Plan
					if (reqWarningMsgs1.indexOf("99283") > -1) {
						if (checkForWarningMesgs("99283", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Stocks, Mutual Funds
					if (reqWarningMsgs1.indexOf("99284") > -1) {
						if (checkForWarningMesgs("99284", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Trust Fund
					if (reqWarningMsgs1.indexOf("99285") > -1) {
						if (checkForWarningMesgs("99285", msgList)) {
							isWarningMessageShown = true;
						}
					}
					// OTHER Uniform Gifts to Minors
					if (reqWarningMsgs1.indexOf("99286") > -1) {
						if (checkForWarningMesgs("99286", msgList)) {
							isWarningMessageShown = true;
						}
					}

					// Sold, Traded, or Given Away Resource
					if (reqWarningMsgs1.indexOf("00589") > -1) {
						if (checkForWarningMesgs("00589", msgList)) {
							isWarningMessageShown = true;
						}
					}

				}
			}
			if (checkBackToMyAccessSelected(request) || msgList != null
					&& !isWarningMessageShown) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST, msgList);
				}
				final int[] driverArray = (int[]) session
						.get(FwConstants.RMC_DRIVER);
				final int driverStatus = driverManager.getAFBStatus(
						FwConstants.RMC_DRIVER,
						(String) request.get(FwConstants.CURRENT_PAGE_ID),
						driverArray);
				// here i am calling the translate profile to trans late the
				// session values to the page collection
				if (rmcPrflPageColl != null) {
					rmcResponseProfileManager
					.translateProfileResponseAfterValidation(
							rmcPrflPageColl, rmcInPrflSessColl,
							responseArray);
				}
				if (respColl != null && !respColl.isEmpty()) {
					categorySelectionProfile = categorySelectionProfileManager
							.buildSelectionProfileAfterValidation(
									categorySelectionProfile, respColl);
				}

				final RMBLiquidAssetSelectionListView rmbLiquidAssetSelectionListView = (RMBLiquidAssetSelectionListView) beforeColl
						.get("FALQDAST");
				final RMBCashLiquidAssetSelectionListView rmbCashLiquidAssetSelectionListView = (RMBCashLiquidAssetSelectionListView) beforeColl
						.get("CASHLQDAST");
				final RMBOtherLiquidAssetSelectionListView rmbOthrLiquidAssetSelectionListView = (RMBOtherLiquidAssetSelectionListView) beforeColl
						.get("OTHRLQDAST");
				final RMBSoldLiquidAssetSelectionListView rmbSoldLiquidAssetSelectionListView = (RMBSoldLiquidAssetSelectionListView) beforeColl
						.get("SOLDLQDAST");

				final APP_IN_LQD_ASET_Collection banklqdColl = (APP_IN_LQD_ASET_Collection) beforeColl
						.get("FALQDAST_COLL");
				final APP_IN_LQD_ASET_Collection cashlqdColl = (APP_IN_LQD_ASET_Collection) beforeColl
						.get("CASHLQDAST_COLL");
				final APP_IN_LQD_ASET_Collection othrlqdColl = (APP_IN_LQD_ASET_Collection) beforeColl
						.get("OTHRLQDAST_COLL");
				final CP_APP_IN_ASET_XFER_Collection soldlqdColl = (CP_APP_IN_ASET_XFER_Collection) beforeColl
						.get("SOLDLQDAST_COLL");

				final List bankDataList = new ArrayList();
				bankDataList.add(banklqdColl);
				bankDataList.add(indvColl);
				bankDataList.add(rmcPrflPageColl);
				bankDataList.add(rmbRqstCargo);
				bankDataList.add(categorySelectionProfile);
				bankDataList.add(driverStatus);
				rmbLiquidAssetSelectionListView.setLanguage(language);
				rmbLiquidAssetSelectionListView.setName("FALQDAST");
				rmbLiquidAssetSelectionListView.setCollection(indvColl);
				rmbLiquidAssetSelectionListView.setDisplayData(bankDataList);
				rmbLiquidAssetSelectionListView.setPageSize(1000);

				final List cashDataList = new ArrayList();
				cashDataList.add(cashlqdColl);
				cashDataList.add(indvColl);
				cashDataList.add(rmcPrflPageColl);
				cashDataList.add(rmbRqstCargo);
				cashDataList.add(categorySelectionProfile);
				cashDataList.add(driverStatus);
				rmbCashLiquidAssetSelectionListView.setLanguage(language);
				rmbCashLiquidAssetSelectionListView.setName("CASHLQDAST");
				rmbCashLiquidAssetSelectionListView.setCollection(indvColl);
				rmbCashLiquidAssetSelectionListView
				.setDisplayData(cashDataList);
				rmbCashLiquidAssetSelectionListView.setPageSize(1000);

				final List othrDataList = new ArrayList();
				othrDataList.add(othrlqdColl);
				othrDataList.add(indvColl);
				othrDataList.add(rmcPrflPageColl);
				othrDataList.add(rmbRqstCargo);
				othrDataList.add(categorySelectionProfile);
				othrDataList.add(driverStatus);
				rmbOthrLiquidAssetSelectionListView.setLanguage(language);
				rmbOthrLiquidAssetSelectionListView.setName("OTHRLQDAST");
				rmbOthrLiquidAssetSelectionListView.setCollection(indvColl);
				rmbOthrLiquidAssetSelectionListView
				.setDisplayData(othrDataList);
				rmbOthrLiquidAssetSelectionListView.setPageSize(1000);

				final List soldDataList = new ArrayList();
				soldDataList.add(soldlqdColl);
				soldDataList.add(indvColl);
				soldDataList.add(rmcPrflPageColl);
				soldDataList.add(rmbRqstCargo);
				soldDataList.add(categorySelectionProfile);
				soldDataList.add(driverStatus);
				rmbSoldLiquidAssetSelectionListView.setLanguage(language);
				rmbSoldLiquidAssetSelectionListView.setName("SOLDLQDAST");
				rmbSoldLiquidAssetSelectionListView.setCollection(indvColl);
				rmbSoldLiquidAssetSelectionListView
				.setDisplayData(soldDataList);
				rmbSoldLiquidAssetSelectionListView.setPageSize(1000);

				pageCollection.put("FALQDAST", rmbLiquidAssetSelectionListView);
				pageCollection.put("CASHLQDAST",
						rmbCashLiquidAssetSelectionListView);
				pageCollection.put("OTHRLQDAST",
						rmbOthrLiquidAssetSelectionListView);
				pageCollection.put("SOLDLQDAST",
						rmbSoldLiquidAssetSelectionListView);

				pageCollection.put("FALQDAST_COLL", banklqdColl);
				pageCollection.put("CASHLQDAST_COLL", cashlqdColl);
				pageCollection.put("OTHRLQDAST_COLL", othrlqdColl);
				pageCollection.put("SOLDLQDAST_COLL", soldlqdColl);

				pageCollection.put("RMB_RQST_Collection",
						beforeColl.get("RMB_RQST_Collection"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				return;
			}
			if (session.containsKey(FwConstants.WARNING_MSG_DETAILS)) {
				session.remove(FwConstants.WARNING_MSG_DETAILS);
			}
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			boolean cashDetailPageRequired = false;
			boolean lqdAstTypeSelRequired = false;
			boolean bankDetailPageRequired = false;
			boolean xferDetailPageRequired = false;
			final boolean vehAstTypeSelRequired = false;
			final boolean realEstateAstTypeSelRequired = false;
			final boolean burialAstTypeSelRequired = false;
			final boolean lifeInsAstTypeSelRequired = false;

			if (rmcInPrflSessColl != null) {
				if (rmcPrflPageColl == null) {
					rmcPrflPageColl = new RMC_IN_PRFL_Collection();
				}
				// populating missing app in profile collection into page
				// collection for enter key press
				rmcResponseProfileManager.preparePageColl(rmcPrflPageColl,
						rmcInPrflSessColl, responseArray);

				final int rmcInPrflSessCollectionSize = rmcInPrflSessColl
						.size();
				final int rmcInPrflPageCollectionSize = rmcPrflPageColl.size();
				RMC_IN_PRFL_Cargo rmcInPrflPageCargo = null;
				String[] translatedProfileArray = null;
				String indivSeqNum = null;

				final int[] othrLqdAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] cashAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] bankAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final int[] xferAstDetailDirtyIndicator = { IRMCResponseProfileManager.NOT_DIRTY };
				final Map indvResponseMap = new HashMap();
				final boolean[] dirtyIndicatorArray = new boolean[rmcResponseProfileManager
				                                                  .getMaxIndvSeqNumber(rmcInPrflSessColl) + 1];
				char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
				// Loop for each individual in session app indv profile
				for (int s = 0; s < rmcInPrflSessCollectionSize; s++) {

					final RMC_IN_PRFL_Cargo rmcInPrflSessCargo = rmcInPrflSessColl
							.getCargo(s);
					// Loop for each individual in page collection app indv
					// profile
					for (int p = 0; p < rmcInPrflPageCollectionSize; p++) {
						rmcInPrflPageCargo = rmcPrflPageColl.getCargo(p);
						// Picking up the matching individuals of session app
						// indv profile from page collection app indv profile
						if (rmcInPrflPageCargo.getIndv_seq_num().equals(
								rmcInPrflSessCargo.getIndv_seq_num())) {
							translatedProfileArray = new String[responseArray.length];
							indivSeqNum = rmcInPrflPageCargo.getIndv_seq_num();
							// Checking for any changes in the page since load
							// Liquid asset other response
							if (rmcResponseProfileManager.determineDirtyStatus(
									rmcInPrflPageCargo
									.getLiquid_asset_other_response(),
									rmcInPrflSessCargo
									.getLiquid_asset_other_response(),
									othrLqdAstDetailDirtyIndicator,
									driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;

							}

							if (!rmcInPrflSessCargo
									.getLiquid_asset_other_response()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getLiquid_asset_other_response(),
										rmcInPrflSessCargo
										.getLiquid_asset_other_response(),
										driverStatus,
										IRMCResponseProfileManager.LIQUID_ASSET_OTHER,
										rmcInPrflSessCargo);
							}
							translatedProfileArray[2] = rmcInPrflSessCargo
									.getLiquid_asset_other_response();
							status = (null != rmcInPrflSessCargo
									.getLiquid_asset_other_response()) ? (rmcInPrflSessCargo
									.getLiquid_asset_other_response().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								lqdAstTypeSelRequired = true;
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARLAT",
										driverArray, appNum);
							}

							if (!lqdAstTypeSelRequired) {
								lqdAstTypeSelRequired = isLiquidAssetDetailPageRequired(rmcInPrflSessCargo);
							}

							if (!IDriver.DRIVER_STATUS_COMPLETE
									.equals(driverManager.getStatus(
											FwConstants.RMC_DRIVER, "ARLAT",
											driverArray))) {
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, "ARLAT",
										driverArray, appNum);
							} else {
								driverManager.makeComplete(
										FwConstants.RMC_DRIVER, "ARLAT",
										driverArray, appNum);
							}

							// cash
							// Liquid asset other response
							if (rmcResponseProfileManager.determineDirtyStatus(
									rmcInPrflPageCargo
									.getLiquid_asset_cash_resp(),
									rmcInPrflSessCargo
									.getLiquid_asset_cash_resp(),
									cashAstDetailDirtyIndicator, driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;

							}

							if (!rmcInPrflSessCargo
									.getLiquid_asset_cash_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getLiquid_asset_cash_resp(),
										rmcInPrflSessCargo
										.getLiquid_asset_cash_resp(),
										driverStatus,
										IRMCResponseProfileManager.LIQ_ASET_CASH,
										rmcInPrflSessCargo);
							}
							translatedProfileArray[1] = rmcInPrflSessCargo
									.getLiquid_asset_cash_resp();
							if (!cashDetailPageRequired) {
								cashDetailPageRequired = isCashDetailPageRequired(rmcInPrflSessCargo);
							}
							status = (null != rmcInPrflSessCargo
									.getLiquid_asset_cash_resp()) ? (rmcInPrflSessCargo
									.getLiquid_asset_cash_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								/*
								 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines
								 * Commented Code in this block
								 */

								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARLAD",
										driverArray, appNum);
							}
							if (rmcResponseProfileManager.determineDirtyStatus(
									rmcInPrflPageCargo.getLqd_aset_tr_f_resp(),
									rmcInPrflSessCargo.getLqd_aset_tr_f_resp(),
									xferAstDetailDirtyIndicator, driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;

							}

							if (!rmcInPrflSessCargo
									.getLqd_aset_tr_f_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getLqd_aset_tr_f_resp(),
										rmcInPrflSessCargo
										.getLqd_aset_tr_f_resp(),
										driverStatus,
										IRMCResponseProfileManager.LIQUID_ASSET_XFER,
										rmcInPrflSessCargo);
							}
							translatedProfileArray[3] = rmcInPrflSessCargo
									.getLqd_aset_tr_f_resp();
							if (!xferDetailPageRequired) {
								xferDetailPageRequired = isXferDetailPageRequired(rmcInPrflSessCargo);
							}
							status = (null != rmcInPrflSessCargo
									.getLqd_aset_tr_f_resp()) ? (rmcInPrflSessCargo
									.getLqd_aset_tr_f_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARXFR",
										driverArray, appNum);
							}

							// banks
							if (rmcResponseProfileManager.determineDirtyStatus(
									rmcInPrflPageCargo
									.getLiquid_asset_bank_acc_resp(),
									rmcInPrflSessCargo
									.getLiquid_asset_bank_acc_resp(),
									bankAstDetailDirtyIndicator, driverStatus)) {
								if (!dirtyIndicatorArray[0]) {
									dirtyIndicatorArray[0] = true;
								}
								dirtyIndicatorArray[Integer
								                    .parseInt(indivSeqNum)] = true;

							}

							if (!rmcInPrflSessCargo
									.getLiquid_asset_bank_acc_resp()
									.equalsIgnoreCase(
											String.valueOf(ICategorySelectionProfileManager.STATUS_COMPLETE))) {
								rmcResponseProfileManager
								.translateProfileResponses(
										rmcInPrflPageCargo
										.getLiquid_asset_bank_acc_resp(),
										rmcInPrflSessCargo
										.getLiquid_asset_bank_acc_resp(),
										driverStatus,
										IRMCResponseProfileManager.LIQUID_ASET_BANK,
										rmcInPrflSessCargo);
							}
							translatedProfileArray[0] = rmcInPrflSessCargo
									.getLiquid_asset_bank_acc_resp();
							if (!bankDetailPageRequired) {
								bankDetailPageRequired = isBankDetailPageRequired(rmcInPrflSessCargo);
							}
							status = (null != rmcInPrflSessCargo
									.getLiquid_asset_bank_acc_resp()) ? (rmcInPrflSessCargo
									.getLiquid_asset_bank_acc_resp().charAt(0))
									: (IRMCResponseProfileManager.STATUS_NOT_REQUIRED);
							if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
									|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
									|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
								driverManager.makeRequired(
										FwConstants.RMC_DRIVER, "ARLAD",
										driverArray, appNum);
							}

							indvResponseMap.put(indivSeqNum,
									translatedProfileArray);
							// breaking to pick the next matching individual
							// from session app indv profile
							break;
						}
					}
				}
				// Persistence logic start
				if (dirtyIndicatorArray[0]) {
					String indvSeqNumber = null;
					for (int i = 0; i < rmcInPrflPageCollectionSize; i++) {
						indvSeqNumber = rmcPrflPageColl.getCargo(i)
								.getIndv_seq_num();
						// Changed indvSeqNum to indvSeqNumber
						if (dirtyIndicatorArray[Integer.parseInt(indvSeqNumber)]) {
							rmcResponseProfileManager.persist(appNum,
									indvSeqNumber, responseArray,
									(String[]) indvResponseMap
									.get(indvSeqNumber));
						}
					}
				}
			}

			if (categorySelectionProfile == null
					|| categorySelectionProfile.isEmpty()) {
				// This method will build profile for all the 6 assets types
				categorySelectionProfile = categorySelectionProfileManager
						.buildSelectionProfile(respColl, appNum);
			} else {

				categorySelectionProfileManager.rebuildSelectionProfileByCds(
						categorySelectionProfile, respColl, appNum,
						AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);

			}

			if (lqdAstTypeSelRequired) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAT",
						driverArray, appNum);
			}

			if (vehAstTypeSelRequired) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAT",
						driverArray, appNum);
			}
			if (realEstateAstTypeSelRequired) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPT",
						driverArray, appNum);
			}
			if (burialAstTypeSelRequired) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
						driverArray, appNum);
			}
			if (lifeInsAstTypeSelRequired) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLIT",
						driverArray, appNum);
			}

			final Map liqcatTypes = assetBO.getLiquidAssetTypes();
			final Map liqcatTypesXR = assetBO.getLiquidAssetTypesXR();
			String assetDetailPageStat = null;
			String xferPageStat = null;

			if (xferDetailPageRequired
					|| assetBO
					.checkAssetPageRequired(categorySelectionProfile,
							liqcatTypesXR,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)) {
				if (xferDetailPageRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile, liqcatTypesXR)
								&&  xferliquidChangeSelected ) {
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARXFR",
						driverArray, appNum);}

			} else {
				xferPageStat = driverManager.getStatus(FwConstants.RMC_DRIVER,
						"ARXFR", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(xferPageStat)
						&& !IDriver.DRIVER_STATUS_VISIT_AGAIN
						.equals(xferPageStat)
						&& !xferDetailPageRequired) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARXFR", driverArray, appNum);
				} else {
					if (IDriver.DRIVER_STATUS_VISIT_AGAIN.equals(xferPageStat)) {
						if (!lqdAstTypeSelRequired
								&& categorySelectionProfileManager
								.areAllSequencesComplete(
										categorySelectionProfile,
										liqcatTypesXR)) {
							// if any other type of job income exists than make
							// page as complete
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARXFR", driverArray, appNum);
						}
					}
				}

			}

			if (lqdAstTypeSelRequired
					|| assetBO
					.checkAssetPageRequired(categorySelectionProfile,
							liqcatTypes,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)) {
				if (lqdAstTypeSelRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile, liqcatTypes)
								&& (cashliquidChangeSelected
										|| bankliquidChangeSelected || othrliquidChangeSelected)) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
							driverArray, appNum);

				} else {
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLAD",
							driverArray, appNum);

				}

			} else if (bankDetailPageRequired
					|| assetBO
					.checkAssetPageRequired(categorySelectionProfile,
							liqcatTypes,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)) {
				if (bankDetailPageRequired
						|| !categorySelectionProfileManager
						.areAllSequencesComplete(
								categorySelectionProfile, liqcatTypes)
								&&  bankliquidChangeSelected ) {
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
							driverArray, appNum);}
				} else if (cashDetailPageRequired
						|| assetBO
						.checkAssetPageRequired(categorySelectionProfile,
								liqcatTypes,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)) {
					if (cashDetailPageRequired
							|| !categorySelectionProfileManager
							.areAllSequencesComplete(
									categorySelectionProfile, liqcatTypes)
									&&  cashliquidChangeSelected ) {
						driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
								driverArray, appNum);

				}}	else {

				assetDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARLAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(assetDetailPageStat)
						&& !IDriver.DRIVER_STATUS_VISIT_AGAIN
						.equals(assetDetailPageStat)
						&& !cashDetailPageRequired && !bankDetailPageRequired) {
					driverManager.makeNotRequired(FwConstants.RMC_DRIVER,
							"ARLAD", driverArray, appNum);
				} else {
					if (IDriver.DRIVER_STATUS_VISIT_AGAIN
							.equals(assetDetailPageStat)) {
						if (!lqdAstTypeSelRequired
								&& categorySelectionProfileManager
								.areAllSequencesComplete(
										categorySelectionProfile,
										liqcatTypes)) {
							// if any other type of job income exists than make
							// page as complete
							driverManager.makeComplete(FwConstants.RMC_DRIVER,
									"ARLAD", driverArray, appNum);
						}
					}
				}

			}

			assetBO.getVehicleAssetTypes();
			
			//Persist household resources.
			if ((additionalInfoColl != null) && (!additionalInfoColl.isEmpty())) {
				APP_INDV_ADDI_INFO_Cargo addiInfoCargo = (APP_INDV_ADDI_INFO_Cargo) additionalInfoColl.get(0);
				APP_INDV_ADDI_INFO_Collection persistColl = new APP_INDV_ADDI_INFO_Collection(); 
				APP_INDV_ADDI_INFO_Cargo persistCargo = new APP_INDV_ADDI_INFO_Cargo();
				if(beforeAdditionalInfoColl != null && !beforeAdditionalInfoColl.isEmpty()){
					APP_INDV_ADDI_INFO_Cargo beforeCargo = (APP_INDV_ADDI_INFO_Cargo) beforeAdditionalInfoColl.get(0);
					persistCargo = (APP_INDV_ADDI_INFO_Cargo) beforeCargo.clone();
				}
				persistCargo.setApp_num(appNum);
				persistCargo.setIndv_seq_num(FwConstants.ONE);
				persistCargo.setOwn_res_exc_mil_ind(addiInfoCargo.getOwn_res_exc_mil_ind());
				final APP_INDV_ADDI_INFO_Collection coll = (APP_INDV_ADDI_INFO_Collection) beforeColl
						.get("APP_INDV_ADDI_INFO_Collection");
				// data already exist
				if ((coll != null) && (!coll.isEmpty())) {
					persistCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				} else {
					persistCargo.setRowAction(FwConstants.ROWACTION_INSERT);
				}

				persistColl.add(persistCargo);
				persistColl.persist(FwConstants.DAO);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARACS",
					driverArray, appNum);
			// Store values in session
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
					categorySelectionProfile);
			session.put(FwConstants.BEFORE_COLLECTION,
					txnBean.getPageCollection());
			session.put(FwConstants.RMC_DRIVER, driverArray);
			pageCollection.put("RMB_RQST_Collection", rmbRqstPageColl);
			txnBean.setSession(session);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetChangeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAssetChangeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAssetChangeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeAssetChangeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		
		log(ILog.FATAL,"PERF_LOGGING:"+"Thread:"+Thread.currentThread().getName()+" TIMESTAMP:"+new java.util.Date()+" Method:storeAssetChangeSelection");
	}

	/**
	 * Returns true if details page is required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is cash detail page required
	 */
	private boolean isCashDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isCashDetailPageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getLiquid_asset_cash_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isCashDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is xfer detail page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is xfer detail page required
	 */
	private boolean isXferDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isXferDetailsPageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getLqd_aset_tr_f_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isXferDetailsPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is personal propertypage required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is personal propertypage required
	 */
	private boolean isPersonalPropertypageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isPersonalPropertypageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getOther_asset_personal_prop_resp().charAt(
				0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isPersonalPropertypageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Returns true if details page is required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is bank detail page required
	 */
	private boolean isBankDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isBankDetailPageRequired() - START");

		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getLiquid_asset_bank_acc_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isBankDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Load liquid asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadLiquidAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLiquidAssetTypeSelection() - START");

		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetTypeSelection:Start");

			final Map request = txnBean.getRequest();

			loadTypes(txnBean, IRMCResponseProfileManager.LIQUID_ASSET_OTHER,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetTypeSelection:End");
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.loadLiquidAssetTypeSelection() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadLiquidAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadLiquidAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Store liquid asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeLiquidAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean::storeLiquidAssetTypeSelection:Start");
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLiquidAssetTypeSelection() - START");
		final Map session = txnBean.getSession();
		final Map request = txnBean.getRequest();
		final Map pageCollection = txnBean.getPageCollection();
		try {
			// Initialize ablatValidator
			final ARHousingTypeBO housingBO = new ARHousingTypeBO();

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.LIQUID_ASSET_ANNUITY,
					IRMCResponseProfileManager.LIQUID_ASSET_PROMISSORY,
					IRMCResponseProfileManager.LIQUID_ASSET_STOCK_BONDS,
					IRMCResponseProfileManager.LIQUID_ASSET_IRS_RET,
					IRMCResponseProfileManager.LIQUID_ASSET_PENSION_PLAN,
					IRMCResponseProfileManager.DIVIDEND,
					IRMCResponseProfileManager.UNIFORM_GIFTS_TO_MINORS,
					IRMCResponseProfileManager.BONDS,
					IRMCResponseProfileManager.LIQUID_ASSET_TRUST_FUND,
					IRMCResponseProfileManager.PATIENT_FUND };

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// Get the PAGE Collection - latest one from screen
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);
			// Get ABBAT Other Burial Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			// Get selected individuals first names.
			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARLAT_FIRST_NAME_LIST");
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARLAT_NO_ONE_COLLECTION");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARLAT_RMC_IN_PRFL_COLLECTION");

			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Get the NO ONE Collection and Cargo from Session
			final NO_ONE_Collection noOneOtherIncColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = housingBO.compareAppInPrflColl(
					rmcInPrflBeforeColl, pageColl);

			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = housingBO.compareNoOneCollection(noOneBeforeColl,
					noOneOtherIncColl);

			final ARLATValidator validateBO = new ARLATValidator();
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			validateInfo = validateBO.validateNoOneOtherLAType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);
			if (validateInfo != null && validateBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARLAT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARLAT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARLAT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			final int colSize = rmcInPrflBeforeColl.size();
			rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			final boolean driverFlag = true;
			final int sizeQuestion = 10;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getLiquid_asset_other_response()
						.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);

					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {

						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_aset_disable_blind_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_asset_promissory_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_asset_stocks_bonds_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_asset_irs_retirmnt_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_asset_pension_plan_resp());
						reqResponse.add(rmcInPrflCargoRequest.getDividend());
						reqResponse.add(rmcInPrflCargoRequest
								.getUniform_gifts_to_minors());
						reqResponse.add(rmcInPrflCargoRequest.getBonds());
						reqResponse.add(rmcInPrflCargoRequest
								.getLiquid_asset_trust_fund_resp());
						reqResponse
						.add(rmcInPrflCargoRequest.getPatient_fund());

						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_aset_disable_blind_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_asset_promissory_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_asset_stocks_bonds_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_asset_irs_retirmnt_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_asset_pension_plan_resp());
						sesResponse.add(rmcInPrflBeforeCargo.getDividend());
						sesResponse.add(rmcInPrflBeforeCargo
								.getUniform_gifts_to_minors());
						sesResponse.add(rmcInPrflBeforeCargo.getBonds());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLiquid_asset_trust_fund_resp());
						sesResponse.add(rmcInPrflBeforeCargo.getPatient_fund());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.LIQUID_ASSET_OTHER);

						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getLiquid_aset_disable_blind_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getLiquid_asset_promissory_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getLiquid_asset_stocks_bonds_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getLiquid_asset_irs_retirmnt_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getLiquid_asset_pension_plan_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getDividend()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getUniform_gifts_to_minors()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getBonds()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getLiquid_asset_trust_fund_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																										&& rmcInPrflBeforeCargo
																										.getPatient_fund()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.LIQUID_ASSET_OTHER,
									rmcInPrflBeforeCargo, true);
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getLiquid_aset_disable_blind_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getLiquid_asset_promissory_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getLiquid_asset_stocks_bonds_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getLiquid_asset_irs_retirmnt_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																|| rmcInPrflBeforeCargo
																.getLiquid_asset_pension_plan_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getDividend()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getUniform_gifts_to_minors()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																						|| rmcInPrflBeforeCargo
																						.getBonds()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																								|| rmcInPrflBeforeCargo
																								.getLiquid_asset_trust_fund_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																										|| rmcInPrflBeforeCargo
																										.getPatient_fund()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}

			}

			// persist the data
			boolean liquidAssetPageRequired = false;
			final int persistArraySize = persistArray.size();
			for (int i = 0; i < persistArraySize; i++) {
				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = {
						cargo.getLiquid_aset_disable_blind_resp(),
						cargo.getLiquid_asset_promissory_resp(),
						cargo.getLiquid_asset_stocks_bonds_resp(),
						cargo.getLiquid_asset_irs_retirmnt_resp(),
						cargo.getLiquid_asset_pension_plan_resp(),
						cargo.getDividend(),
						cargo.getUniform_gifts_to_minors(), cargo.getBonds(),
						cargo.getLiquid_asset_trust_fund_resp(),
						cargo.getPatient_fund() };
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				if ("R".equalsIgnoreCase(cargo
						.getLiquid_aset_disable_blind_resp())
						|| "R".equalsIgnoreCase(cargo
								.getLiquid_asset_promissory_resp())
								|| "R".equalsIgnoreCase(cargo
										.getLiquid_asset_stocks_bonds_resp())
										|| "R".equalsIgnoreCase(cargo
												.getLiquid_asset_irs_retirmnt_resp())
												|| "R".equalsIgnoreCase(cargo
														.getLiquid_asset_pension_plan_resp())
														|| "R".equalsIgnoreCase(cargo.getDividend())
														|| "R".equalsIgnoreCase(cargo
																.getUniform_gifts_to_minors())
																|| "R".equalsIgnoreCase(cargo.getBonds())
																|| "R".equalsIgnoreCase(cargo
																		.getLiquid_asset_trust_fund_resp())
																		|| "R".equalsIgnoreCase(cargo.getPatient_fund())) {
					liquidAssetPageRequired = true;
				}

			}

			// Run Dirty Logic on Driver
			if (persistFlag == true) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARLAD", driverArray);
			}

			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLAT",
						driverArray, appNum);
			}

			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (liquidAssetPageRequired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARLAD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)) {
				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARLAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(houseDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARLAD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARLAD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLAD",
						driverArray, appNum);
			}

			if (!liquidAssetPageRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLAT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
						driverArray, appNum);
			}

			// Make Complete
			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLAT",
					driverArray, appNum);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLiquidAssetTypeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeLiquidAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			log(ILog.ERROR, e.getMessage());
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeLiquidAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLiquidAssetTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load liquid asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLiquidAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			request.put("loopingQuestion", FwConstants.NO);

			APP_IN_LQD_ASET_Collection rmcInLqdAsetColl;
			String pageMode = null;
			String indvSeqNum = null;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TFAD", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map liquidAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				liquidAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, liquidAssetTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, liquidAssetTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

			final short[] responseNewType = new short[] {
					IRMCResponseProfileManager.LIQ_ASET_CASH,
					IRMCResponseProfileManager.LIQUID_ASSET_ANNUITY,
					IRMCResponseProfileManager.LIQUID_ASSET_PROMISSORY,
					IRMCResponseProfileManager.LIQUID_ASSET_STOCK_BONDS,
					IRMCResponseProfileManager.LIQUID_ASSET_IRS_RET,
					IRMCResponseProfileManager.LIQUID_ASSET_PENSION_PLAN,
					IRMCResponseProfileManager.DIVIDEND,
					IRMCResponseProfileManager.UNIFORM_GIFTS_TO_MINORS,
					IRMCResponseProfileManager.BONDS,
					IRMCResponseProfileManager.LIQUID_ASSET_OTHER,
					IRMCResponseProfileManager.LIQUID_ASET_BANK,
					IRMCResponseProfileManager.LIQUID_ASSET_TRUST_FUND,
					IRMCResponseProfileManager.PATIENT_FUND,

					IRMCResponseProfileManager.LIQ_ASET_CHECKING_ACCOUNT,
					IRMCResponseProfileManager.HEALTH_REIMBURSEMENT_ACCOUNT,
					IRMCResponseProfileManager.INDIVIDUAL_DEVELOPMENT_ACCOUNT,
					IRMCResponseProfileManager.LIQUID_ASSET_RETIREMENT,
					IRMCResponseProfileManager.LIQ_ASET_KEOUGH_PLAN,
					IRMCResponseProfileManager.LIQUID_ASSET_SAVINGS_ACC

			};

			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			SortedSet liquidAssetProfile = null;

			if (!previousPageId.equals(currentPageID)) {
				liquidAssetProfile = createPageProfileLiquid(
						categorySelectionProfile, rmcInPrflColl,
						responseNewType);
				log(ILog.INFO,"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:liquidAssetProfile:::"+liquidAssetProfile);
				// EDSP RMB need to remove

				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_LQD_ASET_Collection lqdAssetColl = liquidAssetBO
							.loadLiquidAssetDetails(appNumber);
					final APP_IN_LQD_ASET_Collection newLqdAssetColl = liquidAssetBO
							.splitLiqColl(lqdAssetColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (newLqdAssetColl != null && !newLqdAssetColl.isEmpty()) {
						APP_IN_LQD_ASET_Cargo rmcInLqdAssetCargo = null;
						final int newLqdAssetCollSize = newLqdAssetColl.size();
						for (int i = 0; i < newLqdAssetCollSize; i++) {
							rmcInLqdAssetCargo = newLqdAssetColl.getCargo(i);

							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									liquidAssetProfile, null, null,
									Short.parseShort(rmcInLqdAssetCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInLqdAssetCargo
													.getSeq_num()),
													rmcInLqdAssetCargo
													.getLqd_aset_typ());
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(liquidAssetProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(liquidAssetProfile);
				}
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);

			} else {
				// catAddNewProfile get it from the before collection - Holding
				// the profile for looping the page
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				liquidAssetProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}
			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (indivSeqBean == null
					&& (pageStatus == FwConstants.DRIVER_VISIT_AGAIN )
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Liquid_Asset_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								liquidAssetProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}

					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(liquidAssetProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							liquidAssetProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						rmcResponseProfileManager
						.makeAddNew(
								IRMCResponseProfileManager.LIQUID_ASSET_DETAILS,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(liquidAssetProfile, appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								liquidAssetProfile, null,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						log(ILog.INFO,"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:liquidAssetProfileSINDV:::"+indivSeqBean.getIndivSeqNum());
						log(ILog.INFO,"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:liquidAssetProfileSSEQ:::"+indivSeqBean.getSeqNum());
						categorySelectionProfileManager
						.makeSequenceDetailRequired(liquidAssetProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
						log(ILog.INFO,"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:liquidAssetProfileEE:::");
						categorySelectionProfileManager
						.insertExistingSequenceDetail(
								categorySelectionProfile, appNumber,
								AppConstants.RMC_CAT_LIQUID_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Liquid_Asset_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					liquidAssetProfile);

			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(liquidAssetProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(liquidAssetProfile);
			}
			String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInLqdAsetColl = liquidAssetBO.loadIndividualLiquidAssetDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_LQD_ASET_Collection", rmcInLqdAsetColl);
			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else {
					if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
						pageMode = FwConstants.NO;
					} else {
						pageMode = "C";
					}
				}
			} else {
				if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
					pageMode = FwConstants.NO;
				} else {
					pageMode = "C";
				}
			}
			// EDSP RMB added new person

			final LiquidAssetBO liquidAssetBO1 = new LiquidAssetBO();

			APP_IN_LQD_ASET_Cargo cwwLiquidAssetCargo = liquidAssetBO1
					.splitInLiquidAssetColl(rmcInLqdAsetColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwLiquidAssetCargo == null) {

				cwwLiquidAssetCargo = new APP_IN_LQD_ASET_Cargo();
				addnewPerson = FwConstants.YES;
				pageMode = FwConstants.NO;
			} else {
				if (categorySeqDetail.getUserEndSelectionInd() == 1) {
					pageMode = "E";
				} else {
					pageMode = "C";
				}
				addnewPerson = FwConstants.NO;
			}

			pageCollection.put("SEC_LIQUID_ASSET",
					liquidAssetBO1.settingDefaultValues(cwwLiquidAssetCargo));
			APP_IN_LQD_ASET_Cargo rmcLiqAsetCargo = liquidAssetBO1
					.splitInLiquidAssetColl(rmcInLqdAsetColl,
							AppConstants.RMC_NEW_RECORD_IND);

			if (rmcLiqAsetCargo != null) {
				pageCollection.put("FST_LIQUID_ASSET",
						liquidAssetBO1.settingDefaultValues(rmcLiqAsetCargo));
			} else {

				rmcLiqAsetCargo = liquidAssetBO1.splitInLiquidAssetColl(
						rmcInLqdAsetColl, AppConstants.RMC_MODIFIED_RECORD_IND);
				if (rmcLiqAsetCargo != null) {
					pageCollection.put("FST_LIQUID_ASSET", liquidAssetBO1
							.settingDefaultValues(rmcLiqAsetCargo));
				} else {
					rmcLiqAsetCargo = liquidAssetBO1.splitInLiquidAssetColl(
							rmcInLqdAsetColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcLiqAsetCargo != null) {
						pageCollection.put("FST_LIQUID_ASSET", liquidAssetBO1
								.settingDefaultValues(rmcLiqAsetCargo));
					} else {
						pageCollection.put("FST_LIQUID_ASSET", liquidAssetBO1
								.settingDefaultValues(cwwLiquidAssetCargo));
					}

				}
			}
			if (rmcInLqdAsetColl != null && !rmcInLqdAsetColl.isEmpty()) {
				final APP_IN_LQD_ASET_Cargo rmcInSelfeCargo = rmcInLqdAsetColl
						.getCargo(0);
				rmcInSelfeCargo.getSrc_app_ind();
			}

			rmcInPrflColl.size();
			char typeStatus = 'N';
			String showLoopingQuestionFlag = FwConstants.YES;

			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			if (rmcInLqdAsetColl != null && !rmcInLqdAsetColl.isEmpty()) {
				final APP_IN_LQD_ASET_Cargo appLiqAsetCargo = rmcInLqdAsetColl
						.getCargo(0);
				if (appLiqAsetCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = liquidAssetBO
							.loadIndividualJointOwnerDetails((String) session
									.get(AppConstants.APP_NUMBER),
									appLiqAsetCargo.getIndv_seq_num(),
									AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET,
									appLiqAsetCargo.getLqd_aset_typ(),
									appLiqAsetCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {

						// EDSP RMB adding CWJnt collection
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}

						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_MODIFIED_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							rnJointCargo = lifeInsuranceTypeBO
									.getPageJointCollection(cwwJointCargo,
											rnJointCargo);
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(appInJntCol,
											AppConstants.RMC_NEW_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			pageCollection.put("PAGE_MODE", pageMode);
			if ("OT".equals(categoryType)) {
				final APP_IN_LQD_ASET_Cargo tempCargo = (APP_IN_LQD_ASET_Cargo) pageCollection
						.get("FST_LIQUID_ASSET");
				categoryType = tempCargo.getLqd_aset_typ();

			}
			pageCollection.put("OTHER_LIQ_ASST_TYPE", categoryType);

			// set first name to page collection
			// EDSP LR added PEOPLE_5211 cust coll
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			INDIVIDUAL_Custom_Collection indivCustCol = null;

			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_5211", indivCustCol);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);

			txnBean.setPageCollection(pageCollection);
			// EDSP RMC
			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
				}
				// EDSP RMB clearing app_in_jnt_owner collection from
				// pagecollection
				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}
			// Run ComponentManager to get the components for the current page
			componentManager.getComponents(currentPageID, txnBean);
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);
			// Add the page collection to before collection
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLiquidAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store liquid asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean::storeLiquidAssetDetails:Start");
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLiquidAssetDetails() - START");
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		String currentPageID = null;
		String indvSeqNum = null;
		try {
			currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
                    .get(AppConstants.APP_NUMBER);

			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			
			if(currentPageID == null) {
                log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean:DeepLog::CP_DEBUG_LOGS::2:: methodName::storeLiquidAssetDetails: App Number = " + appNumber);
                log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean:DeepLog::CP_DEBUG_LOGS::2:: null value found for CURRENT_PAGE_ID");
			}
			if(driverArray == null || driverArray.length == 0 ) {
                log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean:DeepLog::CP_DEBUG_LOGS::2:: methodName::storeLiquidAssetDetails: App Number = " + appNumber);
                log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean:DeepLog::CP_DEBUG_LOGS::2:: null value found for driverArray");
			}

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			
			session.remove("Liquid_Asset_IndSeqBean");

			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			// get the BeforeCollection
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final SortedSet liquidAssetProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforePageColl.get("PAGE_MODE");

			final String firstName = (String) beforePageColl
					.get(AppConstants.FIRST_NAME);

			// get the RMC_IN_PRFLCollection from session
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			// get Details aset Collection and Cargo
			final APP_IN_LQD_ASET_Collection rmcInLqdAsetColl = (APP_IN_LQD_ASET_Collection) pageCollection
					.get("APP_IN_LQD_ASET_Collection");
			APP_IN_LQD_ASET_Cargo rmcInLqdAsetCargo = rmcInLqdAsetColl
					.getCargo(0);
			final Map httpSessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
			final String language = (String) httpSessionMap
					.get(AppConstants.LANGUAGE);
			boolean amtEntered = false;
			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(liquidAssetProfile);

			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();
			/* if else checks to fix validations - Jul062015 */
			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();
			final ARLADValidator arladValidator = new ARLADValidator();
			final ARVADValidator arJntValidator = new ARVADValidator();
			if (rmcInLqdAsetCargo.getLqd_aset_amt_ind() == null) {
				if (rmcInLqdAsetCargo.getLqd_aset_amt() == null
						|| rmcInLqdAsetCargo.getLqd_aset_amt().trim().length() == 0) {
					rmcInLqdAsetCargo.setLqd_aset_amt(FwConstants.ZERO);
					rmcInLqdAsetCargo.setLqd_aset_amt_ind("2");
				} else {
					amtEntered = true;
					rmcInLqdAsetCargo.setLqd_aset_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (rmcInLqdAsetCargo.getLqd_aset_amt() == null
						|| rmcInLqdAsetCargo.getLqd_aset_amt().trim().length() == 0) {
					rmcInLqdAsetCargo.setLqd_aset_amt(FwConstants.ZERO);
					rmcInLqdAsetCargo.setLqd_aset_amt_ind(FwConstants.ONE);
				} else {
					amtEntered = true;
					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}
			final APP_IN_LQD_ASET_Collection beforeCollRmcInLqdAstColl = (APP_IN_LQD_ASET_Collection) beforePageColl
					.get("APP_IN_LQD_ASET_Collection");
			APP_IN_LQD_ASET_Cargo beforeLiquidAssetCargo = null;

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection rmcInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");
			if (rmcInJntOwnColl != null) {
				rmcInJntOwnColl.size();

			}

			String jntOwnerResp = FwConstants.EMPTY_STRING;

			if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
				jntOwnerResp = FwConstants.YES;
			} else {
				jntOwnerResp = FwConstants.NO;
			}

			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection rmcInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");

			indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());

			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int lqdAstSeqNum = 0;
			boolean liquidAssetDtlsUpdate = false;
			if (rmcInLqdAsetCargo.getFncl_inst_sta_adr() == null
					|| FwConstants.EMPTY_STRING.equals(rmcInLqdAsetCargo
							.getFncl_inst_sta_adr())
							|| AppConstants.SELECT_DEFAULT_OPTION
							.equals(rmcInLqdAsetCargo.getFncl_inst_sta_adr()
									.trim())) {
				rmcInLqdAsetCargo.setFncl_inst_sta_adr(null);
			}
			if (rmcInLqdAsetCargo.getAccount_maintainence_reason_cd() == null
					|| FwConstants.EMPTY_STRING.equals(rmcInLqdAsetCargo
							.getAccount_maintainence_reason_cd())
							|| AppConstants.SELECT_DEFAULT_OPTION
							.equals(rmcInLqdAsetCargo
									.getAccount_maintainence_reason_cd())) {
				rmcInLqdAsetCargo.setAccount_maintainence_reason_cd(null);
			}
			if (rmcInLqdAsetCargo.getLiquid_asset_sub_type_cd() != null
					&& AppConstants.SELECT_DEFAULT_OPTION
					.equals(rmcInLqdAsetCargo
							.getLiquid_asset_sub_type_cd().trim())) {
				rmcInLqdAsetCargo.setLiquid_asset_sub_type_cd(null);
			}

			rmcInLqdAsetCargo.setSrc_app_ind(FwConstants.EMPTY_STRING);

			if (beforeCollRmcInLqdAstColl != null
					&& !beforeCollRmcInLqdAstColl.isEmpty()) {
				final int size = beforeCollRmcInLqdAstColl.size();
				lqdAstSeqNum = (int) categorySeqDetailBean
						.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				}
				if (size == 0) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				if (size == 1
						&& AppConstants.CWW_RECORD_IND
						.equalsIgnoreCase(beforeCollRmcInLqdAstColl
								.getCargo(0).getSrc_app_ind())) {
					recordInd = FwConstants.ROWACTION_INSERT;
				}
				// RM or RN record
				if (size == 1
						&& (AppConstants.RMC_NEW_RECORD_IND
								.equalsIgnoreCase(beforeCollRmcInLqdAstColl
										.getCargo(0).getSrc_app_ind()) || AppConstants.RMC_MODIFIED_RECORD_IND
										.equalsIgnoreCase(beforeCollRmcInLqdAstColl
												.getCargo(0).getSrc_app_ind()))) {
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							|| AppConstants.RMC_MODIFIED_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeLiquidAssetCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				beforeLiquidAssetCargo = liquidAssetBO.splitInLiquidAssetColl(
						beforeCollRmcInLqdAstColl, sourceAppIndicator);
				if (beforeLiquidAssetCargo == null
						&& (AppConstants.RMC_MODIFIED_RECORD_IND
								.equals(sourceAppIndicator) || AppConstants.RMC_END_RECORD_IND
								.equals(sourceAppIndicator))) {
					beforeLiquidAssetCargo = liquidAssetBO
							.splitInLiquidAssetColl(beforeCollRmcInLqdAstColl,
									AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeLiquidAssetCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (beforeLiquidAssetCargo != null) {
					beforeLiquidAssetCargo = beforeCollRmcInLqdAstColl
							.getCargo(0);
					rmcInLqdAsetCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));

					rmcInLqdAsetCargo.setSrc_app_ind(beforeLiquidAssetCargo
							.getSrc_app_ind());
					rmcInLqdAsetCargo.setIndv_seq_num(beforeLiquidAssetCargo
							.getIndv_seq_num());
					rmcInLqdAsetCargo.setLqd_aset_typ(beforeLiquidAssetCargo
							.getLqd_aset_typ());
					rmcInLqdAsetCargo.setLiquid_asset_sub_type_cd(beforeLiquidAssetCargo.getLiquid_asset_sub_type_cd());
					rmcInLqdAsetCargo.setSeq_num(beforeLiquidAssetCargo
							.getSeq_num());
					rmcInLqdAsetCargo.setRec_cplt_ind(beforeLiquidAssetCargo
							.getRec_cplt_ind());
					

					rmcInLqdAsetCargo.setJnt_own_resp(jntOwnerResp);
					rmcInLqdAsetCargo.setEcp_id(beforeLiquidAssetCargo
							.getEcp_id());

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInLqdAsetCargo
						.setLqd_aset_amt(beforeLiquidAssetCargo
								.getLqd_aset_amt());
						rmcInLqdAsetCargo
						.setLqd_aset_amt_ind(beforeLiquidAssetCargo
								.getLqd_aset_amt_ind());
						rmcInLqdAsetCargo.setAcct_num(beforeLiquidAssetCargo
								.getAcct_num());
						rmcInLqdAsetCargo
						.setLiquid_asset_sub_type_cd(beforeLiquidAssetCargo
								.getLiquid_asset_sub_type_cd());
						rmcInLqdAsetCargo
						.setAccount_maintainence_reason_cd(beforeLiquidAssetCargo
								.getAccount_maintainence_reason_cd());
						rmcInLqdAsetCargo
						.setAccount_acquired_dt(beforeLiquidAssetCargo
								.getAccount_acquired_dt());
						rmcInLqdAsetCargo
						.setBury_dsgt_sw(beforeLiquidAssetCargo
								.getBury_dsgt_sw());
						rmcInLqdAsetCargo
						.setFncl_inst_nam(beforeLiquidAssetCargo
								.getFncl_inst_nam());
						rmcInLqdAsetCargo
						.setFncl_inst_city_adr(beforeLiquidAssetCargo
								.getFncl_inst_city_adr());
						rmcInLqdAsetCargo
						.setFncl_inst_l1_adr(beforeLiquidAssetCargo
								.getFncl_inst_l1_adr());
						rmcInLqdAsetCargo
						.setFncl_inst_l2_adr(beforeLiquidAssetCargo
								.getFncl_inst_l2_adr());
						rmcInLqdAsetCargo
						.setFncl_inst_sta_adr(beforeLiquidAssetCargo
								.getFncl_inst_sta_adr());
						rmcInLqdAsetCargo
						.setFncl_inst_zip_adr(beforeLiquidAssetCargo
								.getFncl_inst_zip_adr());
						rmcInLqdAsetCargo
						.setJnt_own_resp(beforeLiquidAssetCargo
								.getJnt_own_resp());
						rmcInLqdAsetCargo
						.setBusiness_trade_farming_ind(beforeLiquidAssetCargo
								.getBusiness_trade_farming_ind());
						rmcInLqdAsetCargo
						.setSchool_expenses_ind(beforeLiquidAssetCargo
								.getSchool_expenses_ind());
					}

				} else {
					final APP_IN_LQD_ASET_Cargo beforeCargo = beforeCollRmcInLqdAstColl
							.getCargo(0);
					rmcInLqdAsetCargo.setEcp_id(beforeCargo.getEcp_id());
				}

				rmcInLqdAsetCargo.setApp_num(appNumber);
				rmcInLqdAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				rmcInLqdAsetCargo.setSeq_num(String.valueOf(lqdAstSeqNum));
				
				/*rmcInLqdAsetCargo.setLqd_aset_typ(categorySeqDetailBean
						.getCategoryType());*/
				rmcInLqdAsetCargo = (APP_IN_LQD_ASET_Cargo) isChanged(
						beforeLiquidAssetCargo, rmcInLqdAsetCargo);
				// EDSP LR added appnumber ,indv_sql_num,seq_num ends
				rmcInLqdAsetCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInLqdAsetCargo.setSrc_app_ind(sourceAppIndicator);

				rmcInLqdAsetCargo.setRowAction(recordInd);
				if (rmcInLqdAsetCargo.isDirty()) {
					liquidAssetDtlsUpdate = true;
				}
			} else {
				if (rmcInLqdAsetCargo.getRec_cplt_ind() == null
						|| rmcInLqdAsetCargo.getRec_cplt_ind().trim().length() == 0) {
					rmcInLqdAsetCargo.setRec_cplt_ind(FwConstants.ZERO);
				}

				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInLqdAsetCargo.setApp_num(appNumber);
				rmcInLqdAsetCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base

				lqdAstSeqNum = liquidAssetBO.getMaxSeqNumber(appNumber,
						indvSeqNum);
				lqdAstSeqNum = lqdAstSeqNum + 1;
				rmcInLqdAsetCargo.setSeq_num(String.valueOf(lqdAstSeqNum));
				rmcInLqdAsetCargo.setLqd_aset_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInLqdAsetCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInLqdAsetCargo.setRowAction(recordInd);
				liquidAssetDtlsUpdate = true;

				rmcInLqdAsetCargo.setJnt_own_resp(jntOwnerResp);
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager.updateSequence(
						liquidAssetProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) lqdAstSeqNum,categorySeqDetailBean.getCategoryType()
						);
				categorySelectionProfileManager.updateSequence(
						categorySelectionProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) lqdAstSeqNum,categorySeqDetailBean.getCategoryType()
						);
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(lqdAstSeqNum), categorySeqDetailBean.getCategoryType(), "0");
				}

			}

			String jsEnabled = FwConstants.YES;
			final Map sessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
			if (sessionMap != null) {
				if (sessionMap.get(FwConstants.JS_ENABLED) != null) {
					jsEnabled = (String) sessionMap.get(FwConstants.JS_ENABLED);
				}
			}

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (rmcInJntOwnColl != null) {
				int appInJntCollSize = rmcInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = rmcInJntOwnColl.getCargo(i);
					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						rmcInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			final short[] pgmKey = (short[]) session
					.get(FwConstants.RMC_PROGRAM_KEY);
			boolean ccFlag = false;
			boolean maFlag = false;
			boolean tanfFlag = false;
			boolean snapFlag = false;
			boolean wicFlag = false;
			boolean isWicOnly = false;
			if (null != pgmKey && pgmKey.length > 0) {
				if (pgmKey[8] == 1) {
					ccFlag = true;
				}
				if (pgmKey[0] == 1) {
					maFlag = true;
				}
				if (pgmKey[14] == 1) {
					wicFlag = true;
				}
				if (pgmKey[9] == 1) {
					tanfFlag = true;
				}
				if (pgmKey[2] == 1) {
					snapFlag = true;
				}
			}
			if (maFlag == true && ccFlag == false && wicFlag == false
					&& tanfFlag == false && snapFlag == false) {
			}
			if (wicFlag == true && ccFlag == false && maFlag == false
					&& tanfFlag == false && snapFlag == false) {
				isWicOnly = true;
			}
			if (!isWicOnly) {
				if (backToMyAccess == null) {
					String showLoopingQuestion = AppConstants.NO;
					if(beforePageColl.containsKey("showLoopingQuestion")){
						showLoopingQuestion = (String) beforePageColl.get("showLoopingQuestion");
					}
					arladValidator.validatePageContents(rmcInLqdAsetCargo,
							amtEntered, userEndInd, firstName, showLoopingQuestion,language);
					arJntValidator.validateJointOwnerInformation(
							rmcInJntOwnColl, jsEnabled);

				}
			}

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("FST_JNT");

			if (checkBackToMyAccessSelected(request)
					|| arladValidator.hasMessages()
					|| arJntValidator.hasMessages()) {
				if (backToMyAccess == null) {
					if (arladValidator.hasMessages()) {
						/*
						 * Updated logic by Srividhya to combine the messages
						 * from both sections - 6July15
						 */
						if (arJntValidator.hasMessages()) {
							arladValidator.getMessageList().addMessageToList(
									arJntValidator.getMessageList());
						}
						request.put(FwConstants.MESSAGE_LIST,
								arladValidator.getMessageList());
					} else if (arJntValidator.hasMessages()) {
						request.put(FwConstants.MESSAGE_LIST,
								arJntValidator.getMessageList());
					}

				}

				if (rmcInLqdAsetCargo != null) {
					rmcInLqdAsetCargo.setLqd_aset_typ((String) beforePageColl
							.get("OTHER_LIQ_ASST_TYPE"));
					if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
						rmcInLqdAsetCargo.setJnt_own_resp(FwConstants.YES);
					}

				}

				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("OTHER_LIQ_ASST_TYPE",
						beforePageColl.get("OTHER_LIQ_ASST_TYPE"));
				pageCollection.put("APP_IN_LQD_ASET_Collection",
						rmcInLqdAsetColl);

				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));

				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection
				.put("PAGE_MODE", beforePageColl.get("PAGE_MODE"));
				if (beforePageColl.containsKey("SEC_LIQUID_ASSET")) {
					pageCollection.put("SEC_LIQUID_ASSET",
							beforePageColl.get("SEC_LIQUID_ASSET"));
				}
				if (beforePageColl.containsKey("SEC_JNT")) {
					pageCollection
					.put("SEC_JNT", beforePageColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", rmcInJntOwnColl);
				pageCollection.put("FST_LIQUID_ASSET", rmcInLqdAsetCargo);

				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));

				return;
			}

			if (!(rmcInLqdAsetCargo.getAsset_end_dt() == null || rmcInLqdAsetCargo
					.getAsset_end_dt().trim().length() == 0)) {
				rmcInLqdAsetCargo.setAsset_end_dt(displayFormatter
						.getYYYYMMDDDate(rmcInLqdAsetCargo.getAsset_end_dt()));
			}

			if (liquidAssetDtlsUpdate) {
				if (FwConstants.ROWACTION_INSERT.equals(rmcInLqdAsetCargo
						.getRowAction())) {
					liquidAssetBO.insertExistingLqdAstDetails(rmcInLqdAsetColl);
				} else {
					liquidAssetBO.storeLiquidAssetDetails(rmcInLqdAsetColl);
				}
			}
			// completeness check
			rmcInLqdAsetCargo.setRec_cplt_ind(liquidAssetBO.completenessCheck(
					rmcInLqdAsetCargo, amtEntered));

			rmcInLqdAsetCargo = rmcInLqdAsetColl.getCargo(0);

			APP_IN_JNT_OWN_Cargo rmcInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;

			// user pressed back and the before collection is not null delete it
			// else update it.

			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();
			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (rmcInJntBeforeColl != null && !rmcInJntBeforeColl.isEmpty()) {
				final int appInjntBeforeCollSize = rmcInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = rmcInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						rmcInJntOwnCargo = getCWMatchingCargo(rmcInJntOwnColl,
								appInJntCwMatchCargo);
						if (rmcInJntOwnCargo != null) {
							rmcInJntOwnCargo.setApp_num(rmcInLqdAsetCargo
									.getApp_num());
							rmcInJntOwnCargo
							.setJnt_own_seq_num(rmcInLqdAsetCargo
									.getSeq_num());
							rmcInJntOwnCargo.setIndv_seq_num(rmcInLqdAsetCargo
									.getIndv_seq_num());
							rmcInJntOwnCargo.setAset_sub_typ(rmcInLqdAsetCargo
									.getLqd_aset_typ());
							if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(rmcInJntOwnCargo
											.getJnt_indv_seq_num())) {
								rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								rmcInJntOwnCargo.setOtsd_ind(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (rmcInJntOwnCargo.getSeq_num() == null) {
								rmcInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							rmcInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, rmcInJntOwnCargo);
							rmcInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (rmcInJntOwnCargo.isDirty()) {
								if (rmcInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& rmcInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& FwConstants.ZERO
												.equals(rmcInJntOwnCargo
														.getAset_typ())
														&& rmcInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& rmcInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(rmcInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						rmcInJntOwnCargo = getMatchingCargo(rmcInJntOwnColl,
								appInJntOwnBeforeCargo);
						if (rmcInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								rmcInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (rmcInJntOwnCargo != null) {
									rmcInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									rmcInJntOwnCargo
									.setApp_num(rmcInLqdAsetCargo
											.getApp_num());
									rmcInJntOwnCargo
									.setJnt_own_seq_num(rmcInLqdAsetCargo
											.getSeq_num());
									rmcInJntOwnCargo.setJnt_indv_seq_num(null);
									rmcInJntOwnCargo
									.setIndv_seq_num(rmcInLqdAsetCargo
											.getIndv_seq_num());
									rmcInJntOwnCargo
									.setAset_sub_typ(rmcInLqdAsetCargo
											.getLqd_aset_typ());
									rmcInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET);
									rmcInJntOwnCargo.setOtsd_ind(null);
									if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
											&& rmcInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										rmcInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
											&& rmcInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										rmcInJntOwnCargo
										.setJnt_own_last_nam(null);
									}
									if (rmcInJntOwnCargo.getJnt_own_share() != null
											&& rmcInJntOwnCargo
											.getJnt_own_share()
											.isEmpty()) {
										rmcInJntOwnCargo
										.setJnt_own_share(FwConstants.ZERO);
									}
									if (rmcInJntOwnCargo.getSeq_num() == null) {
										rmcInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									rmcInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										rmcInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										rmcInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(rmcInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							rmcInJntOwnCargo.setApp_num(rmcInLqdAsetCargo
									.getApp_num());
							rmcInJntOwnCargo
							.setJnt_own_seq_num(rmcInLqdAsetCargo
									.getSeq_num());
							rmcInJntOwnCargo.setIndv_seq_num(rmcInLqdAsetCargo
									.getIndv_seq_num());
							rmcInJntOwnCargo.setAset_sub_typ(rmcInLqdAsetCargo
									.getLqd_aset_typ());
							rmcInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET);
							if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(rmcInJntOwnCargo
											.getJnt_indv_seq_num())) {
								rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								rmcInJntOwnCargo.setOtsd_ind(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (rmcInJntOwnCargo.getSeq_num() == null) {
								rmcInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							rmcInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, rmcInJntOwnCargo);
							rmcInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (rmcInJntOwnCargo.isDirty()) {
								if (rmcInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& rmcInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& rmcInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& rmcInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& rmcInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& rmcInJntOwnCargo.getSrc_app_ind() != null
																		&& rmcInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									rmcInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(rmcInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = rmcInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					rmcInJntOwnCargo = rmcInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							rmcInJntBeforeColl, rmcInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, rmcInJntOwnCargo);
					}

					if (appInJntOwnBeforeCargo == null) {
						rmcInJntOwnCargo.setApp_num(rmcInLqdAsetCargo
								.getApp_num());
						rmcInJntOwnCargo.setJnt_own_seq_num(rmcInLqdAsetCargo
								.getSeq_num());
						rmcInJntOwnCargo.setIndv_seq_num(rmcInLqdAsetCargo
								.getIndv_seq_num());
						rmcInJntOwnCargo.setAset_sub_typ(rmcInLqdAsetCargo
								.getLqd_aset_typ());
						rmcInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET);
						if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(rmcInJntOwnCargo
										.getJnt_indv_seq_num())) {
							rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							rmcInJntOwnCargo.setOtsd_ind(null);
						}
						if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
								&& rmcInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							rmcInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
								&& rmcInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							rmcInJntOwnCargo.setJnt_own_last_nam(null);
						}
						if (rmcInJntOwnCargo.getJnt_own_share() != null
								&& rmcInJntOwnCargo.getJnt_own_share()
								.isEmpty()) {
							rmcInJntOwnCargo.setJnt_own_share(FwConstants.ZERO);
						}
						if (rmcInJntOwnCargo.getSeq_num() == null) {
							rmcInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						rmcInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);
						jntSeqNum = jntSeqNum + 1;
						rmcInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));
						rmcInJntOwnCargo
						.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						rmcInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(rmcInJntOwnCargo);

					}
				}
			}

			liquidAssetBO.storeJointOwnerDetails(appInJntOwnNewColl);

			rmcResponseProfileManager.getProfile(rmcInPrflCollSession,
					rmcInLqdAsetCargo.getIndv_seq_num());
			final String liqAsetType = rmcInLqdAsetCargo.getLqd_aset_typ();
			rmcResponseProfileManager.getResponseByType(
					IRMCResponseProfileManager.LIQUID_ASSET_DETAILS,
					liqAsetType);

			boolean loopingQuestion = false;

			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;

				categorySelectionProfileManager.insertSequenceDetail(
						liquidAssetProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());

				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
						driverArray, appNumber);
			}

			short liquidAssetType = 0;
			if ("CAS".equals(rmcInLqdAsetCargo.getLqd_aset_typ())) {
				liquidAssetType = IRMCResponseProfileManager.LIQ_ASET_CASH;

			} else if ("FA".equals(rmcInLqdAsetCargo.getLqd_aset_typ())) {
				liquidAssetType = IRMCResponseProfileManager.LIQUID_ASET_BANK;
			} else {
				liquidAssetType = IRMCResponseProfileManager.LIQUID_ASSET_OTHER;
			}
			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.LIQUID_ASSET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(liquidAssetType,
							rmcInPrflCargo, true);
				}
			}

			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					liquidAssetProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else
			{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						liquidAssetProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(liquidAssetProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// //Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(liquidAssetProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARACS",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLiquidAssetDetails::End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load vehicle asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadVehicleAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadVehicleAssetTypeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadVehicleAssetTypeSelection:Start");
			final Map request = txnBean.getRequest();

			loadTypes(txnBean, IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadVehicleAssetTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadVehicleAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadVehicleAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadVehicleAssetTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store vehicle asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeVehicleAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeVehicleAssetTypeSelection() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeVehicleAssetTypeSelection:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final ARHousingTypeBO housingTypeBO = new ARHousingTypeBO();
			final ARVATValidator validateBO = new ARVATValidator();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.VEH_ASET_AIRPLANE,
					IRMCResponseProfileManager.VEH_ASET_CAMPER,
					IRMCResponseProfileManager.VEH_ASET_AUTOMOBILE,
					IRMCResponseProfileManager.VEH_ASET_FARM_EQUIP,
					IRMCResponseProfileManager.VEH_ASET_BOAT,
					IRMCResponseProfileManager.VEH_ASET_MOTORCYCLE,
					IRMCResponseProfileManager.VEH_ASET_NONMOTORIZED_BOAT,
					IRMCResponseProfileManager.VEH_ASET_RECREATIONAL_VEHICLE,
					IRMCResponseProfileManager.VEH_ASET_TRAVEL_TRAILER,
					IRMCResponseProfileManager.VEH_ASET_TRUCK,
					IRMCResponseProfileManager.VEH_ASET_UNLIC,
					IRMCResponseProfileManager.VEH_ASET_VAN,
					IRMCResponseProfileManager.VEH_ASET_GOLFCART

			};

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ABVAT Other Vehicle Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARVAT_FIRST_NAME_LIST");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARVAT_RMC_IN_PRFL_COLLECTION");

			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = housingTypeBO.compareAppInPrflColl(
					rmcInPrflBeforeColl, pageColl);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			peopleHandler.getInHomeIndividuals();

			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			// Get NoOneCollection
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARVAT_NO_ONE_COLLECTION");
			final NO_ONE_Collection noOneOtherIncColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = housingTypeBO.compareNoOneCollection(
					noOneBeforeColl, noOneOtherIncColl);

			validateInfo = validateBO.validateNoOneOtherVehicleType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);
			if (validateInfo != null && validateBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARVAT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARVAT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARVAT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			boolean isVehicleDetailPageReguired = false;
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 13;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getOther_asset_vehicle_resp()
						.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);
					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {
						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_arpl_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_camper_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_auto_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_fmeq_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_boat_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_motorcycle_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_nm_b_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_recreation_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_trlr_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_trk_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_unlic_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVeh_aset_van_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getVehicle_asset_golf_cart_resp());

						// session
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_arpl_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_camper_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_auto_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_fmeq_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_boat_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_motorcycle_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_nm_b_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_recreation_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_trlr_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_trk_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_unlic_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVeh_aset_van_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getVehicle_asset_golf_cart_resp());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.OTHR_ASET_VEHICLE);
						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getVehicle_asset_auto_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getVeh_aset_arpl_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getVehicle_asset_camper_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getVehicle_asset_auto_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getVeh_aset_fmeq_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getVehicle_asset_boat_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getVehicle_asset_motorcycle_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getVeh_aset_nm_b_resp()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getVehicle_asset_recreation_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																										&& rmcInPrflBeforeCargo
																										.getVeh_aset_trlr_resp()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																												&& rmcInPrflBeforeCargo
																												.getVeh_aset_trk_resp()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																														&& rmcInPrflBeforeCargo
																														.getVeh_aset_unlic_resp()
																														.equals(String
																																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																&& rmcInPrflBeforeCargo
																																.getVeh_aset_van_resp()
																																.equals(String
																																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																																		&& rmcInPrflBeforeCargo
																																		.getVehicle_asset_golf_cart_resp()
																																		.equals(String
																																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

								) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
									rmcInPrflBeforeCargo, true);
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARVAT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getVeh_aset_arpl_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getVehicle_asset_camper_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getVehicle_asset_auto_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getVeh_aset_fmeq_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																|| rmcInPrflBeforeCargo
																.getVehicle_asset_boat_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getVehicle_asset_motorcycle_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getVeh_aset_nm_b_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																						|| rmcInPrflBeforeCargo
																						.getVehicle_asset_recreation_resp()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																								|| rmcInPrflBeforeCargo
																								.getVeh_aset_trlr_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																										|| rmcInPrflBeforeCargo
																										.getVeh_aset_trk_resp()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																												|| rmcInPrflBeforeCargo
																												.getVeh_aset_unlic_resp()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																														|| rmcInPrflBeforeCargo
																														.getVeh_aset_van_resp()
																														.equals(String
																																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																																|| rmcInPrflBeforeCargo
																																.getVehicle_asset_golf_cart_resp()
																																.equals(String
																																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}
			}

			// persist the data
			final int persistArraySize = persistArray.size();
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = { cargo.getVeh_aset_arpl_resp(),
						cargo.getVehicle_asset_camper_resp(),
						cargo.getVehicle_asset_auto_resp(),
						cargo.getVeh_aset_fmeq_resp(),
						cargo.getVehicle_asset_boat_resp(),
						cargo.getVehicle_asset_motorcycle_resp(),
						cargo.getVeh_aset_nm_b_resp(),
						cargo.getVehicle_asset_recreation_resp(),
						cargo.getVeh_aset_trlr_resp(),
						cargo.getVeh_aset_trk_resp(),
						cargo.getVeh_aset_unlic_resp(),
						cargo.getVeh_aset_van_resp(),
						cargo.getVehicle_asset_golf_cart_resp() };

				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);
				if (String.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED)
						.equals(cargo.getVeh_aset_arpl_resp())
						|| String.valueOf(
								IRMCResponseProfileManager.STATUS_REQUIRED)
								.equals(cargo.getVehicle_asset_camper_resp())
								|| String.valueOf(
										IRMCResponseProfileManager.STATUS_REQUIRED)
										.equals(cargo.getVehicle_asset_auto_resp())
										|| String.valueOf(
												IRMCResponseProfileManager.STATUS_REQUIRED)
												.equals(cargo.getVeh_aset_fmeq_resp())
												|| String.valueOf(
														IRMCResponseProfileManager.STATUS_REQUIRED)
														.equals(cargo.getVehicle_asset_boat_resp())
														|| String.valueOf(
																IRMCResponseProfileManager.STATUS_REQUIRED)
																.equals(cargo
																		.getVehicle_asset_motorcycle_resp())
																		|| String.valueOf(
																				IRMCResponseProfileManager.STATUS_REQUIRED)
																				.equals(cargo.getVeh_aset_nm_b_resp())
																				|| String.valueOf(
																						IRMCResponseProfileManager.STATUS_REQUIRED)
																						.equals(cargo
																								.getVehicle_asset_recreation_resp())
																								|| String.valueOf(
																										IRMCResponseProfileManager.STATUS_REQUIRED)
																										.equals(cargo.getVeh_aset_trlr_resp())
																										|| String.valueOf(
																												IRMCResponseProfileManager.STATUS_REQUIRED)
																												.equals(cargo.getVeh_aset_trk_resp())
																												|| String.valueOf(
																														IRMCResponseProfileManager.STATUS_REQUIRED)
																														.equals(cargo.getVeh_aset_unlic_resp())
																														|| String.valueOf(
																																IRMCResponseProfileManager.STATUS_REQUIRED)
																																.equals(cargo.getVeh_aset_van_resp())
																																| String.valueOf(
																																		IRMCResponseProfileManager.STATUS_REQUIRED)
																																		.equals(cargo.getVehicle_asset_golf_cart_resp()))

				{
					isVehicleDetailPageReguired = true;
				}
			}

			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAT",
						driverArray, appNum);
			}

			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (isVehicleDetailPageReguired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARVAD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARVAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(houseDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARVAD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARVAD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAD",
						driverArray, appNum);
			}

			if (!isVehicleDetailPageReguired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeVehicleAssetTypeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeVehicleAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeVehicleAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeVehicleAssetTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load vehicle asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadVehicleAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadVehicleAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			// make loopingQuestion value NO in the request
			request.put("loopingQuestion", FwConstants.NO);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);

			String srcAppInd = FwConstants.EMPTY_STRING;
			APP_IN_VEH_ASET_Collection rmcInVehicleColl;

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TVAS", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map vehicleTypeMap = new HashMap();

			for (int i = 0; i < codeValues.length; i++) {
				vehicleTypeMap.put(codeValues[i], codeValues[i]);
			}
			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (null == categorySelectionProfile) {
				new CategorySequenceDetail();
				categorySelectionProfile = new TreeSet<CategorySequenceDetail>();
			}

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, vehicleTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, vehicleTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();

			final short[] responseType = new short[] {
					IRMCResponseProfileManager.VEH_ASET_AIRPLANE,
					IRMCResponseProfileManager.VEH_ASET_CAMPER,
					IRMCResponseProfileManager.VEH_ASET_AUTOMOBILE,
					IRMCResponseProfileManager.VEH_ASET_FARM_EQUIP,
					IRMCResponseProfileManager.VEH_ASET_BOAT,
					IRMCResponseProfileManager.VEH_ASET_MOTORCYCLE,
					IRMCResponseProfileManager.VEH_ASET_NONMOTORIZED_BOAT,
					IRMCResponseProfileManager.VEH_ASET_RECREATIONAL_VEHICLE,
					IRMCResponseProfileManager.VEH_ASET_TRAVEL_TRAILER,
					IRMCResponseProfileManager.VEH_ASET_TRUCK,
					IRMCResponseProfileManager.VEH_ASET_UNLIC,
					IRMCResponseProfileManager.VEH_ASET_VAN,
					IRMCResponseProfileManager.VEH_ASET_GOLFCART

			};

			SortedSet vehicleAssetProfile = null;

			if (!currentPageID.equals(previousPageId)) {
				vehicleAssetProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflColl, responseType);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					final APP_IN_VEH_ASET_Collection newVehclAssetColl = vehicleAssetBO
							.loadVehicleAssetDetails(appNumber);
					final APP_IN_VEH_ASET_Collection updatedColl = vehicleAssetBO
							.splitNewVehicleAssetColl(newVehclAssetColl,
									AppConstants.RMC_NEW_RECORD_IND);
					if (updatedColl != null && !updatedColl.isEmpty()) {
						APP_IN_VEH_ASET_Cargo rmcInVehclAssetCargo = null;
						final int newVehclAssetCollSize = updatedColl.size();
						for (int i = 0; i < newVehclAssetCollSize; i++) {
							rmcInVehclAssetCargo = updatedColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									vehicleAssetProfile,
									null,
									null,
									Short.parseShort(rmcInVehclAssetCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInVehclAssetCargo
													.getSeq_num()),
													rmcInVehclAssetCargo
													.getVeh_aset_typ());
						}
					}
				}
				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(vehicleAssetProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(vehicleAssetProfile);
				}
				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);

			} else {
				// catAddNewProfile get it from the before collection
				final Map beforeColl = (Map) session
						.get(FwConstants.BEFORE_COLLECTION);
				vehicleAssetProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines Commented Code in
			 * this block
			 */

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final String addnewPerson = FwConstants.EMPTY_STRING;
			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Vehicle_IndSeqBean");
			}

			// When user hits the Back button or comes from the Summary Page
			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								vehicleAssetProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(indivSeqBean.getUserEndInd())) {
						categorySelectionProfileManager
						.updateUserEndSelInd(vehicleAssetProfile,
								appNumber, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							vehicleAssetProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(indivSeqBean.getUserEndInd())) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(), Short
													.parseShort(indivSeqBean
															.getUserEndInd()));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						// first we are checking rmc in profile exists in the
						// sess
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}
						rmcResponseProfileManager.makeAddNew(
								IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(vehicleAssetProfile,
								appNumber, AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(
								vehicleAssetProfile,
								null,
								AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								vehicleAssetProfile, null, Short
								.parseShort(indivSeqBean
										.getIndivSeqNum()),
										Short.parseShort(indivSeqBean
												.getSeqNum()), indivSeqBean
												.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(
								categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Vehicle_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					vehicleAssetProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(vehicleAssetProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(vehicleAssetProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1,1 lines Commented Code
			 * in this block
			 */

			rmcInVehicleColl = vehicleAssetBO.loadIndividualVehicleAsetDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_VEH_ASET_Collection", rmcInVehicleColl);
			String pageMode = FwConstants.EMPTY_STRING;

			APP_IN_VEH_ASET_Cargo cwwVehicleCargo = vehicleAssetBO
					.splitInVehicleAssetColl(rmcInVehicleColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwVehicleCargo == null) {
				cwwVehicleCargo = new APP_IN_VEH_ASET_Cargo();

			}

			if (cwwVehicleCargo != null) {
				if (cwwVehicleCargo.getMv_yr() != null
						&& FwConstants.ZERO.equals(cwwVehicleCargo.getMv_yr())) {
					cwwVehicleCargo.setMv_yr(FwConstants.EMPTY_STRING);
				}
			}
			pageCollection.put("SEC_VEHICLE_ASSET",
					vehicleAssetBO.settingDefaultValues(cwwVehicleCargo));
			APP_IN_VEH_ASET_Cargo rmcVehicleCargo = vehicleAssetBO
					.splitInVehicleAssetColl(rmcInVehicleColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcVehicleCargo != null) {
				pageCollection.put("FST_VEHICLE_ASSET",
						vehicleAssetBO.settingDefaultValues(rmcVehicleCargo));
			} else {
				rmcVehicleCargo = vehicleAssetBO.splitInVehicleAssetColl(
						rmcInVehicleColl, AppConstants.RMC_END_RECORD_IND);
				if (rmcVehicleCargo != null) {
					if (rmcVehicleCargo.getMv_yr() != null
							&& FwConstants.ZERO.equals(rmcVehicleCargo
									.getMv_yr())) {
						rmcVehicleCargo.setMv_yr(FwConstants.EMPTY_STRING);
					}
					pageCollection.put("FST_VEHICLE_ASSET", vehicleAssetBO
							.settingDefaultValues(rmcVehicleCargo));
				} else {
					rmcVehicleCargo = vehicleAssetBO.splitInVehicleAssetColl(
							rmcInVehicleColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
					if (rmcVehicleCargo != null) {
						if (rmcVehicleCargo.getMv_yr() != null
								&& FwConstants.ZERO.equals(rmcVehicleCargo
										.getMv_yr())) {
							rmcVehicleCargo.setMv_yr(FwConstants.EMPTY_STRING);
						}
						pageCollection.put("FST_VEHICLE_ASSET", vehicleAssetBO
								.settingDefaultValues(rmcVehicleCargo));
					} else {
						pageCollection.put("FST_VEHICLE_ASSET", vehicleAssetBO
								.settingDefaultValues(cwwVehicleCargo));

					}

				}
			}

			if (rmcInVehicleColl != null && !rmcInVehicleColl.isEmpty()) {
				final APP_IN_VEH_ASET_Cargo rmcInSelfeCargo = rmcInVehicleColl
						.getCargo(0);
				srcAppInd = rmcInSelfeCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			if (rmcInVehicleColl != null && !rmcInVehicleColl.isEmpty()) {
				final APP_IN_VEH_ASET_Cargo appLqdPropCargo = rmcInVehicleColl
						.getCargo(0);
				srcAppInd = appLqdPropCargo.getSrc_app_ind();
				final String subType = appLqdPropCargo.getVeh_aset_typ();
				indvSeqNum = appLqdPropCargo.getIndv_seq_num();
				if (appLqdPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = vehicleAssetBO
							.loadIndividualJointOwnerDetails(
									(String) session
									.get(AppConstants.APP_NUMBER),
									indvSeqNum,
									AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET,
									subType, appLqdPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {

						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			pageCollection.put("PAGE_VEHICLE_MODE", pageMode);
			pageCollection.put("VEHICLE_TYPE", categoryType);

			// set first name to page collection
			txnBean.setPageCollection(pageCollection);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);

			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));

			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_5211", indivCustCol);

			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			txnBean.setPageCollection(pageCollection);

			// set Details_Collection from session to PageCollection
			final APP_IN_VEH_ASET_Collection vehAsetColl = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");

			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			// put the Current Individual Sequence Number in the pageCollection
			if (vehAsetColl != null && !vehAsetColl.isEmpty()) {
				final APP_IN_VEH_ASET_Cargo vehAsetCargo = vehAsetColl
						.getCargo(0);
				indvSeqNum = vehAsetCargo.getIndv_seq_num();
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
						indvSeqNum);
			}

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
					// EDSP RMB clearing app_in_jnt_owner collection from
					// pagecollection
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented
					 * Code in this block
					 */
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeColl = new HashMap();
				beforeColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}

			// run component manager
			componentManager.getComponents(currentPageID, txnBean);

			// EDSP RMB ADDED FOR NEW PERSON
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);

			request.remove("loopingQuestion");
			// Add the page collection to before collection
			pageCollection.put("APP_IN_VEH_ASET_Collection", rmcInVehicleColl);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadVehicleAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store vehicle asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeVehicleAssetDetails() - START");
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		String indvSeqNum = null;
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeVehicleAssetDetails:Start");

			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			session.remove("Vehicle_IndSeqBean");

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			// get the BeforeCollection
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final SortedSet vehicleAssetProfile = (SortedSet) beforePageColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforePageColl
					.get("PAGE_VEHICLE_MODE");

			beforePageColl.get(AppConstants.FIRST_NAME);

			// get the RMC_IN_PRFLCollection from session
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// get Details aset Collection and Cargo
			final APP_IN_VEH_ASET_Collection rmcInVehicleCollection = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");
			APP_IN_VEH_ASET_Cargo rmcInVehicleCargo = rmcInVehicleCollection
					.getCargo(0);

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection rmcInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");

			String jntOwnerResp = FwConstants.EMPTY_STRING;

			boolean amtEntered = false;
			boolean amtEntered1 = false;

			rmcInVehicleCargo.setApp_num(appNumber);

			if (rmcInVehicleCargo.getRec_cplt_ind() == null) {
				rmcInVehicleCargo.setRec_cplt_ind(FwConstants.ZERO);
			}

			if (rmcInVehicleCargo.getMv_fmv_amt_ind() == null) {
				if (rmcInVehicleCargo.getMv_fmv_amt() != null
						&& FwConstants.EMPTY_STRING.equals(rmcInVehicleCargo
								.getMv_fmv_amt().trim())) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1,1 lines
					 * Commented Code in this block
					 */

					rmcInVehicleCargo.setMv_fmv_amt_ind("2");
				} else {
					rmcInVehicleCargo.setMv_fmv_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInVehicleCargo.getMv_fmv_amt() != null && FwConstants.EMPTY_STRING
						.equals(rmcInVehicleCargo.getMv_fmv_amt().trim()))) {
					amtEntered = true;
					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}

			if (rmcInVehicleCargo.getMv_owe_amt_ind() == null) {
				if (rmcInVehicleCargo.getMv_owe_amt() != null
						&& FwConstants.EMPTY_STRING.equals(rmcInVehicleCargo
								.getMv_owe_amt().trim())) {

					rmcInVehicleCargo.setMv_owe_amt_ind("2");
				} else {
					rmcInVehicleCargo.setMv_owe_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInVehicleCargo.getMv_owe_amt() != null && FwConstants.EMPTY_STRING
						.equals(rmcInVehicleCargo.getMv_owe_amt().trim()))) {

					amtEntered1 = true;
					pageCollection.put("AmtAndIndChecked_owe", FwConstants.ONE);
				}
			}

			rmcInVehicleCargo.setMv_rgst_rqr_sw(FwConstants.SPACE);
			rmcInVehicleCargo.setMotor_vehicle_description(FwConstants.SPACE);

			if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
				rmcInVehicleCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				rmcInVehicleCargo.setJnt_own_resp(FwConstants.NO);
			}

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(vehicleAssetProfile);

			rmcInVehicleCargo.setVeh_aset_typ(categorySeqDetailBean
					.getCategoryType());
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			final ARVADValidator aRVADValidator = new ARVADValidator();

			final APP_IN_VEH_ASET_Collection beforePageCollRmcInVehicleColl = (APP_IN_VEH_ASET_Collection) beforePageColl
					.get("APP_IN_VEH_ASET_Collection");
			APP_IN_VEH_ASET_Cargo beforeVehicleCargo = null;

			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection rmcInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");

			indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean vehicleDetailsUpdate = false;

			if (beforePageCollRmcInVehicleColl != null
					&& !beforePageCollRmcInVehicleColl.isEmpty()) {

				final int size = beforePageCollRmcInVehicleColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if (seqNum == 0) {
					seqNum = seqNum + 1;
				}

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				beforeVehicleCargo = vehicleAssetBO.splitInVehicleAssetColl(
						beforePageCollRmcInVehicleColl, sourceAppIndicator);
				if (beforeVehicleCargo == null
						&& AppConstants.RMC_END_RECORD_IND
						.equals(sourceAppIndicator)) {
					beforeVehicleCargo = vehicleAssetBO
							.splitInVehicleAssetColl(
									beforePageCollRmcInVehicleColl,
									AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeVehicleCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeVehicleCargo != null) {

					// EDSP//
					if (categorySeqDetailBean
							.getCategoryType()
							.equals(String
									.valueOf(IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS))) {

						rmcInVehicleCargo.setMv_fmv_amt(beforeVehicleCargo
								.getMv_fmv_amt());
						rmcInVehicleCargo.setMv_owe_amt(beforeVehicleCargo
								.getMv_owe_amt());
						rmcInVehicleCargo.setChg_eff_dt(beforeVehicleCargo
								.getChg_eff_dt());
						rmcInVehicleCargo.setEcp_id(beforeVehicleCargo
								.getEcp_id());

					}
					//

					rmcInVehicleCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));
					rmcInVehicleCargo.setSrc_app_ind(beforeVehicleCargo
							.getSrc_app_ind());
					rmcInVehicleCargo.setIndv_seq_num(beforeVehicleCargo
							.getIndv_seq_num());
					rmcInVehicleCargo.setVeh_aset_typ(beforeVehicleCargo
							.getVeh_aset_typ());
					rmcInVehicleCargo.setSeq_num(beforeVehicleCargo
							.getSeq_num());
					rmcInVehicleCargo.setRec_cplt_ind(beforeVehicleCargo
							.getRec_cplt_ind());
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented
					 * Code in this block
					 */

					rmcInVehicleCargo.setJnt_own_resp(jntOwnerResp);

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInVehicleCargo.setMv_fmv_amt(beforeVehicleCargo
								.getMv_fmv_amt());
						rmcInVehicleCargo.setMv_fmv_amt_ind(beforeVehicleCargo
								.getMv_fmv_amt_ind());
						rmcInVehicleCargo.setMv_owe_amt(beforeVehicleCargo
								.getMv_owe_amt());
						rmcInVehicleCargo.setMv_owe_amt_ind(beforeVehicleCargo
								.getMv_owe_amt_ind());
						rmcInVehicleCargo.setLic_plate_txt(beforeVehicleCargo
								.getLic_plate_txt());
						rmcInVehicleCargo.setLic_sta_cd(beforeVehicleCargo
								.getLic_sta_cd());
						rmcInVehicleCargo.setMv_make_txt(beforeVehicleCargo
								.getMv_make_txt());
						rmcInVehicleCargo.setMv_modl_txt(beforeVehicleCargo
								.getMv_modl_txt());
						rmcInVehicleCargo.setMv_yr(beforeVehicleCargo
								.getMv_yr());
						rmcInVehicleCargo.setMv_rgst_rqr_sw(beforeVehicleCargo
								.getMv_rgst_rqr_sw());
						rmcInVehicleCargo.setJnt_own_resp(beforeVehicleCargo
								.getJnt_own_resp());
						rmcInVehicleCargo.setEcp_id(beforeVehicleCargo
								.getEcp_id());
					}

					rmcInVehicleCargo.getChg_eff_dt();
					if (beforeVehicleCargo.getChg_eff_dt() != null
							&& beforeVehicleCargo.getChg_eff_dt().trim()
							.length() != 0
							&& Date.valueOf(beforeVehicleCargo.getChg_eff_dt()) == Date
							.valueOf(AppConstants.HIGH_DATE)
							&& rmcInVehicleCargo.getChg_eff_dt().trim()
							.length() == 0) {
						rmcInVehicleCargo.setChg_eff_dt(beforeVehicleCargo
								.getChg_eff_dt());
					}
				} else {
					final APP_IN_VEH_ASET_Cargo beforeCargo = beforePageCollRmcInVehicleColl
							.getCargo(0);
					rmcInVehicleCargo.setEcp_id(beforeCargo.getEcp_id());
				}
				if (rmcInJntOwnColl != null) {
					int appInJntCollSize = rmcInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = rmcInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							rmcInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}

				// check dirty
				rmcInVehicleCargo = (APP_IN_VEH_ASET_Cargo) isChanged(
						beforeVehicleCargo, rmcInVehicleCargo);

				rmcInVehicleCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInVehicleCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInVehicleCargo.setRowAction(recordInd);

				rmcInVehicleCargo.setSeq_num(String.valueOf(seqNum));
				rmcInVehicleCargo.setIndv_seq_num(indvSeqNum);

				//
				if (rmcInVehicleCargo.isDirty()) {
					vehicleDetailsUpdate = true;
				}
			} else {
				if (rmcInVehicleCargo.getRec_cplt_ind() == null
						|| rmcInVehicleCargo.getRec_cplt_ind().trim().length() == 0) {
					rmcInVehicleCargo.setRec_cplt_ind(FwConstants.ZERO);
				}
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInVehicleCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				rmcInVehicleCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));

				// get the MAX seq number from data base

				rmcInVehicleCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				seqNum = vehicleAssetBO.getMaxVehAstSeqNumber(appNumber,
						indvSeqNum);

				seqNum = seqNum + 1;

				rmcInVehicleCargo.setSeq_num(String.valueOf(seqNum));
				rmcInVehicleCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
				rmcInVehicleCargo.setVeh_aset_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInVehicleCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInVehicleCargo.setRowAction(recordInd);
				vehicleDetailsUpdate = true;

				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(vehicleAssetProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
				if (rmcInJntOwnColl != null) {
					int appInJntCollSize = rmcInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = rmcInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							rmcInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
			}
			// Run Validations
			String jsEnabled = FwConstants.YES;
			final Map sessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
			if (sessionMap != null) {
				if (sessionMap.get(FwConstants.JS_ENABLED) != null) {
					jsEnabled = (String) sessionMap.get(FwConstants.JS_ENABLED);
				}
			}
			if (rmcInJntOwnColl != null) {
				int appInJntCollSize = rmcInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = rmcInJntOwnColl.getCargo(i);
					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						rmcInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess == null) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 2,5,1 lines Commented
				 * Code in this block
				 */

				if (userEndInd == 1) {
					aRVADValidator.validateEndScreen(rmcInVehicleCargo);
				} else {
					aRVADValidator
					.validateVehicleAssetDetails(
							rmcInVehicleCollection,
							(String) beforePageColl
							.get(AppConstants.FIRST_NAME),
							rmcInVehicleCargo.getMv_fmv_amt_ind(),
							rmcInVehicleCargo.getMv_owe_amt_ind(),
							amtEntered, amtEntered1, peopleHandler,
							request, beforePageColl);
					aRVADValidator.validateJointOwnerInformationVhcl(
							rmcInJntOwnColl, jsEnabled);
				}

			}
			pageCollection.get("FST_JNT");
			if (checkBackToMyAccessSelected(request)
					|| aRVADValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							aRVADValidator.getMessageList());
				}
				if (rmcInVehicleCargo != null) {

					if (FwConstants.ZERO.equals(rmcInVehicleCargo.getMv_yr())) {

					}
					rmcInVehicleCargo.setVeh_aset_typ((String) beforePageColl
							.get("VEHICLE_TYPE"));
					if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
						rmcInVehicleCargo.setJnt_own_resp(FwConstants.YES);
					}
				}
				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("VEHICLE_TYPE",
						beforePageColl.get("VEHICLE_TYPE"));
				pageCollection.put("APP_IN_VEH_ASET_Collection",
						rmcInVehicleCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_VEHICLE_MODE",
						beforePageColl.get("PAGE_VEHICLE_MODE"));
				if (beforePageColl.containsKey("SEC_VEHICLE_ASSET")) {
					pageCollection.put("SEC_VEHICLE_ASSET",
							beforePageColl.get("SEC_VEHICLE_ASSET"));
				}

				pageCollection.put("FST_VEHICLE_ASSET", rmcInVehicleCargo);

				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				if (beforePageColl.containsKey("SEC_JNT")) {
					pageCollection
					.put("SEC_JNT", beforePageColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", rmcInJntOwnColl);

				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				return;
			}
			if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
				jntOwnerResp = FwConstants.YES;
			} else {
				jntOwnerResp = FwConstants.NO;
			}
			rmcInVehicleCargo.setJnt_own_resp(jntOwnerResp);
			if (rmcInVehicleCargo.getVehicle_acquired_dt() != null
					&& rmcInVehicleCargo.getVehicle_acquired_dt().length() == 10
					&& rmcInVehicleCargo.getVehicle_acquired_dt().charAt(2) == '/') {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = rmcInVehicleCargo
						.getVehicle_acquired_dt();
				dateConverter.append(sAppDate.substring(6, 10)).append("-")
				.append(sAppDate.substring(0, 2)).append("-")
				.append(sAppDate.substring(3, 5));
				rmcInVehicleCargo.setVehicle_acquired_dt(dateConverter
						.toString());
			}

			if (rmcInVehicleCargo.getAsset_end_dt() != null
					&& rmcInVehicleCargo.getAsset_end_dt().length() == 10
					&& rmcInVehicleCargo.getAsset_end_dt().charAt(2) == '/') {
				final StringBuilder dateConverter = new StringBuilder();
				final String sAppDate = rmcInVehicleCargo.getAsset_end_dt();
				dateConverter.append(sAppDate.substring(6, 10)).append("-")
				.append(sAppDate.substring(0, 2)).append("-")
				.append(sAppDate.substring(3, 5));
				rmcInVehicleCargo.setAsset_end_dt(dateConverter.toString());
			}
			//

			if (vehicleDetailsUpdate) {
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 3,1 lines Commented
				 * Code in this block
				 */

				if (FwConstants.ROWACTION_INSERT.equals(rmcInVehicleCargo
						.getRowAction())) {
					vehicleAssetBO
					.insertExistingVehAstDetails(rmcInVehicleCollection);
				} else {
					vehicleAssetBO
					.storeVehicleAssetDetails(rmcInVehicleCollection);
				}
			}

			// completeness check
			rmcInVehicleCargo.setRec_cplt_ind(vehicleAssetBO
					.completenessCheck(rmcInVehicleCargo));

			rmcInVehicleCargo = rmcInVehicleCollection.getCargo(0);

			APP_IN_JNT_OWN_Cargo rmcInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;
			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();
			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (rmcInJntBeforeColl != null && !rmcInJntBeforeColl.isEmpty()) {
				final int appInjntBeforeCollSize = rmcInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = rmcInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						rmcInJntOwnCargo = getCWMatchingCargo(rmcInJntOwnColl,
								appInJntCwMatchCargo);
						if (rmcInJntOwnCargo != null) {
							rmcInJntOwnCargo.setApp_num(rmcInVehicleCargo
									.getApp_num());
							rmcInJntOwnCargo
							.setJnt_own_seq_num(rmcInVehicleCargo
									.getSeq_num());
							rmcInJntOwnCargo.setIndv_seq_num(rmcInVehicleCargo
									.getIndv_seq_num());
							rmcInJntOwnCargo.setAset_sub_typ(rmcInVehicleCargo
									.getVeh_aset_typ());

							if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(rmcInJntOwnCargo
											.getJnt_indv_seq_num())) {
								rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								rmcInJntOwnCargo.setOtsd_ind(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (rmcInJntOwnCargo.getSeq_num() == null) {
								rmcInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							rmcInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, rmcInJntOwnCargo);
							rmcInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (rmcInJntOwnCargo.isDirty()) {
								if (rmcInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& rmcInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& rmcInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& rmcInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& rmcInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(rmcInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						rmcInJntOwnCargo = getMatchingCargo(rmcInJntOwnColl,
								appInJntOwnBeforeCargo);
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2,2 lines
						 * Commented Code in this block
						 */

						if (rmcInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								rmcInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (rmcInJntOwnCargo != null) {
									rmcInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									rmcInJntOwnCargo
									.setApp_num(rmcInVehicleCargo
											.getApp_num());
									rmcInJntOwnCargo
									.setJnt_own_seq_num(rmcInVehicleCargo
											.getSeq_num());
									rmcInJntOwnCargo.setJnt_indv_seq_num(null);
									rmcInJntOwnCargo
									.setIndv_seq_num(rmcInVehicleCargo
											.getIndv_seq_num());
									rmcInJntOwnCargo
									.setAset_sub_typ(rmcInVehicleCargo
											.getVeh_aset_typ());
									rmcInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET);
									rmcInJntOwnCargo.setOtsd_ind(null);
									if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
											&& rmcInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										rmcInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
											&& rmcInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										rmcInJntOwnCargo
										.setJnt_own_last_nam(null);
									}
									if (rmcInJntOwnCargo.getJnt_own_share() == null) {
										rmcInJntOwnCargo
										.setJnt_own_share(FwConstants.ZERO);
									}
									if (rmcInJntOwnCargo.getSeq_num() == null) {
										rmcInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									rmcInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										rmcInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										rmcInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(rmcInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							rmcInJntOwnCargo.setApp_num(rmcInVehicleCargo
									.getApp_num());
							rmcInJntOwnCargo
							.setJnt_own_seq_num(rmcInVehicleCargo
									.getSeq_num());
							rmcInJntOwnCargo.setIndv_seq_num(rmcInVehicleCargo
									.getIndv_seq_num());
							rmcInJntOwnCargo.setAset_sub_typ(rmcInVehicleCargo
									.getVeh_aset_typ());
							rmcInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET);
							if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(rmcInJntOwnCargo
											.getJnt_indv_seq_num())) {
								rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								rmcInJntOwnCargo.setOtsd_ind(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
									&& rmcInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								rmcInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (rmcInJntOwnCargo.getSeq_num() == null) {
								rmcInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							rmcInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, rmcInJntOwnCargo);
							rmcInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (rmcInJntOwnCargo.isDirty()) {
								if (rmcInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& rmcInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& rmcInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& rmcInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& rmcInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& rmcInJntOwnCargo.getSrc_app_ind() != null
																		&& rmcInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									rmcInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									rmcInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(rmcInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (rmcInJntOwnColl != null && !rmcInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = rmcInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					rmcInJntOwnCargo = rmcInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							rmcInJntBeforeColl, rmcInJntOwnCargo);

					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 5,1,3,2,1 lines
					 * Commented Code in this block
					 */

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, rmcInJntOwnCargo);
					}

					if (appInJntOwnBeforeCargo == null) {
						rmcInJntOwnCargo.setApp_num(rmcInVehicleCargo
								.getApp_num());
						rmcInJntOwnCargo.setJnt_own_seq_num(rmcInVehicleCargo
								.getSeq_num());
						rmcInJntOwnCargo.setIndv_seq_num(rmcInVehicleCargo
								.getIndv_seq_num());
						rmcInJntOwnCargo.setAset_sub_typ(rmcInVehicleCargo
								.getVeh_aset_typ());
						rmcInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET);
						if (rmcInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(rmcInJntOwnCargo
										.getJnt_indv_seq_num())) {
							rmcInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							rmcInJntOwnCargo.setOtsd_ind(null);
						}
						if (rmcInJntOwnCargo.getJnt_own_fst_nam() != null
								&& rmcInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							rmcInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (rmcInJntOwnCargo.getJnt_own_last_nam() != null
								&& rmcInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							rmcInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (FwConstants.EMPTY_STRING.equals(rmcInJntOwnCargo
								.getJnt_own_share())) {
							rmcInJntOwnCargo.setJnt_own_share(FwConstants.ZERO);
						}
						if (rmcInJntOwnCargo.getSeq_num() == null) {
							rmcInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						rmcInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

						jntSeqNum = jntSeqNum + 1;
						rmcInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));

						rmcInJntOwnCargo
						.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						rmcInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(rmcInJntOwnCargo);

					}
				}
			}
			// Added coment
			// user pressed back and the before collection is not null delete it
			// else update it.

			if (appInJntOwnNewColl != null && !appInJntOwnNewColl.isEmpty()) {
				vehicleAssetBO.storeJointOwnerDetails(appInJntOwnNewColl);
			}

			rmcResponseProfileManager.getProfile(rmcInPrflCollSession,
					rmcInVehicleCargo.getIndv_seq_num());
			final String vehAsetType = rmcInVehicleCargo.getVeh_aset_typ();
			rmcResponseProfileManager.getResponseByType(
					IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
					vehAsetType);

			boolean loopingQuestion = false;

			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;

				categorySelectionProfileManager.insertSequenceDetail(
						vehicleAssetProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());

				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);

			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					vehicleAssetProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						vehicleAssetProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfileManager
					.areAllSequencesComplete(vehicleAssetProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// //Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(vehicleAssetProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeVehicleAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");

	}

	/**
	 * Load real property type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadRealPropertyTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadRealPropertyTypeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadRealPropertyTypeSelection:Start");
			final Map request = txnBean.getRequest();

			loadTypes(txnBean,
					IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY, request
					.get(FwConstants.CURRENT_PAGE_ID).toString());

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadRealPropertyTypeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadRealPropertyTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadRealPropertyTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadRealPropertyTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store real property type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeRealPropertyTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeRealPropertyTypeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeRealPropertyTypeSelection:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// Initialize ValidationBO
			final ARHousingTypeBO housingTypeBO = new ARHousingTypeBO();
			final ARRPTValidator validateBO = new ARRPTValidator();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.REAL_ASET_HOUSE,
					IRMCResponseProfileManager.REAL_ASET_CONDO,
					IRMCResponseProfileManager.REAL_ASET_LAND,
					IRMCResponseProfileManager.REAL_ASET_MOBILE_HOME,
					IRMCResponseProfileManager.REAL_ASET_LIFE_ESTATE,
					IRMCResponseProfileManager.REAL_ASET_RENTAL,
					IRMCResponseProfileManager.REAL_ASET_APARTMENT,
					IRMCResponseProfileManager.REAL_ASET_FARM,
					IRMCResponseProfileManager.REAL_ASET_VAC,
					IRMCResponseProfileManager.REAL_ASET_DUPLEX,
					IRMCResponseProfileManager.REAL_ASET_OTHER };

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ARRPT Other Real Property Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARRPT_FIRST_NAME_LIST");
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARRPT_NO_ONE_COLLECTION");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARRPT_RMC_IN_PRFL_COLLECTION");
			final NO_ONE_Collection noOneOtherIncColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = housingTypeBO.compareAppInPrflColl(
					rmcInPrflBeforeColl, pageColl);

			// Run Validation
			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = housingTypeBO.compareNoOneCollection(
					noOneBeforeColl, noOneOtherIncColl);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			validateInfo = validateBO.validateNoOneOtherRealPropType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);
			if (validateInfo != null && validateBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARRPT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARRPT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARRPT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();
			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 11;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getOther_asset_real_property_resp()
						.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);
					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {
						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_house_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_aset_con_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_land_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_mobile_home_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_life_estate_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_rental_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_aset_apt_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_aset_frm_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_aset_vac_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_aset_dup_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getReal_asset_other_resp());

						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_house_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_aset_con_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_land_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_mobile_home_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_life_estate_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_rental_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_aset_apt_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_aset_frm_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_aset_vac_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_aset_dup_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getReal_asset_other_resp());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus)) {
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY);
						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getReal_aset_apt_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getReal_aset_con_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getReal_aset_dup_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getReal_aset_frm_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getReal_asset_land_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getReal_asset_mobile_home_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getReal_asset_other_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getReal_asset_life_estate_resp()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getReal_asset_rental_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																										&& rmcInPrflBeforeCargo
																										.getReal_asset_house_resp()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																												&& rmcInPrflBeforeCargo
																												.getReal_aset_vac_resp()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

								) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
									rmcInPrflBeforeCargo, true);
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARRPT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getReal_aset_apt_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getReal_aset_con_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getReal_aset_dup_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getReal_aset_frm_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																|| rmcInPrflBeforeCargo
																.getReal_asset_land_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																		|| rmcInPrflBeforeCargo
																		.getReal_asset_mobile_home_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																				|| rmcInPrflBeforeCargo
																				.getReal_asset_other_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																						|| rmcInPrflBeforeCargo
																						.getReal_asset_life_estate_resp()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																								|| rmcInPrflBeforeCargo
																								.getReal_asset_rental_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																										|| rmcInPrflBeforeCargo
																										.getReal_asset_house_resp()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
																												|| rmcInPrflBeforeCargo
																												.getReal_aset_vac_resp()
																												.equals(String
																														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))

								) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}
			}

			// persist the data
			final int persistArraySize = persistArray.size();

			boolean realAssetDetailPageRequired = false;
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = {
						cargo.getReal_asset_house_resp(),
						cargo.getReal_aset_con_resp(),
						cargo.getReal_asset_land_resp(),
						cargo.getReal_asset_mobile_home_resp(),
						cargo.getReal_asset_life_estate_resp(),
						cargo.getReal_asset_rental_resp(),
						cargo.getReal_aset_apt_resp(),
						cargo.getReal_aset_frm_resp(),
						cargo.getReal_aset_vac_resp(),
						cargo.getReal_aset_dup_resp(),
						cargo.getReal_asset_other_resp() };
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				if ("R".equalsIgnoreCase(cargo.getReal_aset_apt_resp())
						|| "R".equalsIgnoreCase(cargo.getReal_aset_con_resp())
						|| "R".equalsIgnoreCase(cargo.getReal_aset_dup_resp())
						|| "R".equalsIgnoreCase(cargo.getReal_aset_frm_resp())
						|| "R".equalsIgnoreCase(cargo.getReal_asset_land_resp())
						|| "R".equalsIgnoreCase(cargo
								.getReal_asset_mobile_home_resp())
								|| "R".equalsIgnoreCase(cargo
										.getReal_asset_other_resp())
										|| "R".equalsIgnoreCase(cargo
												.getReal_asset_life_estate_resp())
												|| "R".equalsIgnoreCase(cargo
														.getReal_asset_rental_resp())
														|| "R".equalsIgnoreCase(cargo
																.getReal_asset_house_resp())
																|| "R".equalsIgnoreCase(cargo.getReal_aset_vac_resp())) {
					realAssetDetailPageRequired = true;
				}

			}

			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPT",
						driverArray, appNum);
			}

			if (persistFlag == true) {
				// Run Dirty Logic on Driver
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARRPD", driverArray);
			}
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (realAssetDetailPageRequired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARRPD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_REAL_ASSET_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARRPD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(houseDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARRPD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARRPD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPD",
						driverArray, appNum);
			}

			if (!realAssetDetailPageRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeRealPropertyTypeSelection:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeRealPropertyTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeRealPropertyTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeRealPropertyTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load real property details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadRealPropertyDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadRealPropertyDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadRealPropertyDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			request.put("loopingQuestion", FwConstants.NO);
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = FwConstants.EMPTY_STRING;

			APP_IN_R_PROP_ASET_Collection rmcInRealPropColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines Commented Code in
			 * this block
			 */

			final int driverStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, currentPageID, driverArray);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TROP", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map realPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				realPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			if (driverStatus == FwConstants.DRIVER_REQUIRED
					|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_REAL_ASSET_PRFL);
			} else if (driverStatus == FwConstants.DRIVER_COMPLETE
					&& !currentPageID.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, realPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_REAL_ASSET_PRFL);
			}

			final short[] responseChangeType = new short[] {
					IRMCResponseProfileManager.REAL_ASET_HOUSE,
					IRMCResponseProfileManager.REAL_ASET_CONDO,
					IRMCResponseProfileManager.REAL_ASET_LAND,
					IRMCResponseProfileManager.REAL_ASET_MOBILE_HOME,
					IRMCResponseProfileManager.REAL_ASET_LIFE_ESTATE,
					IRMCResponseProfileManager.REAL_ASET_RENTAL,
					IRMCResponseProfileManager.REAL_ASET_APARTMENT,
					IRMCResponseProfileManager.REAL_ASET_FARM,
					IRMCResponseProfileManager.REAL_ASET_VAC,
					IRMCResponseProfileManager.REAL_ASET_DUPLEX,
					IRMCResponseProfileManager.REAL_ASET_OTHER };

			SortedSet realProfile = null;
			// EDSP RMB added for rmb person
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			final String addnewPerson = FwConstants.EMPTY_STRING;
			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (!currentPageID.equals(previousPageId)) {
				realProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseChangeType);
				// EDSP RMB need to remove
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				if (driverStatus != FwConstants.DRIVER_REQUIRED) {
					APP_IN_R_PROP_ASET_Collection rmcPropCol = aBRealPropertyDetailsBO
							.loadRealPropertyDetails(appNumber);
					rmcPropCol = aBRealPropertyDetailsBO.splitRealColl(
							rmcPropCol, AppConstants.RMC_NEW_RECORD_IND);

					if (rmcPropCol != null && !rmcPropCol.isEmpty()) {
						APP_IN_R_PROP_ASET_Cargo rmcInRealPropCargo = null;
						final int newRealCollSize = rmcPropCol.size();
						for (int i = 0; i < newRealCollSize; i++) {
							rmcInRealPropCargo = rmcPropCol.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(realProfile,
									null, null,
									Short.parseShort(rmcInRealPropCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInRealPropCargo
													.getSeq_num()),
													rmcInRealPropCargo
													.getReal_prop_aset_typ());
						}
					}
				}

				if (driverStatus == FwConstants.DRIVER_REQUIRED
						|| driverStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(realProfile);
				}
				if (driverStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(realProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				realProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			// if details key bean not null means this bean is comming from the
			// summary page or When user hits the back button

			if (indivSeqBean == null
					&& driverStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !currentPageID.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Real_IndSeqBean");
			}

			if (indivSeqBean != null) {

				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								realProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(realProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							realProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						rmcResponseProfileManager
						.makeAddNew(
								IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(realProfile, appNumber, AppConstants.RMC_CAT_REAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(realProfile, null,
								AppConstants.RMC_CAT_REAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(realProfile, null,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_REAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}

				session.put("Real_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);

			}

			pageCollection
			.put(AppConstants.RMC_CATEGORY_PAGE_PRFL, realProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(realProfile);

			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(realProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());

			rmcInRealPropColl = aBRealPropertyDetailsBO
					.loadIndividualRealPropertyDetails(appNumber, indvSeqNum,
							categorySeqNum);
			pageCollection.put("APP_IN_R_PROP_ASET_Collection",
					rmcInRealPropColl);

			// EDSP RMB added new person
			APP_IN_R_PROP_ASET_Cargo cwwRealPropCargo = aBRealPropertyDetailsBO
					.splitRealPropColl(rmcInRealPropColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwRealPropCargo == null) {
				cwwRealPropCargo = new APP_IN_R_PROP_ASET_Cargo();

			}

			pageCollection.put("SEC_REAL", aBRealPropertyDetailsBO
					.settingRealPropertyDefaultValues(cwwRealPropCargo));

			APP_IN_R_PROP_ASET_Cargo rmcRealCargo1 = aBRealPropertyDetailsBO
					.splitRealPropColl(rmcInRealPropColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
			if (rmcRealCargo1 != null) {

				pageCollection.put("FST_REAL", aBRealPropertyDetailsBO
						.settingRealPropertyDefaultValues(rmcRealCargo1));
			} else {
				rmcRealCargo1 = aBRealPropertyDetailsBO.splitRealPropColl(
						rmcInRealPropColl, AppConstants.RMC_NEW_RECORD_IND);
				if (rmcRealCargo1 != null) {
					pageCollection.put("FST_REAL", aBRealPropertyDetailsBO
							.settingRealPropertyDefaultValues(rmcRealCargo1));
				} else {
					rmcRealCargo1 = aBRealPropertyDetailsBO.splitRealPropColl(
							rmcInRealPropColl, AppConstants.RMC_END_RECORD_IND);
					if (rmcRealCargo1 != null) {
						pageCollection
						.put("FST_REAL",
								aBRealPropertyDetailsBO
								.settingRealPropertyDefaultValues(rmcRealCargo1));
					} else {
						pageCollection
						.put("FST_REAL",
								aBRealPropertyDetailsBO
								.settingRealPropertyDefaultValues(cwwRealPropCargo));
					}

				}
			}

			if (rmcInRealPropColl != null && !rmcInRealPropColl.isEmpty()) {
				final APP_IN_R_PROP_ASET_Cargo rmcInSelfeCargo = rmcInRealPropColl
						.getCargo(0);
				srcAppInd = rmcInSelfeCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}

			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			// set Details_Collection from session to PageCollection
			if (rmcInRealPropColl != null && !rmcInRealPropColl.isEmpty()) {
				final APP_IN_R_PROP_ASET_Cargo appRPropCargo = rmcInRealPropColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				final String subType = appRPropCargo.getReal_prop_aset_typ();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (appRPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = aBRealPropertyDetailsBO
							.loadIndividualJointOwnerDetails(
									(String) session
									.get(AppConstants.APP_NUMBER),
									indvSeqNum,
									AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY,
									subType, appRPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						// EDSP RMB adding CWJnt collection
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}

			// Household address
			final ABRegistrationBO registrationBo = new ABRegistrationBO();
			final Map registrationMap = registrationBo
					.loadRegistrationInformation(appNumber);
			final APP_RGST_Collection appRgstColl = (APP_RGST_Collection) registrationMap
					.get("APP_RGST_Collection");
			pageCollection.put("APP_RGST_Collection", appRgstColl);
			// Populate the Registration Address Flag
			pageCollection.put("REG_ADDR_FLG", Boolean
					.valueOf(aBRealPropertyDetailsBO
							.isValidRegistrationAddress(appRgstColl)));

			// Communtiy Spouse address
			final InstitutionBO institutionBO = new InstitutionBO();
			if (rmcInRealPropColl != null && !rmcInRealPropColl.isEmpty()) {
				final APP_IN_R_PROP_ASET_Cargo appRPropCargo = rmcInRealPropColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();

				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (indvSeqNum != null) {
					final Map institutionMap = institutionBO.loadInstitution(
							appNumber, indvSeqNum);
					final APP_IN_SPS_IMPOV_Collection appInSpsColl = (APP_IN_SPS_IMPOV_Collection) institutionMap
							.get("APP_IN_SPS_IMPOV_Collection");
					pageCollection.put("APP_IN_SPS_IMPOV_Collection",
							appInSpsColl);
					// Populate the Community Spouse Address flag
					pageCollection.put("SPOUSE_ADDR_FLG", Boolean
							.valueOf(aBRealPropertyDetailsBO
									.isValidSpouseAddress(appInSpsColl)));
					final String spouseSeqNum = institutionBO.isWifeOrHusband(
							appNumber, indvSeqNum);
					pageCollection.put("SPOUSE_SEQ_NUM", spouseSeqNum);
				}
			}

			// put the Current Individual Sequence Number in the pageCollection
			if (rmcInRealPropColl != null && !rmcInRealPropColl.isEmpty()) {
				final APP_IN_R_PROP_ASET_Cargo appRPropCargo = rmcInRealPropColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
						indvSeqNum);
				pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,
						indvSeqNum);
			}

			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("REAL_TYPE", categoryType);

			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_5211", indivCustCol);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			txnBean.setPageCollection(pageCollection);

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}
			// EDSP RMB ADDED FOR NEW PERSON
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);

			request.remove("loopingQuestion");
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadRealPropertyDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadRealPropertyDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadRealPropertyDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadRealPropertyDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store real property details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeRealPropertyDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeRealPropertyDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeRealPropertyDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			session.remove("Real_IndSeqBean");

			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final ARRPDValidator arrpdValidator = new ARRPDValidator();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			final SortedSet realPropProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);

			// get the BeforeCollection
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// get Details aset Collection and Cargo
			final APP_IN_R_PROP_ASET_Collection appInRPropAsetColl = (APP_IN_R_PROP_ASET_Collection) pageCollection
					.get("APP_IN_R_PROP_ASET_Collection");
			APP_IN_R_PROP_ASET_Cargo appInRPropAsetCargo = appInRPropAsetColl
					.getCargo(0);

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(realPropProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			// get the Aset collection from Before Collection
			final APP_IN_R_PROP_ASET_Collection appInRPropAsetBeforeColl = (APP_IN_R_PROP_ASET_Collection) beforePageColl
					.get("APP_IN_R_PROP_ASET_Collection");
			APP_IN_R_PROP_ASET_Cargo appInRPropAsetBeforeCargo = null;

			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");

			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			if (appInRPropAsetCargo.getChg_eff_dt() == null
					|| appInRPropAsetCargo.getChg_eff_dt().trim().length() == 0) {
				appInRPropAsetCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {

				appInRPropAsetCargo.setChg_eff_dt(appInRPropAsetCargo
						.getChg_eff_dt());
			}

			if (appInRPropAsetCargo.getRec_cplt_ind() == null) {
				appInRPropAsetCargo.setRec_cplt_ind(FwConstants.ZERO);
			}

			if (appInRPropAsetCargo.getProp_fmv_amt_ind() == null) {
				if (appInRPropAsetCargo.getProp_fmv_amt() != null
						&& FwConstants.EMPTY_STRING.equals(appInRPropAsetCargo
								.getProp_fmv_amt().trim())) {

					appInRPropAsetCargo.setProp_fmv_amt_ind("2");
				} else {
					appInRPropAsetCargo.setProp_fmv_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!FwConstants.EMPTY_STRING.equals(appInRPropAsetCargo
						.getProp_fmv_amt().trim())) {

					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}

			if (appInRPropAsetCargo.getProp_owe_amt_ind() == null) {
				if (appInRPropAsetCargo.getProp_owe_amt() != null
						&& FwConstants.EMPTY_STRING.equals(appInRPropAsetCargo
								.getProp_owe_amt().trim())) {

					appInRPropAsetCargo.setProp_owe_amt_ind("2");
				} else {
					appInRPropAsetCargo.setProp_owe_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!FwConstants.EMPTY_STRING.equals(appInRPropAsetCargo
						.getProp_owe_amt().trim())) {

					pageCollection.put("AmtAndIndChecked1", FwConstants.ONE);
				}
			}

			final String addrOption = (String) request.get("radioGroup");
			if (addrOption != null) {
				if ("hshlAddr".equals(addrOption)) {
					appInRPropAsetCargo.setProp_adr_ind(FwConstants.ONE);
				} else if ("spsAddr".equals(addrOption)) {
					appInRPropAsetCargo.setProp_adr_ind("2");
				} else if ("othAddr".equals(addrOption)) {
					appInRPropAsetCargo.setProp_adr_ind("3");
				}
			}

			if (appInRPropAsetCargo.getRes_sw() == null) {
				appInRPropAsetCargo.setRes_sw(FwConstants.SPACE);
			}

			if (appInRPropAsetCargo.getIntn_ret_sw() == null) {
				appInRPropAsetCargo.setIntn_ret_sw(FwConstants.SPACE);
			}

			if (appInRPropAsetCargo.getSps_live_sw() == null) {
				appInRPropAsetCargo.setSps_live_sw(FwConstants.SPACE);
			}
			if (appInRPropAsetCargo.getRlt_cd() == null) {
				appInRPropAsetCargo.setRlt_cd(FwConstants.SPACE);
			}
			if (appInRPropAsetCargo.getSale_agr_sw() == null) {
				appInRPropAsetCargo.setSale_agr_sw(FwConstants.SPACE);
			}

			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 3 lines Commented Code in
			 * this block
			 */

			if (appInRPropAsetCargo.getProp_l1_adr() == null) {
				appInRPropAsetCargo.setProp_l1_adr(FwConstants.SPACE);
			}

			if (appInRPropAsetCargo.getProp_l2_adr() == null) {
				appInRPropAsetCargo.setProp_l2_adr(FwConstants.SPACE);
			}

			if (appInRPropAsetCargo.getProp_city_adr() == null) {
				appInRPropAsetCargo.setProp_city_adr(FwConstants.SPACE);
			}
			if (appInRPropAsetCargo.getProp_sta_adr() == null) {
				appInRPropAsetCargo.setProp_sta_adr(FwConstants.SPACE);
			}

			if (appInRPropAsetCargo.getProp_zip_adr() == null) {
				appInRPropAsetCargo.setProp_zip_adr(FwConstants.SPACE);
			}

			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				appInRPropAsetCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				appInRPropAsetCargo.setJnt_own_resp(FwConstants.NO);
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean realPropertyDetailsUpdate = false;

			if (appInRPropAsetBeforeColl != null
					&& !appInRPropAsetBeforeColl.isEmpty()) {

				final int size = appInRPropAsetBeforeColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				appInRPropAsetBeforeCargo = aBRealPropertyDetailsBO
						.splitRealPropColl(appInRPropAsetBeforeColl,
								sourceAppIndicator);
				if (appInRPropAsetBeforeCargo == null
						&& AppConstants.RMC_END_RECORD_IND
								.equals(sourceAppIndicator)) {
					appInRPropAsetBeforeCargo = aBRealPropertyDetailsBO
							.splitRealPropColl(appInRPropAsetBeforeColl,
									AppConstants.CWW_RECORD_IND);
				}
				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& appInRPropAsetBeforeCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}
				if (appInRPropAsetBeforeCargo != null) {
					if (categorySeqDetailBean
							.getCategoryType()
							.equals(String
									.valueOf(IRMCResponseProfileManager.REAL_PROPERTY_ASSET_DETAILS))) {

						appInRPropAsetCargo
								.setProp_fmv_amt(appInRPropAsetBeforeCargo
										.getProp_fmv_amt());
						appInRPropAsetCargo
								.setProp_owe_amt(appInRPropAsetBeforeCargo
										.getProp_owe_amt());
						appInRPropAsetCargo
								.setChg_eff_dt(appInRPropAsetBeforeCargo
										.getChg_eff_dt());
						appInRPropAsetCargo.setEcp_id(appInRPropAsetBeforeCargo
								.getEcp_id());

					}
					appInRPropAsetCargo.setApp_num((String) session
							.get(AppConstants.APP_NUMBER));
					appInRPropAsetCargo
							.setSrc_app_ind(appInRPropAsetBeforeCargo
									.getSrc_app_ind());
					appInRPropAsetCargo
							.setIndv_seq_num(appInRPropAsetBeforeCargo
									.getIndv_seq_num());
					appInRPropAsetCargo
							.setReal_prop_aset_typ(appInRPropAsetBeforeCargo
									.getReal_prop_aset_typ());
					appInRPropAsetCargo.setSeq_num(appInRPropAsetBeforeCargo
							.getSeq_num());
					appInRPropAsetCargo
							.setRec_cplt_ind(appInRPropAsetBeforeCargo
									.getRec_cplt_ind());
					appInRPropAsetCargo.setEcp_id(appInRPropAsetBeforeCargo
							.getEcp_id());

					if ("E".equalsIgnoreCase(pageMode)) {

						appInRPropAsetCargo
								.setIndv_seq_num(appInRPropAsetBeforeCargo
										.getIndv_seq_num());
						appInRPropAsetCargo
								.setSrc_app_ind(appInRPropAsetBeforeCargo
										.getSrc_app_ind());
						appInRPropAsetCargo
								.setReal_prop_aset_typ(appInRPropAsetBeforeCargo
										.getReal_prop_aset_typ());
						appInRPropAsetCargo
								.setSeq_num(appInRPropAsetBeforeCargo
										.getSeq_num());

						appInRPropAsetCargo
								.setIntn_ret_sw(appInRPropAsetBeforeCargo
										.getIntn_ret_sw());
						appInRPropAsetCargo
								.setJnt_own_resp(appInRPropAsetBeforeCargo
										.getJnt_own_resp());
						appInRPropAsetCargo
								.setProp_adr_ind(appInRPropAsetBeforeCargo
										.getProp_adr_ind());
						appInRPropAsetCargo
								.setProp_city_adr(appInRPropAsetBeforeCargo
										.getProp_city_adr());
						appInRPropAsetCargo
								.setProp_fmv_amt(appInRPropAsetBeforeCargo
										.getProp_fmv_amt());
						appInRPropAsetCargo
								.setProp_fmv_amt_ind(appInRPropAsetBeforeCargo
										.getProp_fmv_amt_ind());
						appInRPropAsetCargo
								.setProp_owe_amt(appInRPropAsetBeforeCargo
										.getProp_owe_amt());
						appInRPropAsetCargo
								.setProp_owe_amt_ind(appInRPropAsetBeforeCargo
										.getProp_owe_amt_ind());
						appInRPropAsetCargo
								.setProp_l1_adr(appInRPropAsetBeforeCargo
										.getProp_l1_adr());
						appInRPropAsetCargo
								.setProp_l2_adr(appInRPropAsetBeforeCargo
										.getProp_l2_adr());
						appInRPropAsetCargo
								.setProp_sta_adr(appInRPropAsetBeforeCargo
										.getProp_sta_adr());
						appInRPropAsetCargo
								.setProp_zip_adr(appInRPropAsetBeforeCargo
										.getProp_zip_adr());
						appInRPropAsetCargo.setRes_sw(appInRPropAsetBeforeCargo
								.getRes_sw());
						appInRPropAsetCargo
								.setSale_agr_sw(appInRPropAsetBeforeCargo
										.getSale_agr_sw());
						appInRPropAsetCargo
								.setSps_live_sw(appInRPropAsetBeforeCargo
										.getSps_live_sw());

						appInRPropAsetCargo.setEcp_id(appInRPropAsetBeforeCargo
								.getEcp_id());
					}

					appInRPropAsetCargo.getAsset_end_dt();

					if (appInRPropAsetBeforeCargo.getAsset_end_dt() != null
							&& appInRPropAsetBeforeCargo.getAsset_end_dt()
									.length() > 10
							&& appInRPropAsetBeforeCargo.getAsset_end_dt()
									.charAt(4) == '-') {

						if (Date.valueOf(appInRPropAsetBeforeCargo
								.getAsset_end_dt()) == Date
								.valueOf(AppConstants.HIGH_DATE)
								&& appInRPropAsetCargo.getAsset_end_dt().trim()
										.length() == 0) {
							appInRPropAsetCargo
									.setAsset_end_dt(AppConstants.HIGH_DATE);
						}
					} else if (pageMode != null
							&& !AppConstants.REPORT_END_MODE.equals(pageMode)) {
						appInRPropAsetCargo.setAsset_end_dt(null);
					}
				} else {
					final APP_IN_R_PROP_ASET_Cargo beforeCargo = appInRPropAsetBeforeColl
							.getCargo(0);

					appInRPropAsetCargo.setEcp_id(beforeCargo.getEcp_id());
				}

				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
								&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
								&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
								&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}

				// check dirty
				appInRPropAsetCargo = (APP_IN_R_PROP_ASET_Cargo) isChanged(
						appInRPropAsetBeforeCargo, appInRPropAsetCargo);
				// EDSP RMC adding appnum,indvseqnum,seqnum and aset type
				appInRPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInRPropAsetCargo
						.setIndv_seq_num(String.valueOf(categorySeqDetailBean
								.getIndividualSequence()));
				// get the MAX seq number from data base

				appInRPropAsetCargo.setSeq_num(String.valueOf(seqNum));
				appInRPropAsetCargo.setReal_prop_aset_typ(categorySeqDetailBean
						.getCategoryType());
				appInRPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);

				appInRPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				appInRPropAsetCargo.setRowAction(recordInd);
				if (appInRPropAsetCargo.isDirty()) {
					realPropertyDetailsUpdate = true;
				}
			} else {

				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				appInRPropAsetCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				appInRPropAsetCargo
						.setIndv_seq_num(String.valueOf(categorySeqDetailBean
								.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = aBRealPropertyDetailsBO.getMaxSeqNumber(appNumber,
						indvSeqNum);
				seqNum = seqNum + 1;
				appInRPropAsetCargo.setSeq_num(String.valueOf(seqNum));
				if (appInRPropAsetCargo.getAsset_end_dt() != null
						&& appInRPropAsetCargo.getAsset_end_dt().length() > 10
						&& appInRPropAsetCargo.getAsset_end_dt().charAt(4) == '-') {
					if (Date.valueOf(appInRPropAsetCargo.getAsset_end_dt()) == Date
							.valueOf(AppConstants.HIGH_DATE)) {
						appInRPropAsetCargo.setAsset_end_dt(null);
					}

				} else if (pageMode != null
						&& !AppConstants.REPORT_END_MODE.equals(pageMode)) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines Commented
					 * Code in this block
					 */

					appInRPropAsetCargo.setAsset_end_dt(null);

				}
				appInRPropAsetCargo.setReal_prop_aset_typ(categorySeqDetailBean
						.getCategoryType());
				appInRPropAsetCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				appInRPropAsetCargo.setRowAction(recordInd);
				realPropertyDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
						.updateSequence(realPropProfile, null,
								categorySeqDetailBean.getIndividualSequence(),
								(short) seqNum,
								categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
								&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
								&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
								&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
			}

			beforePageColl.get(AppConstants.FIRST_NAME);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);

					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			if (backToMyAccess == null) {
				// [NTexon] [09/21/2015] Numa Canedo - Defect 20592
				// Real Estate Validations
				arrpdValidator.validateRealPropertyDetails(appInRPropAsetColl,
						beforePageColl, userEndInd, request);

				// [NTexon] [09/21/2015] Numa Canedo - Defect 20592
				// OwnerShip Percentaje validations
				arrpdValidator.validateJointOwnerInformation(appInJntOwnColl);

			}

			if (checkBackToMyAccessSelected(request)
					|| arrpdValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arrpdValidator.getMessageList());
				}

				request.put(FwConstants.MESSAGE_LIST,
						arrpdValidator.getMessageList());
				if (appInRPropAsetCargo != null) {
					appInRPropAsetCargo
							.setReal_prop_aset_typ((String) beforePageColl
									.get("REAL_TYPE"));
					if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
						appInRPropAsetCargo.setJnt_own_resp(FwConstants.YES);
					}
				}
				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				// put the first Name into pageCollection to avoid null pointer
				// in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforePageColl.get(AppConstants.FIRST_NAME));

				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforePageColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("APP_IN_R_PROP_ASET_Collection",
						appInRPropAsetColl);
				pageCollection
						.put("APP_IN_JNT_OWN_Collection", appInJntOwnColl);
				pageCollection.put("APP_RGST_Collection",
						beforePageColl.get("APP_RGST_Collection"));
				pageCollection.put("APP_IN_SPS_IMPOV_Collection",
						beforePageColl.get("APP_IN_SPS_IMPOV_Collection"));
				pageCollection.put("REG_ADDR_FLG",
						beforePageColl.get("REG_ADDR_FLG"));
				pageCollection.put("SPOUSE_ADDR_FLG",
						beforePageColl.get("SPOUSE_ADDR_FLG"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforePageColl.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put("ADDR_FLG", "TRUE");
				pageCollection.put("REAL_TYPE", beforeColl.get("REAL_TYPE"));

				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforePageColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_REAL")) {
					pageCollection.put("SEC_REAL", beforeColl.get("SEC_REAL"));
				}
				if (beforeColl.containsKey("SEC_JNT")) {
					pageCollection.put("SEC_JNT", beforeColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				pageCollection.put("FST_REAL", appInRPropAsetCargo);
				return;
			}

			if (appInRPropAsetCargo.getAsset_acquired_dt() != null
					&& appInRPropAsetCargo.getAsset_acquired_dt().trim()
							.length() != 0
					&& !AppConstants.HIGH_DATE.equals(appInRPropAsetCargo
							.getAsset_acquired_dt())) {
				if (appInRPropAsetCargo.getAsset_acquired_dt().length() == 10
						&& appInRPropAsetCargo.getAsset_acquired_dt().charAt(2) == '/') {
					final StringBuilder dateConverter = new StringBuilder();
					final String sAppDate = appInRPropAsetCargo
							.getAsset_acquired_dt();
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
							.append(sAppDate.substring(0, 2)).append("-")
							.append(sAppDate.substring(3, 5));
					appInRPropAsetCargo.setAsset_acquired_dt(dateConverter
							.toString());
				}
			}

			// end screen
			if (FwConstants.YES.equals(appInRPropAsetCargo
					.getIndividual_live_ind())) {
				if(appInRPropAsetCargo.getProp_l1_adr()==null){
					appInRPropAsetCargo.setProp_l1_adr(FwConstants.EMPTY_STRING);
				}
				if(appInRPropAsetCargo.getProp_l2_adr()==null){
					appInRPropAsetCargo.setProp_l2_adr(FwConstants.EMPTY_STRING);
				}
				if(appInRPropAsetCargo.getProp_city_adr()==null){
					appInRPropAsetCargo.setProp_city_adr(FwConstants.EMPTY_STRING);
				}
				if(appInRPropAsetCargo.getProp_sta_adr()==null){
					appInRPropAsetCargo.setProp_sta_adr(FwConstants.EMPTY_STRING);
				}
				if(appInRPropAsetCargo.getProp_zip_adr()==null){
					appInRPropAsetCargo.setProp_zip_adr(FwConstants.EMPTY_STRING);
				}
				if(appInRPropAsetCargo.getPropAddrZip4()==null){
					appInRPropAsetCargo.setPropAddrZip4(FwConstants.EMPTY_STRING);
				}							
			}

			if (addrOption == null) {
				appInRPropAsetCargo.setProp_adr_ind(FwConstants.ZERO);
			}
			// If we select Household address or the Spousal address option
			// populate here
			if (addrOption != null) {
				if ("hshlAddr".equals(addrOption)) {
					final APP_RGST_Collection appRgstColl = (APP_RGST_Collection) beforePageColl
							.get("APP_RGST_Collection");
					if (appRgstColl != null && !appRgstColl.isEmpty()) {
						final APP_RGST_Cargo appRgstCargo = appRgstColl
								.getCargo(0);
						appInRPropAsetCargo.setProp_l1_adr(appRgstCargo
								.getHshl_l1_adr());
						appInRPropAsetCargo.setProp_l2_adr(appRgstCargo
								.getHshl_l2_adr());
						appInRPropAsetCargo.setProp_city_adr(appRgstCargo
								.getHshl_city_adr());
						appInRPropAsetCargo.setProp_sta_adr(appRgstCargo
								.getHshl_sta_adr());
						appInRPropAsetCargo.setProp_zip_adr(appRgstCargo
								.getHshl_zip_adr());
					}
				} else if ("spsAddr".equals(addrOption)) {
					final APP_IN_SPS_IMPOV_Collection appInSpsColl = (APP_IN_SPS_IMPOV_Collection) beforePageColl
							.get("APP_IN_SPS_IMPOV_Collection");
					if (appInSpsColl != null && !appInSpsColl.isEmpty()) {
						final APP_IN_SPS_IMPOV_Cargo appInSpsCargo = appInSpsColl
								.getCargo(0);
						appInRPropAsetCargo.setProp_l1_adr(appInSpsCargo
								.getSps_l1_adr());
						appInRPropAsetCargo.setProp_l2_adr(appInSpsCargo
								.getSps_l2_adr());
						appInRPropAsetCargo.setProp_city_adr(appInSpsCargo
								.getSps_city_adr());
						appInRPropAsetCargo.setProp_sta_adr(appInSpsCargo
								.getSps_sta_adr());
						appInRPropAsetCargo.setProp_zip_adr(appInSpsCargo
								.getSps_zip_adr());
					}
				}
			}
			appInRPropAsetCargo.setRec_cplt_ind(FwConstants.ONE);
			if (AppConstants.REPORT_END_MODE.equals(pageMode)) {
				if (appInRPropAsetCargo.getAsset_end_dt().length() == 10
						&& appInRPropAsetCargo.getAsset_end_dt().charAt(2) == '/') {
					final StringBuilder dateConverter = new StringBuilder();
					final String sAppDate = appInRPropAsetCargo
							.getAsset_end_dt();
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
							.append(sAppDate.substring(0, 2)).append("-")
							.append(sAppDate.substring(3, 5));
					appInRPropAsetCargo.setAsset_end_dt(dateConverter
							.toString());
				}
			}
			if (realPropertyDetailsUpdate) {

				if (FwConstants.ROWACTION_INSERT.equals(appInRPropAsetCargo
						.getRowAction())) {

					aBRealPropertyDetailsBO
							.insertExistingRealPropertyDetails(appInRPropAsetColl);

				} else {
					aBRealPropertyDetailsBO
							.storeRealPropertyDetails(appInRPropAsetColl);
				}
			}

			appInRPropAsetCargo = appInRPropAsetColl.getCargo(0);
			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;
			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (appInJntBeforeColl != null && !appInJntBeforeColl.isEmpty()) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);
						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(appInRPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
									.setJnt_own_seq_num(appInRPropAsetCargo
											.getSeq_num());
							appInJntOwnCargo
									.setIndv_seq_num(appInRPropAsetCargo
											.getIndv_seq_num());
							appInJntOwnCargo
									.setAset_sub_typ(appInRPropAsetCargo
											.getReal_prop_aset_typ());
							appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
											.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
											.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
										.setSeq_num(appInJntCwMatchCargo
												.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
									.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
												.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
												.equals(appInJntOwnBeforeCargo
														.getSeq_num())
										&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
										&& appInJntOwnCargo.getAset_sub_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_sub_typ())
										&& appInJntOwnCargo
												.getJnt_own_seq_num()
												.equals(appInJntOwnBeforeCargo
														.getJnt_own_seq_num())) {
									appInJntOwnCargo
											.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);

						if (appInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
											.setApp_num(appInRPropAsetCargo
													.getApp_num());
									appInJntOwnCargo
											.setJnt_own_seq_num(appInRPropAsetCargo
													.getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
											.setIndv_seq_num(appInRPropAsetCargo
													.getIndv_seq_num());
									appInJntOwnCargo
											.setAset_sub_typ(appInRPropAsetCargo
													.getReal_prop_aset_typ());
									appInJntOwnCargo
											.setAset_typ(AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
													.getJnt_own_fst_nam()
													.isEmpty()) {
										appInJntOwnCargo
												.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
													.getJnt_own_last_nam()
													.isEmpty()) {
										appInJntOwnCargo
												.setJnt_own_last_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_share() == null) {
										appInJntOwnCargo
												.setJnt_own_share(FwConstants.ZERO);
									}
									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
												.setSeq_num(appInJntOwnBeforeCargo
														.getSeq_num());
									}
									appInJntOwnCargo
											.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										appInJntOwnCargo
												.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
												.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(appInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
													.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
												.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
												.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInJntOwnCargo.setApp_num(appInRPropAsetCargo
									.getApp_num());
							appInJntOwnCargo
									.setJnt_own_seq_num(appInRPropAsetCargo
											.getSeq_num());
							appInJntOwnCargo
									.setIndv_seq_num(appInRPropAsetCargo
											.getIndv_seq_num());
							appInJntOwnCargo
									.setAset_sub_typ(appInRPropAsetCargo
											.getReal_prop_aset_typ());
							appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
											.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
											.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
												.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
												.equals(appInJntOwnBeforeCargo
														.getSeq_num())
										&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
										&& appInJntOwnCargo.getAset_sub_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_sub_typ())
										&& appInJntOwnCargo
												.getJnt_own_seq_num()
												.equals(appInJntOwnBeforeCargo
														.getJnt_own_seq_num())
										&& appInJntOwnCargo.getSrc_app_ind() != null
										&& appInJntOwnCargo.getSrc_app_ind()
												.equals(appInJntOwnBeforeCargo
														.getSrc_app_ind())) {
									appInJntOwnCargo
											.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
											.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(appInRPropAsetCargo
								.getApp_num());
						appInJntOwnCargo.setJnt_own_seq_num(appInRPropAsetCargo
								.getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(appInRPropAsetCargo
								.getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(appInRPropAsetCargo
								.getReal_prop_aset_typ());
						appInJntOwnCargo
								.setAset_typ(AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInJntOwnCargo
										.getJnt_indv_seq_num())) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
										.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
										.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (FwConstants.EMPTY_STRING.equals(appInJntOwnCargo
								.getJnt_own_share())) {
							appInJntOwnCargo.setJnt_own_share(FwConstants.ZERO);
						}
						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines
						 * Commented Code in this block
						 */

						appInJntOwnCargo
								.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						appInJntOwnCargo
								.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}
			if (!appInJntOwnNewColl.isEmpty()) {
				aBRealPropertyDetailsBO
						.storeJointOwnerDetails(appInJntOwnNewColl);
			}

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;
				// Insert into APP_IN_EMPL and APP_IN_EMPL_A_WAGE

				categorySelectionProfileManager.insertSequenceDetail(
						realPropProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			}

			// now i need to update the rmc_in_prfl if looping question is null

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));

				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
							.makeComplete(
									rmcResponseProfileManager
											.getResponseByType(
													IRMCResponseProfileManager.REAL_PROPERTY_ASSET_DETAILS,
													categorySeqDetailBean
															.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager.makeComplete(
							IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
							rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					realPropProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
				categorySelectionProfileManager.makeSequenceDetailComplete(
						realPropProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}

			if (categorySelectionProfileManager
					.areAllSequencesComplete(realPropProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				// Make required the RMB Asset Summary page
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
						.getNextSequenceDetail(realPropProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeRealPropertyDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeRealPropertyDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeRealPropertyDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeRealPropertyDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load burial asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadBurialAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadBurialAssetTypeSelection() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadBurialAssetTypeSelection:Start");
			final Map request = txnBean.getRequest();
			// check whether the user have access to the current page
			// check whether user owns this application
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			// EDSP Temp

			loadTypes(txnBean, IRMCResponseProfileManager.OTHR_ASET_BURIAL,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadBurialAssetTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadBurialAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadBurialAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadBurialAssetTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store burial asset type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeBurialAssetTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeBurialAssetTypeSelection() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeBurialAssetTypeSelection:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			// Initialize ValidationBO
			final ARBATValidator validateBO = new ARBATValidator();
			final ARHousingTypeBO housingTypeBO = new ARHousingTypeBO();

			// Initialize messageList
			FwMessageList validateInfo = null;

			// Initialize short field names

			/**
			 * short[] fieldName =
			 * {IRMCResponseProfileManager.BUR_AST_INSURANCE,
			 * IRMCResponseProfileManager.BUR_AST_PLOT,
			 * IRMCResponseProfileManager.BUR_AST_IRREVOCABLE,
			 * IRMCResponseProfileManager.BUR_AST_MAUSOLEUM,
			 * IRMCResponseProfileManager.BUR_AST_OTHER,
			 * IRMCResponseProfileManager.BUR_AST_REVOCABLE,
			 * IRMCResponseProfileManager.BUR_AST_CASKET,
			 * IRMCResponseProfileManager.BUR_AST_VAULT };
			 */

			final short[] fieldName = {
					IRMCResponseProfileManager.BUR_AST_INSURANCE,
					IRMCResponseProfileManager.BUR_AST_PLOT,
					IRMCResponseProfileManager.BUR_AST_IRREVOCABLE,
					IRMCResponseProfileManager.BUR_AST_CASKET };

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ARBAT Burial Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARBAT_FIRST_NAME_LIST");

			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARBAT_NO_ONE_COLLECTION");

			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARBAT_RMC_IN_PRFL_COLLECTION");

			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			final NO_ONE_Collection noOneOtherIncColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = housingTypeBO.compareAppInPrflColl(
					rmcInPrflBeforeColl, pageColl);

			// Get NoOneCollection
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = housingTypeBO.compareNoOneCollection(
					noOneBeforeColl, noOneOtherIncColl);

			final Map httpSessionMap = (Map) session
					.get(FwConstants.HTTP_SESSION);
			httpSessionMap.get(AppConstants.LANGUAGE);

			validateInfo = validateBO.validateNoOneOtherBurialType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList);
			if (validateInfo != null && validateBO.hasMessages()) {
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARBAT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARBAT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARBAT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}
			/*
			 * VG SONAR Cleanup - 08/27/2015 Changed Commented code block to
			 * javadoc
			 */
			/**
			 * // Run Validation /* validateInfo =
			 * validateBO.validateBurialType(rmcInPrflCollRequest
			 * ,beforeFirstNamesList,language); if(validateBO.hasMessages()) {
			 * String reqWarningMsgs =
			 * (String)request.get(FwConstants.WARNING_MSG_DETAILS);
			 * if(!this.checkForWarningMesgs(reqWarningMsgs,
			 * validateBO.getMessageList())){ //Translate Profile Response After
			 * Validation rmcResponseProfileManager.
			 * translateProfileResponseAfterValidation
			 * (rmcInPrflCollRequest,rmcInPrflCollSession,fieldName);
			 *
			 * request.put(FwConstants.MESSAGE_LIST,validateInfo);
			 * pageCollection
			 * .put("ARBAT_RMC_IN_PRFL_COLLECTION",rmcInPrflCollRequest);
			 *
			 * pageCollection.put("ARBAT_FIRST_NAME_LIST",beforeFirstNamesList);
			 * pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
			 * beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
			 * txnBean.setRequest(request);
			 * txnBean.setPageCollection(pageCollection); return; } }
			 */

			// Initialize the colSize
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 4;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getOther_asset_burial_resp().charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);

					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {

						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getBury_aset_ins_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getBury_aset_plt_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getBury_aset_rbt_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getBury_aset_oth_resp());

						// session

						sesResponse.add(rmcInPrflBeforeCargo
								.getBury_aset_ins_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getBury_aset_plt_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getBury_aset_rbt_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getBury_aset_oth_resp());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus))

							{
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.OTHR_ASET_BURIAL);

						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getBury_aset_ins_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getBury_aset_plt_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getBury_aset_rbt_resp()
										.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getBury_aset_oth_resp()
										.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.OTHR_ASET_BURIAL,
									rmcInPrflBeforeCargo, true);

							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARRPT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getBury_aset_ins_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getBury_aset_plt_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getBury_aset_rbt_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														||

														rmcInPrflBeforeCargo
														.getBury_aset_oth_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}
			}

			// persist the data
			boolean burialAssetPageRequired = false;
			String asetIns = null;
			String asetPlt = null;
			String asetIbt = null;
			String asetC = null;

			final int persistArraySize = persistArray.size();
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = { cargo.getBury_aset_ins_resp(),
						cargo.getBury_aset_plt_resp(),
						cargo.getBury_aset_rbt_resp(),
						cargo.getBury_aset_oth_resp() };
				// EDSP temp
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				asetIns = cargo.getBury_aset_ins_resp();
				asetIbt = cargo.getBury_aset_rbt_resp();
				asetC = cargo.getBury_aset_oth_resp();
				// EDSP temp
				asetPlt = cargo.getBury_aset_plt_resp();

				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1/2,1,1 lines Commented
				 * Code in this block
				 */

				if ("R".equalsIgnoreCase(asetIns)
						|| "R".equalsIgnoreCase(asetPlt)
						|| "R".equalsIgnoreCase(asetIbt) || "R".equals(asetC)) {
					burialAssetPageRequired = true;
				}

			}

			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBAT",
						driverArray, appNum);
			}

			// Run Dirty Logic on Driver

			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			if (burialAssetPageRequired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARBAD", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_BURIAL_ASSET_PRFL)) {
				// AbsoluteNotRequired will set the page status to 'Not
				// required'. In such case if
				// there were any employments that were edited or added
				// (currently in complete status)
				// cannot be revisited when clicking back.
				// Use of NotRequired will mark a visitAgain to Complete, that
				// way any edited or added will be displayed when Back is
				// clicked.

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String houseDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARBAD", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE.equals(houseDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(houseDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARBAD", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARBAD", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBAD",
						driverArray, appNum);
			}

			if (!burialAssetPageRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeBurialAssetTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeBurialAssetTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeBurialAssetTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeBurialAssetTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load burial asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeCategorySelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadBurialAssetDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = FwConstants.EMPTY_STRING;
			request.put("loopingQuestion", FwConstants.NO);

			APP_IN_BURY_ASET_Collection rmcInBurialColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TBAS", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map burialPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				burialPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, burialPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, burialPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final BurialAssetBO abBurialAsetBO = new BurialAssetBO();
			final short[] responseNewType = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_BURIAL,
					IRMCResponseProfileManager.BUR_AST_CASKET,
					IRMCResponseProfileManager.BUR_AST_INSURANCE,
					IRMCResponseProfileManager.BUR_AST_PLOT,
					IRMCResponseProfileManager.BUR_AST_IRREVOCABLE };

			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			SortedSet burialProfile = null;
			if (!pageId.equals(previousPageId)) {
				session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
				burialProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseNewType);
				if ("AROAS".equals(previousPageId)
						&& request.containsKey("addNew")
						&& burialProfile.isEmpty()) {
					final String indvSeq = request.get("firstName_burial") != null ? (String) request
							.get("firstName_burial") : FwConstants.EMPTY_STRING;
							for (int i = 0; i < rmcInPrflColl.size(); i++) {
								final RMC_IN_PRFL_Cargo cargo = rmcInPrflColl
										.getCargo(i);
								if (indvSeq != null
										&& indvSeq.equals(cargo.getIndv_seq_num())) {
									cargo.setOther_asset_burial_resp("A");
								}
							}
				}
				if (pageStatus != FwConstants.DRIVER_REQUIRED
						& !request.containsKey("addNew")) {
					APP_IN_BURY_ASET_Collection newBurialColl = abBurialAsetBO
							.loadBurialAssetDetails(appNumber);
					newBurialColl = abBurialAsetBO.splitBurColl(newBurialColl,
							AppConstants.RMC_NEW_RECORD_IND);
					if (newBurialColl != null && !newBurialColl.isEmpty()) {
						APP_IN_BURY_ASET_Cargo rmcInBurialCargo = null;
						final int newUtilityCollSize = newBurialColl.size();
						for (int i = 0; i < newUtilityCollSize; i++) {
							rmcInBurialCargo = newBurialColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									burialProfile, null, null,
									Short.parseShort(rmcInBurialCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInBurialCargo
													.getSeq_num()),
													rmcInBurialCargo.getBury_aset_typ());
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(burialProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(burialProfile);
				}

				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				burialProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}

			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}

			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Burial_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								burialProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(burialProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							burialProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						final short[] responseArray = new short[] { IRMCResponseProfileManager.OTHR_ASET_BURIAL };
						rmcResponseProfileManager.makeRequired(responseArray,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(burialProfile, appNumber,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(burialProfile, null,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(burialProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_BURIAL_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Burial_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					burialProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(burialProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(burialProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			rmcInBurialColl = abBurialAsetBO.loadIndividualBurialAsetDetails(
					appNumber, indvSeqNum, categorySeqNum);
			pageCollection.put("APP_IN_BURY_ASET_Collection", rmcInBurialColl);

			APP_IN_BURY_ASET_Cargo cwwUtilityCargo = abBurialAsetBO
					.splitBurialColl(rmcInBurialColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwUtilityCargo == null) {
				cwwUtilityCargo = new APP_IN_BURY_ASET_Cargo();
			}
			pageCollection.put("SEC_BURIAL",
					abBurialAsetBO.settingBurialDefaultValues(cwwUtilityCargo));
			APP_IN_BURY_ASET_Cargo rmcUtilityCargo = abBurialAsetBO
					.splitBurialColl(rmcInBurialColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
			if (rmcUtilityCargo != null) {
				pageCollection.put("FST_BURIAL", abBurialAsetBO
						.settingBurialDefaultValues(rmcUtilityCargo));
			} else {
				rmcUtilityCargo = abBurialAsetBO.splitBurialColl(
						rmcInBurialColl, AppConstants.RMC_END_RECORD_IND);
				if (rmcUtilityCargo != null) {
					pageCollection.put("FST_BURIAL", abBurialAsetBO
							.settingBurialDefaultValues(rmcUtilityCargo));
				} else {
					rmcUtilityCargo = abBurialAsetBO.splitBurialColl(
							rmcInBurialColl, AppConstants.RMC_NEW_RECORD_IND);
					if (rmcUtilityCargo != null) {
						pageCollection.put("FST_BURIAL", abBurialAsetBO
								.settingBurialDefaultValues(rmcUtilityCargo));
					} else {
						pageCollection.put("FST_BURIAL", abBurialAsetBO
								.settingBurialDefaultValues(cwwUtilityCargo));

					}
				}
			}

			if (rmcInBurialColl != null && !rmcInBurialColl.isEmpty()) {
				final APP_IN_BURY_ASET_Cargo appInBurialCargo = rmcInBurialColl
						.getCargo(0);
				srcAppInd = appInBurialCargo.getSrc_app_ind();
			}
			if (("CW".equalsIgnoreCase(srcAppInd) || "RM"
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = "C";
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = "E";
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = "E";
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& "RM".equalsIgnoreCase(srcAppInd)
						|| "CW".equalsIgnoreCase(srcAppInd)) {
					pageMode = "C";
				} else {
					pageMode = FwConstants.NO;
				}
			} else if (!("C".equalsIgnoreCase(pageMode) || "E"
					.equalsIgnoreCase(pageMode))) {
				pageMode = FwConstants.NO;
			}
			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			if (rmcInBurialColl != null && !rmcInBurialColl.isEmpty()) {
				final APP_IN_BURY_ASET_Cargo appRPropCargo = rmcInBurialColl
						.getCargo(0);
				srcAppInd = appRPropCargo.getSrc_app_ind();
				final String subType = appRPropCargo.getBury_aset_typ();
				indvSeqNum = appRPropCargo.getIndv_seq_num();
				if (appRPropCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = abBurialAsetBO
							.loadIndividualJointOwnerDetails((String) session
									.get(AppConstants.APP_NUMBER), indvSeqNum,
									AppConstants.JOINT_OWNER_TYPE_BURIAL_ASSET,
									subType, appRPropCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(
											appInJntCol,
											AppConstants.RMC_MODIFIED_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								rnJointCargo = lifeInsuranceTypeBO
										.getPageJointCollection(cwwJointCargo,
												rnJointCargo);
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(appInJntCol,
												AppConstants.RMC_END_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {

									pageCollection
									.put("FST_JNT", cwwJointCargo);
								}

							}
						}
					}
				}
			}
			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);

			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("BURIAL_TYPE", categoryType);

			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			txnBean.setPageCollection(pageCollection);

			INDIVIDUAL_Custom_Collection indivCustCol = null;
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_5211", indivCustCol);

			final APP_IN_BURY_ASET_Collection buryAsetColl = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");

			if (buryAsetColl != null && !buryAsetColl.isEmpty()) {
				final APP_IN_BURY_ASET_Cargo buryAsetCargo = buryAsetColl
						.getCargo(0);
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,
						buryAsetCargo.getIndv_seq_num());
			}

			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			request.remove("loopingQuestion");
			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadBurialAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store burial asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeBurialAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeBurialAssetDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforePageColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			String changeEffDate = null;
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			session.remove("Burial_IndSeqBean");
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("FST_JNT");

			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final SortedSet burialAssetsProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			// get Details Collection and Cargo
			final APP_IN_BURY_ASET_Collection rmcInBurialCollection = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");
			APP_IN_BURY_ASET_Cargo rmcInBurialCargo = rmcInBurialCollection
					.getCargo(0);

			boolean amtEntered = false;

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(burialAssetsProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final BurialAssetBO burialAssetBO = new BurialAssetBO();
			final ARBADValidator arbadValidator = new ARBADValidator();

			// Run Validations
			String jsEnabled = FwConstants.YES;
			final Map sessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
			if (sessionMap != null) {
				if (sessionMap.get(FwConstants.JS_ENABLED) != null) {
					jsEnabled = (String) sessionMap.get(FwConstants.JS_ENABLED);
				}
			}

			final APP_IN_BURY_ASET_Collection beforeBurialColl = (APP_IN_BURY_ASET_Collection) beforeColl
					.get("APP_IN_BURY_ASET_Collection");
			APP_IN_BURY_ASET_Cargo beforeBurialCargo = null;

			rmcInBurialCargo.setApp_num(appNumber);
			if (rmcInBurialCargo.getChg_eff_dt() == null
					|| rmcInBurialCargo.getChg_eff_dt().trim().length() == 0) {
				rmcInBurialCargo.setChg_eff_dt(AppConstants.HIGH_DATE);
			} else {

				rmcInBurialCargo
				.setChg_eff_dt(rmcInBurialCargo.getChg_eff_dt());
			}

			if (rmcInBurialCargo.getRec_cplt_ind() == null) {
				rmcInBurialCargo.setRec_cplt_ind(FwConstants.SPACE);
			}

			if (rmcInBurialCargo.getBury_aset_amt_ind() == null
					|| rmcInBurialCargo.getBury_aset_amt_ind().trim().length() == 0) {
				if (rmcInBurialCargo.getBury_aset_amt() == null
						|| rmcInBurialCargo.getBury_aset_amt().trim().length() == 0) {

					rmcInBurialCargo.setBury_aset_amt_ind("2");
				} else {
					rmcInBurialCargo.setBury_aset_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInBurialCargo.getBury_aset_amt() == null || rmcInBurialCargo
						.getBury_aset_amt().trim().length() == 0)) {

					amtEntered = true;
					pageCollection.put("AmtAndIndChecked", FwConstants.ONE);
				}
			}

			if (rmcInBurialCargo.getBury_aset_typ() == null) {
				rmcInBurialCargo.setBury_aset_typ(FwConstants.SPACE);
			}

			if (request.get("relation") != null) {
				final String relation = (String) request.get("relation");
				if (!FwConstants.DEFAULT_DROPDOWN_SEL.equals(relation)) {
					rmcInBurialCargo.setBury_aset_rlt_cd(relation);
				}
			}

			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);
					if (jntOwnCargo.getJnt_indv_seq_num() != null
							&& FwConstants.ZERO.equals(jntOwnCargo
									.getJnt_indv_seq_num())
									&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
									.getJnt_own_fst_nam().trim().length() == 0)
									&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
									.getJnt_own_last_nam().trim().length() == 0)
									&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
									.getOtsd_ind().trim().length() == 0)) {
						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}

			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				rmcInBurialCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				rmcInBurialCargo.setJnt_own_resp(FwConstants.NO);
			}

			if (rmcInBurialCargo.getFor_indv_seq_num() == null) {
				rmcInBurialCargo.setFor_indv_seq_num("99");
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean burialDetailsUpdate = false;

			if (beforeBurialColl != null && !beforeBurialColl.isEmpty()) {

				final int size = beforeBurialColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if ("E".equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (FwConstants.NO.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}
				beforeBurialCargo = burialAssetBO.splitBurialColl(
						beforeBurialColl, sourceAppIndicator);

				if (beforeBurialCargo == null
						&& AppConstants.RMC_END_RECORD_IND
						.equals(sourceAppIndicator)) {
					beforeBurialCargo = burialAssetBO.splitBurialColl(
							beforeBurialColl, AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {

					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeBurialCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeBurialCargo != null) {
					rmcInBurialCargo.setSrc_app_ind(beforeBurialCargo
							.getSrc_app_ind());
					rmcInBurialCargo.setIndv_seq_num(beforeBurialCargo
							.getIndv_seq_num());
					rmcInBurialCargo.setBury_aset_typ(beforeBurialCargo
							.getBury_aset_typ());
					rmcInBurialCargo.setSeq_num(beforeBurialCargo.getSeq_num());
					rmcInBurialCargo.setRec_cplt_ind(beforeBurialCargo
							.getRec_cplt_ind());
					rmcInBurialCargo.setEcp_id(beforeBurialCargo.getEcp_id());

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInBurialCargo.setBury_aset_typ(beforeBurialCargo
								.getBury_aset_typ());
						rmcInBurialCargo.setBury_aset_rlt_cd(beforeBurialCargo
								.getBury_aset_rlt_cd());
						rmcInBurialCargo.setBury_aset_amt(beforeBurialCargo
								.getBury_aset_amt());
						rmcInBurialCargo.setBury_aset_amt_ind(beforeBurialCargo
								.getBury_aset_amt_ind());
						rmcInBurialCargo.setBurial_resource_type(beforeBurialCargo.getBurial_resource_type());

					}

					changeEffDate = rmcInBurialCargo.getChg_eff_dt();
					if (beforeBurialCargo.getChg_eff_dt() != null
							&& beforeBurialCargo.getChg_eff_dt().trim()
							.length() != 0
							&& Date.valueOf(beforeBurialCargo.getChg_eff_dt()) == Date
							.valueOf(AppConstants.HIGH_DATE)
							&& rmcInBurialCargo.getChg_eff_dt().trim().length() == 0) {
						rmcInBurialCargo.setChg_eff_dt(beforeBurialCargo
								.getChg_eff_dt());
					}
				} else {
					final APP_IN_BURY_ASET_Cargo beforeCargo = beforeBurialColl
							.getCargo(0);
					rmcInBurialCargo.setEcp_id(beforeCargo.getEcp_id());
				}

				// check dirty
				rmcInBurialCargo = (APP_IN_BURY_ASET_Cargo) isChanged(
						beforeBurialCargo, rmcInBurialCargo);
				rmcInBurialCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				rmcInBurialCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				rmcInBurialCargo.setSeq_num(String.valueOf(seqNum));
				rmcInBurialCargo.setBury_aset_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInBurialCargo.setChg_eff_dt(changeEffDate);
				rmcInBurialCargo.setRec_cplt_ind(FwConstants.ONE);
				rmcInBurialCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInBurialCargo.setRowAction(recordInd);
				if (rmcInBurialCargo.isDirty()) {
					burialDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInBurialCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = burialAssetBO.getMaxSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcInBurialCargo.setSeq_num(String.valueOf(seqNum));
				rmcInBurialCargo.setBury_aset_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInBurialCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInBurialCargo.setRowAction(recordInd);
				burialDetailsUpdate = true;
				categorySelectionProfileManager
				.updateSequence(burialAssetsProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
			}
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);
					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			if (backToMyAccess == null) {
				arbadValidator.validateBurialAssetDetails(
						rmcInBurialCollection,
						(String) beforeColl.get(AppConstants.FIRST_NAME),
						rmcInBurialCargo.getBury_aset_amt_ind(), amtEntered,
						jsEnabled, userEndInd, peopleHandler, request,
						beforeColl);
				arbadValidator.validateJointOwnerInformation(appInJntOwnColl,
						jsEnabled);

			}

			if (checkBackToMyAccessSelected(request)
					|| arbadValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arbadValidator.getMessageList());
				}

				if (rmcInBurialCargo != null) {
					rmcInBurialCargo.setBury_aset_typ((String) beforeColl
							.get("BURIAL_TYPE"));
					if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
						rmcInBurialCargo.setJnt_own_resp(FwConstants.YES);
					}
				}
				pageCollection
				.put("BURIAL_TYPE", beforeColl.get("BURIAL_TYPE"));
				pageCollection.put("PEOPLE_5211",
						beforePageColl.get("PEOPLE_5211"));
				pageCollection.put("APP_IN_BURY_ASET_Collection",
						rmcInBurialCollection);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_BURIAL")) {
					pageCollection.put("SEC_BURIAL",
							beforeColl.get("SEC_BURIAL"));
				}
				if (beforeColl.containsKey("SEC_JNT")) {
					pageCollection.put("SEC_JNT", beforeColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				pageCollection.put("FST_BURIAL", rmcInBurialCargo);
				return;
			}

			if (burialDetailsUpdate) {
				if (FwConstants.ROWACTION_INSERT.equals(rmcInBurialCargo
						.getRowAction())) {
					burialAssetBO.insertExistingDetails(rmcInBurialCollection);
				} else {
					burialAssetBO
					.storeBurialAssetDetails(rmcInBurialCollection);
				}
			}

			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);
					if (jntOwnCargo.getJnt_indv_seq_num() != null
							&& FwConstants.ZERO.equals(jntOwnCargo
									.getJnt_indv_seq_num())
									&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
									.getJnt_own_fst_nam().trim().length() == 0)
									&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
									.getJnt_own_last_nam().trim().length() == 0)
									&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
									.getOtsd_ind().trim().length() == 0)) {
						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);
					if (jntOwnCargo.getJnt_own_share() == null
							|| jntOwnCargo.getJnt_own_share().trim().length() == 0) {
						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}

				}
			}

			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforePageColl
					.get("SEC_JNT");

			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();

			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// user pressed back and the before collection is not null delete it
			// else update it.
			if (appInJntBeforeColl != null) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);

						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(rmcInBurialCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInBurialCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(rmcInBurialCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(rmcInBurialCargo
									.getBury_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_BURIAL_ASSET);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
								/*
								 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
								 * Commented Code in this block
								 */
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
							appInJntOwnCargo.setEcp_id(appInJntCwMatchCargo
									.getEcp_id());

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);

						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2,2 lines
						 * Commented Code in this block
						 */

						if (appInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
									.setApp_num(rmcInBurialCargo
											.getApp_num());
									appInJntOwnCargo
									.setJnt_own_seq_num(rmcInBurialCargo
											.getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
									.setIndv_seq_num(rmcInBurialCargo
											.getIndv_seq_num());
									appInJntOwnCargo
									.setAset_sub_typ(rmcInBurialCargo
											.getBury_aset_typ());
									appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_BURIAL_ASSET);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_last_nam(null);
									}

									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									appInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnCargo
									.setEcp_id(appInJntOwnBeforeCargo
											.getEcp_id());
									appInJntOwnNewColl.add(appInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							final APP_IN_JNT_OWN_Cargo beforeCargo = appInJntBeforeColl
									.getCargo(0);
							appInJntOwnCargo.setEcp_id(beforeCargo.getEcp_id());
							appInJntOwnCargo.setApp_num(rmcInBurialCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInBurialCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(rmcInBurialCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(rmcInBurialCargo
									.getBury_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_BURIAL_ASSET);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& appInJntOwnCargo.getSrc_app_ind() != null
																		&& appInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}
					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(rmcInBurialCargo
								.getApp_num());
						appInJntOwnCargo.setJnt_own_seq_num(rmcInBurialCargo
								.getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(rmcInBurialCargo
								.getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(rmcInBurialCargo
								.getBury_aset_typ());
						appInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_BURIAL_ASSET);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInJntOwnCargo
										.getJnt_indv_seq_num())) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}
						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);
						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));
						appInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}
			if (!appInJntOwnNewColl.isEmpty()) {
				burialAssetBO.storeJointOwnerDetails(appInJntOwnNewColl);
			}

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;
				// Insert into APP_IN_BURY_ASET
				categorySelectionProfileManager.insertSequenceDetail(
						burialAssetsProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			}

			if (!loopingQuestion
					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.BURIAL_ASSET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
				}
			}
			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					burialAssetsProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
			categorySelectionProfileManager.makeSequenceDetailComplete(
						burialAssetsProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfileManager
					.areAllSequencesComplete(burialAssetsProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(burialAssetsProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeBurialAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load life insurance type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadLifeInsuranceTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLifeInsuranceTypeSelection() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLifeInsuranceTypeSelection:Start");

			final Map request = txnBean.getRequest();
			loadTypes(txnBean,
					IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
					request.get(FwConstants.CURRENT_PAGE_ID).toString());

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLifeInsuranceTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadLifeInsuranceTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadLifeInsuranceTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLifeInsuranceTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store life insurance type selection.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeLifeInsuranceTypeSelection(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLifeInsuranceTypeSelection() - START");
		try {

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLifeInsuranceTypeSelection:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String appType = (String) session
					.get(FwConstants.ACCESS_APPLICATION_TYPE);

			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
			final ARLITValidator lifeInsuranceValidator = new ARLITValidator();

			// Initialize messageList
			 FwMessageList validateInfo = null;

			// Initialize short field names
			final short[] fieldName = {
					IRMCResponseProfileManager.LIFE_INS_ASSET_WHOLE_LIFE_RESP, 
					IRMCResponseProfileManager.LIFE_INSURANCE_ASSET_TERM_RESP, 
					IRMCResponseProfileManager.LIFE_INS_ASSET_GROUP_TERM_RESP,
					IRMCResponseProfileManager.LIFE_INSURANCE_OTHER_RESP 

			};

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get appNumber
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Get pageStatus from DriverArray
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);

			// Persist Array List Collection and cargo
			final List persistArray = new ArrayList();
			final RMC_IN_PRFL_Collection persistColl = new RMC_IN_PRFL_Collection();

			// Get the session Collection and Cargo for AIP
			final RMC_IN_PRFL_Collection rmcInPrflCollSession = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			// Get the PAGE Collection
			final RMC_IN_PRFL_Collection pageColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");

			// Create a copy of pagecollection
			RMC_IN_PRFL_Collection rmcInPrflCollRequest = new RMC_IN_PRFL_Collection();

			// Get ARLIT Other Life Insurance Type Before Collection
			final Map beforeMap = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final Map beforeFirstNamesList = (Map) beforeMap
					.get("ARLIT_FIRST_NAME_LIST");
			final NO_ONE_Collection noOneBeforeColl = (NO_ONE_Collection) beforeMap
					.get("ARLIT_NO_ONE_COLLECTION");
			final RMC_IN_PRFL_Collection rmcInPrflBeforeColl = (RMC_IN_PRFL_Collection) beforeMap
					.get("ARLIT_RMC_IN_PRFL_COLLECTION");

			final NO_ONE_Collection noOneOtherAssetColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			// Populate responses from BeforeCollection to Page Collection
			rmcResponseProfileManager.preparePageColl(pageColl,
					rmcInPrflBeforeColl, fieldName);

			// Cargo
			RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = new RMC_IN_PRFL_Cargo();
			RMC_IN_PRFL_Cargo rmcInPrflCargoRequest = new RMC_IN_PRFL_Cargo();

			// Get Request Collection
			rmcInPrflCollRequest = lifeInsuranceTypeBO.compareRmcInPrflColl(
					rmcInPrflBeforeColl, pageColl);

			// Get NoOneCollection
			NO_ONE_Collection newNoOneColl = new NO_ONE_Collection();
			newNoOneColl = lifeInsuranceTypeBO.compareNoOneCollection(
					noOneBeforeColl, noOneOtherAssetColl);

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines Commented Code in
			 * this block
			 */
			validateInfo = lifeInsuranceValidator.validateNoOneOtherLifeInsureType(
					rmcInPrflCollRequest, newNoOneColl, beforeFirstNamesList,appType);

			if (validateInfo != null && lifeInsuranceValidator.hasMessages()) {
				// Translate Profile Response After Validation
				rmcResponseProfileManager
				.translateProfileResponseAfterValidation(
						rmcInPrflCollRequest, rmcInPrflCollSession,
						fieldName);
				request.put(FwConstants.MESSAGE_LIST, validateInfo);
				pageCollection.put("ARLIT_RMC_IN_PRFL_COLLECTION",
						rmcInPrflCollRequest);
				pageCollection.put("ARLIT_NO_ONE_COLLECTION", newNoOneColl);
				pageCollection.put("ARLIT_FIRST_NAME_LIST",
						beforeFirstNamesList);
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeMap.get(FwConstants.PAGE_COMPONENT_LIST));
				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				return;
			}

			// Initialize the colSize
			final int colSize = rmcInPrflBeforeColl.size();
			final int reqsize = rmcInPrflCollRequest.size();

			final List reqResponse = new ArrayList();
			final List sesResponse = new ArrayList();
			boolean persistFlag = false;
			boolean driverFlag = true;
			final int sizeQuestion = 4;
			String beforeIndvSeqNum = null;
			String resIndvSeqNum = null;

			// Initialize dirty status
			final int[] dirtyStatus = { 0 };

			// Start of loop for each cargo in session AIP
			for (int i = 0; i < colSize; i++) {
				// get cargo in the collection
				rmcInPrflBeforeCargo = rmcInPrflBeforeColl.getCargo(i);
				beforeIndvSeqNum = rmcInPrflBeforeCargo.getIndv_seq_num();

				if (rmcInPrflBeforeCargo.getOther_aset_life_insurance_resp()
						.charAt(0) != IRMCResponseProfileManager.STATUS_NOT_REQUIRED) {
					rmcInPrflCargoRequest = rmcResponseProfileManager
							.getProfile(rmcInPrflCollRequest, beforeIndvSeqNum);

					resIndvSeqNum = rmcInPrflCargoRequest.getIndv_seq_num();

					if (beforeIndvSeqNum.equals(resIndvSeqNum)) {
						// get responses from request
						reqResponse.add(rmcInPrflCargoRequest
								.getLife_ins_asset_whole_life_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLife_ins_asest_group_life_resp());
						reqResponse.add(rmcInPrflCargoRequest
								.getLife_ins_asset_group_term_resp());
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2,2 lines
						 * Commented Code in this block
						 */
						reqResponse.add(rmcInPrflCargoRequest
								.getLife_insurance_other_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLife_ins_asset_whole_life_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLife_ins_asest_group_life_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLife_ins_asset_group_term_resp());
						sesResponse.add(rmcInPrflBeforeCargo
								.getLife_insurance_other_resp());

						persistFlag = false;
						for (int s = 0; s < sizeQuestion; s++) {

							// determine dirty status
							if (rmcResponseProfileManager.determineDirtyStatus(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s), dirtyStatus,
									pageStatus))

							{
								persistFlag = true;
							}
							// translate profile response
							rmcResponseProfileManager
							.translateProfileResponsesForType(
									(String) reqResponse.get(s),
									(String) sesResponse.get(s),
									pageStatus,
									fieldName[s],
									rmcInPrflBeforeCargo,
									IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE);

						}

						if (persistFlag == true) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}

						if (rmcInPrflBeforeCargo
								.getLife_ins_asset_whole_life_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getLife_ins_asest_group_life_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getLife_ins_asset_group_term_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														/*
														 * VG SONAR Cleanup - 08/27/2015 Deleted 4,2
														 * lines Commented Code in this block
														 */
														&& rmcInPrflBeforeCargo
														.getLife_insurance_other_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
							rmcResponseProfileManager
							.makeNotRequired(
									IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
									rmcInPrflBeforeCargo, true);

							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);

							if (reqsize == 1) {
								// Make AbsoluteNotRequired on the driver
								final String[] pageId = { "ARLIT" };
								driverManager.makeAbsoluteNotRequired(
										FwConstants.RMC_DRIVER, pageId,
										driverArray, appNum);
								driverFlag = false;
							}

						}

						if (rmcInPrflBeforeCargo
								.getLife_ins_asset_whole_life_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
										|| rmcInPrflBeforeCargo
										.getLife_ins_asest_group_life_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
												|| rmcInPrflBeforeCargo
												.getLife_ins_asset_group_term_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))
														|| rmcInPrflBeforeCargo
														.getLife_insurance_other_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_REQUIRED))) {
							persistArray.add(beforeIndvSeqNum);
							persistColl.add(rmcInPrflBeforeCargo);
						}
						// Clear the list
						reqResponse.clear();
						sesResponse.clear();
					}
				}
			}

			// persist the data
			final int persistArraySize = persistArray.size();
			boolean lifeInsPageRequired = false;
			String asetGl = null;
			String asetgt = null;
			String asetWl = null;
			String asetOth = null;
			for (int i = 0; i < persistArraySize; i++) {

				final RMC_IN_PRFL_Cargo cargo = persistColl.getCargo(i);
				final String[] fieldValues = {
						cargo.getLife_ins_asset_whole_life_resp(),
						cargo.getLife_ins_asest_group_life_resp(),
						cargo.getLife_ins_asset_group_term_resp(),
						cargo.getLife_insurance_other_resp() };
				rmcResponseProfileManager.persist(appNum,
						cargo.getIndv_seq_num(), fieldName, fieldValues);

				asetGl = cargo.getLife_ins_asest_group_life_resp();
				asetgt = cargo.getLife_ins_asset_group_term_resp();
				cargo.getLife_ins_asset_universal_resp();
				asetWl = cargo.getLife_ins_asset_whole_life_resp();
				asetOth = cargo.getLife_insurance_other_resp();
				if ("R".equalsIgnoreCase(asetWl)
						|| "R".equalsIgnoreCase(asetGl)
						|| "R".equalsIgnoreCase(asetgt)
						|| "R".equalsIgnoreCase(asetOth)) {
					lifeInsPageRequired = true;
				}

			}
			if (driverFlag) {
				// Make Complete
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLIT",
						driverArray, appNum);
			}
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// Run Dirty Logic on Driver
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			if (lifeInsPageRequired) {
				rmcResponseProfileManager.runDirtyLogicOnDriver(appNum,
						dirtyStatus[0], "ARLID", driverArray);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLID",
						driverArray, appNum);
			} else if (!checkAssetDetailsPageRequired(categorySelectionProfile,
					null, AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL)) {

				final SortedSet selectionProfile = createPageProfile(
						categorySelectionProfile, rmcInPrflCollSession,
						fieldName);
				final String utilityDetailPageStat = driverManager.getStatus(
						FwConstants.RMC_DRIVER, "ARLID", driverArray);
				if (!IDriver.DRIVER_STATUS_COMPLETE
						.equals(utilityDetailPageStat)
						&& !IDriver.DRIVER_STATUS_REQUIRED
						.equals(utilityDetailPageStat)
						|| selectionProfile != null
						&& selectionProfile.isEmpty()
						&& IDriver.DRIVER_STATUS_REQUIRED
						.equals(utilityDetailPageStat)) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARLID", driverArray,
							appNum);
				}
			} else if (driverManager.getAFBStatus(FwConstants.RMC_DRIVER,
					"ARLID", driverArray) == FwConstants.DRIVER_VISIT_AGAIN) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLID",
						driverArray, appNum);
			}

			if (!lifeInsPageRequired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLIT", driverArray, appNum);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLifeInsuranceTypeSelection:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeLifeInsuranceTypeSelection");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeLifeInsuranceTypeSelection", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLifeInsuranceTypeSelection() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load life insurance details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLifeInsuranceDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLifeInsuranceDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			request.put("loopingQuestion", FwConstants.NO);
			String srcAppInd = FwConstants.EMPTY_STRING;
			String pageMode = FwConstants.EMPTY_STRING;

			// you'll get the value for Seq
			APP_IN_L_INS_ASET_Collection rmcInLifeInsColl;
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);

			final String pageId = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String previousPageId = (String) request
					.get(FwConstants.PREVIOUS_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final int pageStatus = driverManager.getAFBStatus(
					FwConstants.RMC_DRIVER, pageId, driverArray);

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TLIN", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map lifeInsPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				lifeInsPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			// build category selection profile
			SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);

			if (pageStatus == FwConstants.DRIVER_REQUIRED
					|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, lifeInsPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);
			} else if (pageStatus == FwConstants.DRIVER_COMPLETE
					&& !pageId.equals(previousPageId)
					&& categorySelectionProfileManager.isEmpty(
							categorySelectionProfile, lifeInsPropertyTypeMap)) {
				categorySelectionProfile = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNumber,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);
			}

			RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();

			final short[] responseChangeType = new short[] {
					IRMCResponseProfileManager.LIFE_INS_ASSET_WHOLE_LIFE_RESP,
					IRMCResponseProfileManager.LIFE_INS_ASSET_GROUP_TERM_RESP,
					IRMCResponseProfileManager.LIFE_INS_ASEST_GROUP_LIFE_RESP,
					IRMCResponseProfileManager.LIFE_INSURANCE_OTHER_RESP

			};

			SortedSet lifeInsProfile = null;
			// EDSP RMB added for rmb person
			Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			String addnewPerson = FwConstants.EMPTY_STRING;
			if (!pageId.equals(previousPageId)) {
				lifeInsProfile = createPageProfile(categorySelectionProfile,
						rmcInPrflColl, responseChangeType);
				// EDSP Need to remove
				session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
				if (pageStatus != FwConstants.DRIVER_REQUIRED) {
					APP_IN_L_INS_ASET_Collection newLifeInsColl = lifeInsuranceTypeBO
							.loadLifeInsuranceDetails(appNumber);
					newLifeInsColl = lifeInsuranceTypeBO.splitLIColl(
							newLifeInsColl, AppConstants.RMC_NEW_RECORD_IND);
					if (newLifeInsColl != null && !newLifeInsColl.isEmpty()) {
						APP_IN_L_INS_ASET_Cargo rmcInLifeInsCargo = null;
						final int newUtilityCollSize = newLifeInsColl.size();
						for (int i = 0; i < newUtilityCollSize; i++) {
							rmcInLifeInsCargo = newLifeInsColl.getCargo(i);
							categorySelectionProfileManager
							.insertExistingSequenceDetail(
									lifeInsProfile, null, null,
									Short.parseShort(rmcInLifeInsCargo
											.getIndv_seq_num()),
											Short.parseShort(rmcInLifeInsCargo
													.getSeq_num()),
													rmcInLifeInsCargo
													.getLife_ins_aset_typ());
						}
					}
				}

				if (pageStatus == FwConstants.DRIVER_REQUIRED
						|| pageStatus == FwConstants.DRIVER_VISIT_AGAIN) {
					// set the current record indicator to the first one
					categorySelectionProfileManager
					.setCurrentRecordIndToFirst(lifeInsProfile);
				}
				if (pageStatus == FwConstants.DRIVER_COMPLETE) {
					// set the current record indicator to the end of the detail
					// bean
					categorySelectionProfileManager
					.setCurrentRecordIndToLast(lifeInsProfile);
				}

				// create add new sorted set
				// we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
			} else {
				// catAddNewProfile get it from the before collection
				beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				lifeInsProfile = (SortedSet) beforeColl
						.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			}
			if (beforeColl != null) {
				if (beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS) != null) {
					Integer.parseInt(String.valueOf(beforeColl
							.get(AppConstants.INDV_SEQUENCE_NUMBERS)));
				}
				if (beforeColl.get("RMB_ADD_INDIVIDUAL_MODE") != null) {
					addnewPerson = (String) beforeColl
							.get("RMB_ADD_INDIVIDUAL_MODE");
				}

			}
			IndivTypeSeqBean indivSeqBean = (IndivTypeSeqBean) pageCollection
					.get(FwConstants.DETAIL_KEY_BEAN);
			// if details key bean not null means this bean is comming from the
			// summary page

			if (indivSeqBean == null
					&& pageStatus == FwConstants.DRIVER_VISIT_AGAIN
					&& !pageId.equals(previousPageId)) {
				indivSeqBean = (IndivTypeSeqBean) session
						.get("Life_IndSeqBean");
			}

			if (indivSeqBean != null) {
				final CategorySequenceDetail categorySeqDetail1 = categorySelectionProfileManager
						.getCategorySequenceDetail(
								lifeInsProfile,
								Short.parseShort(indivSeqBean.getIndivSeqNum()),
								Short.parseShort(indivSeqBean.getSeqNum()),
								indivSeqBean.getType());
				if (categorySeqDetail1 != null) {
					String userEndIndicator = indivSeqBean.getUserEndInd();
					if (userEndIndicator == null) {
						userEndIndicator = FwConstants.ZERO;
					}
					if (categorySeqDetail1.getUserEndSelectionInd() != Short
							.parseShort(userEndIndicator)) {
						categorySelectionProfileManager
						.updateUserEndSelInd(lifeInsProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndIndicator));
					}
					categorySelectionProfileManager.makeSequenceDetailRequired(
							lifeInsProfile, null,
							Short.parseShort(indivSeqBean.getIndivSeqNum()),
							Short.parseShort(indivSeqBean.getSeqNum()),
							indivSeqBean.getType());
					final CategorySequenceDetail categorySeqDetail2 = categorySelectionProfileManager
							.getCategorySequenceDetail(
									categorySelectionProfile, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()), Short
											.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType());
					if (categorySeqDetail2 != null) {
						if (categorySeqDetail2.getUserEndSelectionInd() != Short
								.parseShort(userEndIndicator)) {
							categorySelectionProfileManager
							.updateUserEndSelInd(
									categorySelectionProfile,
									appNumber, Short
									.parseShort(indivSeqBean
											.getIndivSeqNum()),
											Short.parseShort(indivSeqBean
													.getSeqNum()), indivSeqBean
													.getType(),
													Short.parseShort(userEndIndicator));
						}
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

					}
				} else {
					if (FwConstants.ZERO.equals(indivSeqBean.getSeqNum())) {
						RMC_IN_PRFL_Cargo rmcInPrflCargo = null;
						if (rmcInPrflColl != null) {
							rmcInPrflCargo = rmcResponseProfileManager
									.getProfile(rmcInPrflColl,
											indivSeqBean.getIndivSeqNum());
						} else {
							rmcInPrflColl = new RMC_IN_PRFL_Collection();
						}
						if (rmcInPrflCargo == null) {
							rmcInPrflCargo = new RMC_IN_PRFL_Cargo();
							rmcInPrflCargo.setApp_num(appNumber);
							rmcInPrflCargo.setIndv_seq_num(indivSeqBean
									.getIndivSeqNum());
							rmcResponseProfileManager
							.createRMCIndividualProfile(rmcInPrflCargo);
							rmcInPrflColl.addCargo(rmcInPrflCargo);
						}

						final short[] responseArray = new short[] {
								IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
								rmcResponseProfileManager
								.getResponseByType(
										IRMCResponseProfileManager.LIFE_INSURANCE_ASSET_DETAILS,
										indivSeqBean.getType()) };
						rmcResponseProfileManager.makeAddNew(responseArray,
								rmcInPrflCargo, true);
						categorySelectionProfileManager
						.insertSequenceDetail(lifeInsProfile, appNumber,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(indivSeqBean
														.getUserEndInd()));
						session.put(AppConstants.RMC_IN_PRFL_MASTER,
								rmcInPrflColl);
					} else {
						String userEndInd = indivSeqBean.getUserEndInd();
						if (userEndInd == null) {
							userEndInd = FwConstants.ZERO;
						}

						categorySelectionProfileManager
						.insertSequenceDetail(
								lifeInsProfile,
								null,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(lifeInsProfile,
								null, Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());

						categorySelectionProfileManager
						.insertSequenceDetail(
								categorySelectionProfile,
								appNumber,
								AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType(), Short
												.parseShort(userEndInd));
						categorySelectionProfileManager
						.makeSequenceDetailRequired(
								categorySelectionProfile, appNumber,
								Short.parseShort(indivSeqBean
										.getIndivSeqNum()), Short
										.parseShort(indivSeqBean
												.getSeqNum()),
												indivSeqBean.getType());
					}
				}
				session.put("Life_IndSeqBean", indivSeqBean);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						categorySelectionProfile);
			}

			pageCollection.put(AppConstants.RMC_CATEGORY_PAGE_PRFL,
					lifeInsProfile);
			CategorySequenceDetail categorySeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(lifeInsProfile);
			if (categorySeqDetail == null) {
				categorySeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(lifeInsProfile);
			}

			final String categoryType = categorySeqDetail.getCategoryType();
			final String categorySeqNum = Long.toString(categorySeqDetail
					.getCategorySequence());
			String indvSeqNum = Short.toString(categorySeqDetail
					.getIndividualSequence());
			rmcInLifeInsColl = lifeInsuranceTypeBO
					.loadIndividualLifeInsuranceDetails(appNumber, indvSeqNum,
							categorySeqNum);
			pageCollection
			.put("APP_IN_L_INS_ASET_Collection", rmcInLifeInsColl);

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = AppConstants.REPORT_END_MODE;
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else {
					if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
						pageMode = AppConstants.REPORT_NEW_MODE;
					} else {
						pageMode = AppConstants.REPORT_CHANGE_MODE;
					}
				}
			} else {
				if (FwConstants.YES.equalsIgnoreCase(addnewPerson)) {
					pageMode = AppConstants.REPORT_NEW_MODE;
				} else {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				}
			}

			APP_IN_L_INS_ASET_Cargo cwwUtilityCargo = lifeInsuranceTypeBO
					.splitLifeInsColl(rmcInLifeInsColl,
							AppConstants.CWW_RECORD_IND);
			if (cwwUtilityCargo == null) {
				cwwUtilityCargo = new APP_IN_L_INS_ASET_Cargo();
				addnewPerson = FwConstants.YES;
				pageMode = AppConstants.REPORT_NEW_MODE;
			} else {
				addnewPerson = FwConstants.NO;
				pageMode = AppConstants.REPORT_CHANGE_MODE;
			}

			pageCollection.put("SEC_LIFE", lifeInsuranceTypeBO
					.settingLifeInsDefaultValues(cwwUtilityCargo));
			APP_IN_L_INS_ASET_Cargo rmcUtilityCargo = lifeInsuranceTypeBO
					.splitLifeInsColl(rmcInLifeInsColl,
							AppConstants.RMC_NEW_RECORD_IND);
			if (rmcUtilityCargo != null) {
				pageCollection.put("FST_LIFE", lifeInsuranceTypeBO
						.settingLifeInsDefaultValues(rmcUtilityCargo));
			} else {
				rmcUtilityCargo = lifeInsuranceTypeBO.splitLifeInsColl(
						rmcInLifeInsColl, AppConstants.RMC_END_RECORD_IND);
				if (rmcUtilityCargo != null) {
					pageCollection.put("FST_LIFE", lifeInsuranceTypeBO
							.settingLifeInsDefaultValues(rmcUtilityCargo));
				} else {

					rmcUtilityCargo = lifeInsuranceTypeBO.splitLifeInsColl(
							rmcInLifeInsColl,
							AppConstants.RMC_MODIFIED_RECORD_IND);
					if (rmcUtilityCargo != null) {
						pageCollection.put("FST_LIFE", lifeInsuranceTypeBO
								.settingLifeInsDefaultValues(rmcUtilityCargo));
					} else {
						pageCollection.put("FST_LIFE", lifeInsuranceTypeBO
								.settingLifeInsDefaultValues(cwwUtilityCargo));

					}

				}
			}

			if (rmcInLifeInsColl != null && !rmcInLifeInsColl.isEmpty()) {
				final APP_IN_L_INS_ASET_Cargo appInLifeInsCargo = rmcInLifeInsColl
						.getCargo(0);
				srcAppInd = appInLifeInsCargo.getSrc_app_ind();
			}
			if ((AppConstants.CWW_RECORD_IND.equalsIgnoreCase(srcAppInd) || AppConstants.RMC_MODIFIED_RECORD_IND
					.equalsIgnoreCase(srcAppInd))
					&& categorySeqDetail.getUserEndSelectionInd() == 0) {
				pageMode = AppConstants.REPORT_CHANGE_MODE;
			}

			if (categorySeqDetail.getUserEndSelectionInd() == 1) {
				pageMode = AppConstants.REPORT_END_MODE;
			} else if (indivSeqBean != null
					&& indivSeqBean.getUserEndInd() != null) {
				if (FwConstants.ONE.equalsIgnoreCase(indivSeqBean
						.getUserEndInd())) {
					pageMode = AppConstants.REPORT_END_MODE;
				} else if (FwConstants.ZERO
						.equals(indivSeqBean.getUserEndInd())
						&& AppConstants.RMC_MODIFIED_RECORD_IND
						.equalsIgnoreCase(srcAppInd)
						|| AppConstants.CWW_RECORD_IND
						.equalsIgnoreCase(srcAppInd)) {
					pageMode = AppConstants.REPORT_CHANGE_MODE;
				} else {
					pageMode = AppConstants.REPORT_NEW_MODE;
				}
			} else if (!(AppConstants.REPORT_CHANGE_MODE
					.equalsIgnoreCase(pageMode) || AppConstants.REPORT_END_MODE
					.equalsIgnoreCase(pageMode))) {
				pageMode = AppConstants.REPORT_NEW_MODE;
			}

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();

			if (rmcInLifeInsColl != null && !rmcInLifeInsColl.isEmpty()) {
				final APP_IN_L_INS_ASET_Cargo appLiInsCargo = rmcInLifeInsColl
						.getCargo(0);
				indvSeqNum = appLiInsCargo.getIndv_seq_num();
				final String subType = appLiInsCargo.getLife_ins_aset_typ();
				if (appLiInsCargo.getSeq_num() != null) {
					final APP_IN_JNT_OWN_Collection appInJntCol = vehicleAssetBO
							.loadIndividualJointOwnerDetails((String) session
									.get(AppConstants.APP_NUMBER), indvSeqNum,
									AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL,
									subType, appLiInsCargo.getSeq_num());
					if (appInJntCol != null && !appInJntCol.isEmpty()) {
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						// EDSP RMB adding CWJnt collection
						APP_IN_JNT_OWN_Collection cwwJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwJointCargo == null || cwwJointCargo.isEmpty()) {
							cwwJointCargo = new APP_IN_JNT_OWN_Collection();

						}
						pageCollection.put("SEC_JNT", cwwJointCargo);

						APP_IN_JNT_OWN_Collection rnJointCargo = lifeInsuranceTypeBO
								.splitLifeInsJointColl(appInJntCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
							pageCollection.put("FST_JNT", rnJointCargo);
						} else {
							rnJointCargo = lifeInsuranceTypeBO
									.splitLifeInsJointColl(appInJntCol,
											AppConstants.RMC_END_RECORD_IND);
							if (rnJointCargo != null && !rnJointCargo.isEmpty()) {
								pageCollection.put("FST_JNT", rnJointCargo);
							} else {

								rnJointCargo = lifeInsuranceTypeBO
										.splitLifeInsJointColl(
												appInJntCol,
												AppConstants.RMC_MODIFIED_RECORD_IND);
								if (rnJointCargo != null
										&& !rnJointCargo.isEmpty()) {
									rnJointCargo = lifeInsuranceTypeBO
											.getPageJointCollection(
													cwwJointCargo, rnJointCargo);
									pageCollection.put("FST_JNT", rnJointCargo);
								} else {
									pageCollection
									.put("FST_JNT", cwwJointCargo);

								}

							}
						}
					}
				}
			}

			// ESDP - CP Start Insured Policy person box
			if (rmcInLifeInsColl != null && !rmcInLifeInsColl.isEmpty()) {
				final APP_IN_L_INS_ASET_Cargo insAsetCargo = rmcInLifeInsColl
						.getCargo(0);
				/*
				 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code
				 * in this block
				 */

				final String indSeqNum = insAsetCargo.getIndv_seq_num();
				insAsetCargo.getSrc_app_ind();
				if (insAsetCargo.getSeq_num() != null) {
					final CP_APP_IN_LIF_INS_CVRG_Collection appInLifInsCol = lifeInsuranceTypeBO
							.loadInsPolicyPersonDetails((String) session
									.get(AppConstants.APP_NUMBER), indSeqNum,
									insAsetCargo.getSeq_num());
					if (appInLifInsCol != null && !appInLifInsCol.isEmpty()) {

						// EDSP RMB adding CWJnt collection
						CP_APP_IN_LIF_INS_CVRG_Collection cwwLifeInsCvrgCargo = lifeInsuranceTypeBO
								.splitLifeInsCvrgColl(appInLifInsCol,
										AppConstants.CWW_RECORD_IND);
						if (cwwLifeInsCvrgCargo == null
								|| cwwLifeInsCvrgCargo.isEmpty()) {
							cwwLifeInsCvrgCargo = new CP_APP_IN_LIF_INS_CVRG_Collection();

						}
						pageCollection.put("SEC_LIFECVRG", cwwLifeInsCvrgCargo);

						CP_APP_IN_LIF_INS_CVRG_Collection rnLifeCvrgCargo = lifeInsuranceTypeBO
								.splitLifeInsCvrgColl(appInLifInsCol,
										AppConstants.RMC_NEW_RECORD_IND);

						if (rnLifeCvrgCargo != null
								&& !rnLifeCvrgCargo.isEmpty()) {
							pageCollection.put("FST_LIFECVRG", rnLifeCvrgCargo);
						} else {
							rnLifeCvrgCargo = lifeInsuranceTypeBO
									.splitLifeInsCvrgColl(appInLifInsCol,
											AppConstants.RMC_END_RECORD_IND);
							if (rnLifeCvrgCargo != null
									&& !rnLifeCvrgCargo.isEmpty()) {
								pageCollection.put("FST_LIFECVRG",
										rnLifeCvrgCargo);
							} else {
								rnLifeCvrgCargo = lifeInsuranceTypeBO
										.splitLifeInsCvrgColl(
												appInLifInsCol,
												AppConstants.RMC_MODIFIED_RECORD_IND);
								if (rnLifeCvrgCargo != null
										&& !rnLifeCvrgCargo.isEmpty()) {
									rnLifeCvrgCargo = lifeInsuranceTypeBO
											.getLifeCvrgPageCollection(
													cwwLifeInsCvrgCargo,
													rnLifeCvrgCargo);
									pageCollection.put("FST_LIFECVRG",
											rnLifeCvrgCargo);
								} else {
									pageCollection.put("FST_LIFECVRG",
											cwwLifeInsCvrgCargo);

								}

							}
						}
					}
				}
			}

			String showLoopingQuestionFlag = FwConstants.YES;

			char typeStatus = 'N';
			typeStatus = categorySeqDetail.getStatus();
			if (typeStatus == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
					|| typeStatus == IRMCResponseProfileManager.STATUS_COMPLETE) {
				showLoopingQuestionFlag = FwConstants.NO;

			}

			pageCollection.put("showLoopingQuestion", showLoopingQuestionFlag);
			pageCollection.put("PAGE_MODE", pageMode);
			pageCollection.put("LIFE_TYPE", categoryType);
			// ##: Other Owners Implementation
			INDIVIDUAL_Custom_Collection indivCustCol = null;
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			indivCustCol = peopleHandler.getInHomeIndividuals();
			for (int i = 0; i < indivCustCol.size(); i++) {
				if (Short.parseShort(indivCustCol.getResult(i)
						.getIndv_seq_num()) == categorySeqDetail
						.getIndividualSequence()) {
					indivCustCol.remove(i);
					break;
				}
			}
			pageCollection.put("PEOPLE_377", indivCustCol);

			pageCollection.put("PEOPLE_362",
					peopleHandler.getInHomeIndividuals());
			// set first name to and Custome collection into page collection

			pageCollection.put(AppConstants.FIRST_NAME,
					peopleHandler.getFirstName(indvSeqNum));
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM, indvSeqNum);
			txnBean.setPageCollection(pageCollection);

			// run component manager

			if (session.get(FwConstants.BEFORE_COLLECTION) != null) {
				// clear out the app_in_jnt_owner collection
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_JNT")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_JNT");
				}
				if (((Map) session.get(FwConstants.BEFORE_COLLECTION))
						.containsKey("FST_LIFECVRG")) {
					((Map) session.get(FwConstants.BEFORE_COLLECTION))
					.remove("FST_LIFECVRG");
					// EDSP RMB clearing app_in_jnt_owner collection from
					// pagecollection
				}

				((Map) session.get(FwConstants.BEFORE_COLLECTION))
				.putAll(pageCollection);
			} else {
				final Map beforeJntOwnerColl = new HashMap();
				beforeJntOwnerColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeJntOwnerColl);
			}

			// EDSP RMB ADDED FOR NEW PERSON
			pageCollection.put("RMB_ADD_INDIVIDUAL_MODE", addnewPerson);
			INDIVIDUAL_Custom_Collection indvCustColl = null;
			indvCustColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			pageCollection.put("INDIVIDUAL_Custom_Collection", indvCustColl);

			request.remove("loopingQuestion");

			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::loadLifeInsuranceDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("loadLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"loadLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store life insurance details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLifeInsuranceDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLifeInsuranceDetails:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			session.remove("Life_IndSeqBean");
			// get driver array
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, currentPageID,
					driverArray);

			// build category selection profile
			final SortedSet categorySelectionProfile = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			// get the BeforeCollection
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			final SortedSet lifeInsProfile = (SortedSet) beforeColl
					.get(AppConstants.RMC_CATEGORY_PAGE_PRFL);
			final String pageMode = (String) beforeColl.get("PAGE_MODE");

			// get Details Collection and Cargo
			final APP_IN_L_INS_ASET_Collection rmcInLifeInsCollection = (APP_IN_L_INS_ASET_Collection) pageCollection
					.get("APP_IN_L_INS_ASET_Collection");
			APP_IN_L_INS_ASET_Cargo rmcInLifeInsCargo = rmcInLifeInsCollection
					.getCargo(0);

			// get details joint owner collection
			final APP_IN_JNT_OWN_Collection appInJntOwnColl = (APP_IN_JNT_OWN_Collection) pageCollection
					.get("APP_IN_JNT_OWN_Collection");

			final CategorySequenceDetail categorySeqDetailBean = categorySelectionProfileManager
					.getCurrentSequenceDetail(lifeInsProfile);
			final short userEndInd = categorySeqDetailBean
					.getUserEndSelectionInd();

			final LifeInsuranceBO lifeInsuranceBO = new LifeInsuranceBO();
			final ARLIDValidator arlidValidator = new ARLIDValidator();

			final APP_IN_L_INS_ASET_Collection beforeLifeInsColl = (APP_IN_L_INS_ASET_Collection) beforeColl
					.get("APP_IN_L_INS_ASET_Collection");
			APP_IN_L_INS_ASET_Cargo beforeLifeInsCargo = null;

			// get the joint owner collection from before collection
			final APP_IN_JNT_OWN_Collection appInJntBeforeColl = (APP_IN_JNT_OWN_Collection) beforeColl
					.get("FST_JNT");
			// get the CP_APP_IN_LIF_INS_CVRG_Collection from request
			final CP_APP_IN_LIF_INS_CVRG_Collection appInLifInsCvrgColl = (CP_APP_IN_LIF_INS_CVRG_Collection) pageCollection
					.get("CP_APP_IN_LIF_INS_CVRG_Collection");
			CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsCvrgCargo = null;
			final CP_APP_IN_LIF_INS_CVRG_Collection appInLifInsCvrgBeforeColl = (CP_APP_IN_LIF_INS_CVRG_Collection) beforeColl
					.get("FST_LIFECVRG");
			CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsCvrgBeforeCargo = null;

			rmcInLifeInsCargo.setApp_num(appNumber);

			// This is for Face Value
			if (rmcInLifeInsCargo.getLife_ins_f_amt_ind() == null
					|| rmcInLifeInsCargo.getLife_ins_f_amt_ind().trim()
					.length() == 0) {
				if (rmcInLifeInsCargo.getLife_ins_face_amt() == null
						|| rmcInLifeInsCargo.getLife_ins_face_amt().trim()
						.length() == 0) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented
					 * Code in this block
					 */

					rmcInLifeInsCargo.setLife_ins_f_amt_ind("2");
				} else {
					rmcInLifeInsCargo.setLife_ins_f_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInLifeInsCargo.getLife_ins_face_amt() == null || rmcInLifeInsCargo
						.getLife_ins_face_amt().trim().length() == 0)) {

					pageCollection.put("AmtAndIndChecked_F", FwConstants.ONE);
				}
			}

			// This is for Surrender Value

			if (rmcInLifeInsCargo.getLife_ins_s_amt_ind() == null
					|| rmcInLifeInsCargo.getLife_ins_s_amt_ind().trim()
					.length() == 0) {
				if (rmcInLifeInsCargo.getLife_ins_surr_amt() == null
						|| rmcInLifeInsCargo.getLife_ins_surr_amt().trim()
						.length() == 0) {

					rmcInLifeInsCargo.setLife_ins_s_amt_ind("2");
				} else {
					rmcInLifeInsCargo.setLife_ins_s_amt_ind(FwConstants.ZERO);
				}
			} else {
				if (!(rmcInLifeInsCargo.getLife_ins_surr_amt() == null || rmcInLifeInsCargo
						.getLife_ins_surr_amt().trim().length() == 0)) {

					pageCollection.put("AmtAndIndChecked_S", FwConstants.ONE);
				}
			}

			if (rmcInLifeInsCargo.getIns_co_sta_adr() == null
					|| FwConstants.DEFAULT_DROPDOWN_SEL
					.equals(rmcInLifeInsCargo.getIns_co_sta_adr())) {
				rmcInLifeInsCargo.setIns_co_sta_adr(FwConstants.EMPTY_STRING);
			}

			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				rmcInLifeInsCargo.setJnt_own_resp(FwConstants.YES);
			} else {
				rmcInLifeInsCargo.setJnt_own_resp(FwConstants.NO);
			}

			final String indvSeqNum = String.valueOf(categorySeqDetailBean
					.getIndividualSequence());
			String sourceAppIndicator = null;
			String recordInd = null;

			// now we are checking for the before collection
			int seqNum = 0;
			boolean lifeInsuranceDetailsUpdate = false;

			if (beforeLifeInsColl != null && !beforeLifeInsColl.isEmpty()) {

				final int size = beforeLifeInsColl.size();
				seqNum = (int) categorySeqDetailBean.getCategorySequence();

				if (AppConstants.REPORT_END_MODE.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_END_RECORD_IND;
				} else if (AppConstants.REPORT_NEW_MODE
						.equalsIgnoreCase(pageMode)) {
					sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				} else {
					sourceAppIndicator = AppConstants.RMC_MODIFIED_RECORD_IND;
				}

				beforeLifeInsCargo = lifeInsuranceBO.splitLifeInsColl(
						beforeLifeInsColl, sourceAppIndicator);

				if (beforeLifeInsCargo == null
						&& (AppConstants.RMC_MODIFIED_RECORD_IND
								.equals(sourceAppIndicator) || AppConstants.RMC_END_RECORD_IND
								.equals(sourceAppIndicator))) {
					beforeLifeInsCargo = lifeInsuranceBO.splitLifeInsColl(
							beforeLifeInsColl, AppConstants.CWW_RECORD_IND);
				}

				if (size > 1) {
					// if we have two records means cw and rm
					// now we are getting RM record to compare
					// now we need to update the data base if it dirty
					recordInd = FwConstants.ROWACTION_UPDATE;
				} else {
					// now we are checking this record is CW or RN
					recordInd = FwConstants.ROWACTION_INSERT;
					if (AppConstants.RMC_NEW_RECORD_IND
							.equals(sourceAppIndicator)
							&& beforeLifeInsCargo != null) {
						recordInd = FwConstants.ROWACTION_UPDATE;
					}
				}

				if (beforeLifeInsCargo != null) {

					rmcInLifeInsCargo.setSrc_app_ind(beforeLifeInsCargo
							.getSrc_app_ind());
					rmcInLifeInsCargo.setIndv_seq_num(beforeLifeInsCargo
							.getIndv_seq_num());
					rmcInLifeInsCargo.setLife_ins_aset_typ(beforeLifeInsCargo
							.getLife_ins_aset_typ());
					rmcInLifeInsCargo.setSeq_num(beforeLifeInsCargo
							.getSeq_num());
					rmcInLifeInsCargo.setRec_cplt_ind(beforeLifeInsCargo
							.getRec_cplt_ind());
					rmcInLifeInsCargo.setEcp_id(beforeLifeInsCargo.getEcp_id());

					if ("E".equalsIgnoreCase(pageMode)) {
						rmcInLifeInsCargo
						.setLife_ins_aset_typ(beforeLifeInsCargo
								.getLife_ins_aset_typ());
						rmcInLifeInsCargo
						.setLife_ins_face_amt(beforeLifeInsCargo
								.getLife_ins_face_amt());
						rmcInLifeInsCargo
						.setLife_ins_f_amt_ind(beforeLifeInsCargo
								.getLife_ins_f_amt_ind());
						rmcInLifeInsCargo
						.setLife_ins_surr_amt(beforeLifeInsCargo
								.getLife_ins_surr_amt());
						rmcInLifeInsCargo
						.setLife_ins_s_amt_ind(beforeLifeInsCargo
								.getLife_ins_s_amt_ind());
						rmcInLifeInsCargo.setJnt_own_resp(beforeLifeInsCargo
								.getJnt_own_resp());
						rmcInLifeInsCargo
						.setLife_ins_plcy_num(beforeLifeInsCargo
								.getLife_ins_plcy_num());
						rmcInLifeInsCargo.setIns_co_city_adr(beforeLifeInsCargo
								.getIns_co_city_adr());
						rmcInLifeInsCargo.setIns_co_l1_adr(beforeLifeInsCargo
								.getIns_co_l1_adr());
						rmcInLifeInsCargo.setIns_co_l2_adr(beforeLifeInsCargo
								.getIns_co_l2_adr());
						rmcInLifeInsCargo.setIns_co_nam(beforeLifeInsCargo
								.getIns_co_nam());
						rmcInLifeInsCargo.setIns_co_sta_adr(beforeLifeInsCargo
								.getIns_co_sta_adr());
						rmcInLifeInsCargo.setIns_co_zip_adr(beforeLifeInsCargo
								.getIns_co_zip_adr());

					}

					rmcInLifeInsCargo.getChg_eff_dt();

				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
				// EDSP Added life coverage
				if (appInLifInsCvrgColl != null) {
					int cpAppInLifInsCollSize = appInLifInsCvrgColl.size();
					CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsCargo = null;
					for (int i = 0; i < cpAppInLifInsCollSize; i++) {
						appInLifInsCargo = appInLifInsCvrgColl.getCargo(i);
						if ((appInLifInsCargo.getFirst_name() == null || appInLifInsCargo
								.getFirst_name().trim().length() == 0)
								&& (appInLifInsCargo.getLast_name() == null || appInLifInsCargo
								.getLast_name().trim().length() == 0)
								&& appInLifInsCargo.getCovered_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInLifInsCargo
										.getCovered_indv_seq_num())) {
							appInLifInsCvrgColl.remove(i);
							i--;
							cpAppInLifInsCollSize--;
						}
					}
				}

				// check dirty
				rmcInLifeInsCargo = (APP_IN_L_INS_ASET_Cargo) isChanged(
						beforeLifeInsCargo, rmcInLifeInsCargo);
				// EDSP RMC adding appnum,indvseqnum,seqnum and aset type
				rmcInLifeInsCargo.setApp_num((String) session
						.get(AppConstants.APP_NUMBER));
				rmcInLifeInsCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base

				rmcInLifeInsCargo.setSeq_num(String.valueOf(seqNum));
				rmcInLifeInsCargo.setLife_ins_aset_typ(categorySeqDetailBean
						.getCategoryType());
				// EDSP RMC adding ends
				String completedCheck = lifeInsuranceBO
						.completenessCheckARLID(rmcInLifeInsCargo);
				completedCheck = FwConstants.ZERO;
				rmcInLifeInsCargo.setRec_cplt_ind(completedCheck);
				rmcInLifeInsCargo.setChg_eff_dt(rmcInLifeInsCargo
						.getChg_eff_dt());
				rmcInLifeInsCargo.setSrc_app_ind(sourceAppIndicator);
				rmcInLifeInsCargo.setRowAction(recordInd);
				if (rmcInLifeInsCargo.isDirty()) {
					lifeInsuranceDetailsUpdate = true;
				}
			} else {
				// if there is no before collection means this is new record
				sourceAppIndicator = AppConstants.RMC_NEW_RECORD_IND;
				rmcInLifeInsCargo
				.setIndv_seq_num(String.valueOf(categorySeqDetailBean
						.getIndividualSequence()));
				// get the MAX seq number from data base
				seqNum = lifeInsuranceBO.getMaxSeqNumber(appNumber, indvSeqNum);
				seqNum = seqNum + 1;
				rmcInLifeInsCargo.setSeq_num(String.valueOf(seqNum));

				rmcInLifeInsCargo.setLife_ins_aset_typ(categorySeqDetailBean
						.getCategoryType());
				rmcInLifeInsCargo.setSrc_app_ind(sourceAppIndicator);
				recordInd = FwConstants.ROWACTION_INSERT;
				rmcInLifeInsCargo.setRowAction(recordInd);
				lifeInsuranceDetailsUpdate = true;
				// insert into RMC_SELECTION_PROFILE using Common Mehod()
				categorySelectionProfileManager
				.updateSequence(lifeInsProfile, null,
						categorySeqDetailBean.getIndividualSequence(),
						(short) seqNum,
						categorySeqDetailBean.getCategoryType());
				categorySelectionProfileManager.updateSequence(categorySelectionProfile, null, categorySeqDetailBean.getIndividualSequence(), seqNum, categorySeqDetailBean.getCategoryType());
				if(null!=categorySeqDetailBean.getChangeSelectionCategoryCd())
				{
				categorySelectionProfileManager.persistSequence(appNumber, categorySeqDetailBean.getChangeSelectionCategoryCd(), String.valueOf(categorySeqDetailBean.getIndividualSequence()), String.valueOf(seqNum), categorySeqDetailBean.getCategoryType(), "0");
				}
				if (appInJntOwnColl != null) {
					int appInJntCollSize = appInJntOwnColl.size();
					APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
					for (int i = 0; i < appInJntCollSize; i++) {
						jntOwnCargo = appInJntOwnColl.getCargo(i);
						if (jntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(jntOwnCargo
										.getJnt_indv_seq_num())
										&& (jntOwnCargo.getJnt_own_fst_nam() == null || jntOwnCargo
										.getJnt_own_fst_nam().trim().length() == 0)
										&& (jntOwnCargo.getJnt_own_last_nam() == null || jntOwnCargo
										.getJnt_own_last_nam().trim().length() == 0)
										&& (jntOwnCargo.getOtsd_ind() == null || jntOwnCargo
										.getOtsd_ind().trim().length() == 0)) {
							appInJntOwnColl.remove(i);
							i--;
							appInJntCollSize--;
						}
					}
				}
				// EDSP Added life coverage
				if (appInLifInsCvrgColl != null) {
					int cpAppInLifInsCollSize = appInLifInsCvrgColl.size();
					CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsCargo = null;
					for (int i = 0; i < cpAppInLifInsCollSize; i++) {
						appInLifInsCargo = appInLifInsCvrgColl.getCargo(i);
						if ((appInLifInsCargo.getFirst_name() == null || appInLifInsCargo
								.getFirst_name().trim().length() == 0)
								&& (appInLifInsCargo.getLast_name() == null || appInLifInsCargo
								.getLast_name().trim().length() == 0)
								&& appInLifInsCargo.getCovered_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInLifInsCargo
										.getCovered_indv_seq_num())) {
							appInLifInsCvrgColl.remove(i);
							i--;
							cpAppInLifInsCollSize--;
						}
					}
				}

			}

			String jsEnabled = FwConstants.NO;
			final Map sessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
			if (sessionMap != null) {
				if (sessionMap.get(FwConstants.JS_ENABLED) != null) {
					jsEnabled = (String) sessionMap.get(FwConstants.JS_ENABLED);
				}
			}

			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (appInJntOwnColl != null) {
				int appInJntCollSize = appInJntOwnColl.size();
				APP_IN_JNT_OWN_Cargo jntOwnCargo = null;
				for (int i = 0; i < appInJntCollSize; i++) {
					jntOwnCargo = appInJntOwnColl.getCargo(i);

					if (FwConstants.YES.equals(jntOwnCargo.getOtsd_ind())) {
						continue;
					}
					if (!FwConstants.YES.equals(jntOwnCargo.getAset_typ())) {

						appInJntOwnColl.remove(i);
						i--;
						appInJntCollSize--;
					}
				}
			}
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}
			final PeopleHandler peopleHandler = (PeopleHandler) session
					.get(AppConstants.INDIV_MASTER_HANDLER);
			// EDSP Need to do validations
			if (backToMyAccess == null) {
				if (userEndInd == 1) {
					arlidValidator.validateEndScreen(rmcInLifeInsCargo);
				} else {
					arlidValidator.validateRestOfPageContents(
							rmcInLifeInsCargo, peopleHandler, request,
							beforeColl);
					arlidValidator.validateJointOwnerInformation(
							appInJntOwnColl, jsEnabled);
				}

			}

			if (checkBackToMyAccessSelected(request)
					|| arlidValidator.hasMessages()) {
				if (backToMyAccess == null) {
					request.put(FwConstants.MESSAGE_LIST,
							arlidValidator.getMessageList());
				}
				if (rmcInLifeInsCargo != null) {
					rmcInLifeInsCargo.setLife_ins_aset_typ((String) beforeColl
							.get("OTHER_LIQ_ASST_TYPE"));
					if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
						rmcInLifeInsCargo.setJnt_own_resp(FwConstants.YES);
					}
				}

				peopleHandler.getInHomeIndividuals();

				pageCollection.put("PEOPLE_377", beforeColl.get("PEOPLE_377"));
				pageCollection.put("PEOPLE_362", beforeColl.get("PEOPLE_362"));
				// put the first Name into pageCollection to avoid null pointer
				// in JSP
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));

				pageCollection.put("INDIVIDUAL_Custom_Collection",
						beforeColl.get("INDIVIDUAL_Custom_Collection"));
				pageCollection.put("LIFE_TYPE", beforeColl.get("LIFE_TYPE"));
				pageCollection.put("APP_IN_L_INS_ASET_Collection",
						rmcInLifeInsCollection);
				pageCollection
				.put("APP_IN_JNT_OWN_Collection", appInJntOwnColl);
				pageCollection.put("CP_APP_IN_LIF_INS_CVRG_Collection",
						appInLifInsCvrgColl);
				pageCollection.put(AppConstants.FIRST_NAME,
						beforeColl.get(AppConstants.FIRST_NAME));
				if (request.get("loopingQuestion") != null) {
					request.put("loopingQuestion",
							request.get("loopingQuestion"));
				}
				pageCollection.put("showLoopingQuestion",
						beforeColl.get("showLoopingQuestion"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST,
						beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));

				pageCollection.put("PAGE_MODE", beforeColl.get("PAGE_MODE"));
				if (beforeColl.containsKey("SEC_LIFE")) {
					pageCollection.put("SEC_LIFE", beforeColl.get("SEC_LIFE"));
				}
				if (beforeColl.containsKey("SEC_JNT")) {
					pageCollection.put("SEC_JNT", beforeColl.get("SEC_JNT"));
				}
				pageCollection.put("FST_JNT", appInJntOwnColl);
				if (beforeColl.containsKey("SEC_LIFECVRG")) {

					pageCollection.put("SEC_LIFECVRG",
							beforeColl.get("SEC_LIFECVRG"));
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented
					 * Code in this block
					 */

				}
				pageCollection.put("FST_LIFE", rmcInLifeInsCargo);
				return;
			}
			// EDSP RMC

			if (rmcInLifeInsCargo.getAcquired_dt() != null
					&& rmcInLifeInsCargo.getAcquired_dt().trim().length() != 0
					&& !AppConstants.HIGH_DATE.equals(rmcInLifeInsCargo
							.getAcquired_dt())) {
				if (rmcInLifeInsCargo.getAcquired_dt().length() == 10
						&& rmcInLifeInsCargo.getAcquired_dt().charAt(2) == '/') {
					final StringBuilder dateConverter = new StringBuilder();
					final String sAppDate = rmcInLifeInsCargo.getAcquired_dt();
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					rmcInLifeInsCargo.setAcquired_dt(dateConverter.toString());
				}
			}
			if (AppConstants.REPORT_END_MODE.equals(pageMode)) {
				if (rmcInLifeInsCargo.getAsset_end_dt().length() == 10
						&& rmcInLifeInsCargo.getAsset_end_dt().charAt(2) == '/') {
					final StringBuilder dateConverter = new StringBuilder();
					final String sAppDate = rmcInLifeInsCargo.getAsset_end_dt();
					dateConverter.append(sAppDate.substring(6, 10)).append("-")
					.append(sAppDate.substring(0, 2)).append("-")
					.append(sAppDate.substring(3, 5));
					rmcInLifeInsCargo.setAsset_end_dt(dateConverter.toString());
				}
			}
			String completedCheck = lifeInsuranceBO
					.completenessCheckARLID(rmcInLifeInsCargo);
			completedCheck = FwConstants.ZERO;
			rmcInLifeInsCargo.setRec_cplt_ind(completedCheck);

			if (lifeInsuranceDetailsUpdate) {
				if (FwConstants.ROWACTION_INSERT.equals(rmcInLifeInsCargo
						.getRowAction())) {
					lifeInsuranceBO
					.insertExistingDetails(rmcInLifeInsCollection);
				} else {
					lifeInsuranceBO.storeLifeInsDetails(rmcInLifeInsCollection);
				}
			}

			APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntOwnNewColl = new APP_IN_JNT_OWN_Collection();
			APP_IN_JNT_OWN_Cargo appInJntOwnBeforeCargo = null;


			// user pressed back and the before collection is not null delete it
			// else update it.

			final CP_APP_IN_LIF_INS_CVRG_Collection cpAppInLifInsNewColl = new CP_APP_IN_LIF_INS_CVRG_Collection();

			CP_APP_IN_LIF_INS_CVRG_Cargo appInLifecvrgCwMatchCargo = null;
			final CP_APP_IN_LIF_INS_CVRG_Collection appInLifecvrgBeforeCWColl = (CP_APP_IN_LIF_INS_CVRG_Collection) beforeColl
					.get("SEC_LIFECVRG");

			int cvrdSeqNum = lifeInsuranceBO.getMaxCoveredSeqNumber(appNumber,
					indvSeqNum);
			// Edsp Life Cvrg ends
			if (appInLifInsCvrgBeforeColl != null) {
				final int appInCvrgBeforeCollSize = appInLifInsCvrgBeforeColl
						.size();
				for (int i = 0; i < appInCvrgBeforeCollSize; i++) {
					appInLifInsCvrgBeforeCargo = appInLifInsCvrgBeforeColl
							.getCargo(i);
					if (appInLifInsCvrgBeforeCargo.getCovered_indv_seq_num() == null) {
						appInLifecvrgCwMatchCargo = lifeInsuranceBO
								.splitLifeInsCvrgColl(
										appInLifecvrgBeforeCWColl,
										appInLifInsCvrgBeforeCargo
										.getCovered_seq_num(),
										AppConstants.CWW_RECORD_IND);
						appInLifInsCvrgCargo = getCWCvrgMatchingCargo(
								appInLifInsCvrgColl, appInLifecvrgCwMatchCargo);
						if (appInLifInsCvrgCargo != null) {
							appInLifInsCvrgCargo.setApp_num(rmcInLifeInsCargo
									.getApp_num());
							appInLifInsCvrgCargo.setSeq_num(rmcInLifeInsCargo
									.getSeq_num());
							appInLifInsCvrgCargo
							.setIndv_seq_num(rmcInLifeInsCargo
									.getIndv_seq_num());

							if (appInLifInsCvrgCargo.getCovered_indv_seq_num() != null
									&& FwConstants.ZERO
									.equals(appInLifInsCvrgCargo
											.getCovered_indv_seq_num())) {
								appInLifInsCvrgCargo
								.setOtsd_ind(FwConstants.YES);
							} else {
								appInLifInsCvrgCargo.setOtsd_ind(null);
							}
							if (appInLifInsCvrgCargo.getFirst_name() != null
									&& appInLifInsCvrgCargo.getFirst_name()
									.isEmpty()) {
								appInLifInsCvrgCargo.setFirst_name(null);
							}
							if (appInLifInsCvrgCargo.getLast_name() != null
									&& appInLifInsCvrgCargo.getLast_name()
									.isEmpty()) {
								appInLifInsCvrgCargo.setLast_name(null);
							}

							if (appInLifInsCvrgCargo.getCovered_seq_num() == null
									|| FwConstants.ZERO
									.equals(appInLifInsCvrgCargo
											.getCovered_seq_num())) {
								appInLifInsCvrgCargo
								.setCovered_seq_num(appInLifecvrgCwMatchCargo
										.getCovered_seq_num());
							}
							appInLifInsCvrgCargo
							.setRec_cplt_ind(completedCheck);

							appInLifInsCvrgCargo = (CP_APP_IN_LIF_INS_CVRG_Cargo) isChanged(
									appInLifecvrgCwMatchCargo,
									appInLifInsCvrgCargo);
							appInLifInsCvrgCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInLifInsCvrgCargo.isDirty()) {
								if (appInLifInsCvrgCargo.getIndv_seq_num()
										.equals(appInLifInsCvrgBeforeCargo
												.getIndv_seq_num())
												&& appInLifInsCvrgCargo
												.getSeq_num()
												.equals(appInLifInsCvrgBeforeCargo
														.getSeq_num())

														&& appInLifInsCvrgCargo
														.getCovered_seq_num()
														.equals(appInLifInsCvrgBeforeCargo
																.getCovered_seq_num())) {
									appInLifInsCvrgCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									cpAppInLifInsNewColl
									.add(appInLifInsCvrgCargo);
								}
							} else {
								appInLifInsCvrgBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								cpAppInLifInsNewColl
								.add(appInLifInsCvrgBeforeCargo);
							}
						}

					} else {

						appInLifInsCvrgCargo = getMatchingInsCVRGCargo(
								appInLifInsCvrgColl, appInLifInsCvrgBeforeCargo);

						if (appInLifInsCvrgCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInLifInsCvrgCargo = getCWCvrgMatchingCargo(
										appInLifecvrgBeforeCWColl,
										appInLifInsCvrgBeforeCargo);
								if (appInLifInsCvrgCargo != null) {
									appInLifInsCvrgCargo = new CP_APP_IN_LIF_INS_CVRG_Cargo();
									// now we need to check the dirty indicator
									appInLifInsCvrgCargo
									.setApp_num(rmcInLifeInsCargo
											.getApp_num());
									appInLifInsCvrgCargo
									.setSeq_num(rmcInLifeInsCargo
											.getSeq_num());
									appInLifInsCvrgCargo
									.setCovered_indv_seq_num(null);
									appInLifInsCvrgCargo
									.setIndv_seq_num(rmcInLifeInsCargo
											.getIndv_seq_num());

									appInLifInsCvrgCargo.setOtsd_ind(null);
									if (appInLifInsCvrgCargo.getFirst_name() != null
											&& appInLifInsCvrgCargo
											.getFirst_name().isEmpty()) {
										appInLifInsCvrgCargo
										.setFirst_name(null);
									}
									if (appInLifInsCvrgCargo.getLast_name() != null
											&& appInLifInsCvrgCargo
											.getLast_name().isEmpty()) {
										appInLifInsCvrgCargo.setLast_name(null);
									}

									if (appInLifInsCvrgCargo
											.getCovered_seq_num() == null
											|| FwConstants.ZERO
											.equals(appInLifInsCvrgCargo
													.getCovered_seq_num())) {
										appInLifInsCvrgCargo
										.setCovered_seq_num(appInLifInsCvrgBeforeCargo
												.getCovered_seq_num());
									}
									appInLifInsCvrgCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInLifInsCvrgBeforeCargo
													.getSrc_app_ind())) {
										appInLifInsCvrgCargo
										.setRec_cplt_ind(completedCheck);
										appInLifInsCvrgCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInLifInsCvrgCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									cpAppInLifInsNewColl
									.add(appInLifInsCvrgCargo);

								} else {

									if (appInLifInsCvrgBeforeCargo != null
											&& appInLifInsCvrgBeforeCargo
											.getCovered_indv_seq_num() != null) {
										appInLifInsCvrgBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										cpAppInLifInsNewColl
										.add(appInLifInsCvrgBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInLifInsCvrgCargo.setApp_num(rmcInLifeInsCargo
									.getApp_num());
							appInLifInsCvrgCargo.setSeq_num(rmcInLifeInsCargo
									.getSeq_num());
							appInLifInsCvrgCargo
							.setIndv_seq_num(rmcInLifeInsCargo
									.getIndv_seq_num());

							if (appInLifInsCvrgCargo.getCovered_indv_seq_num() != null
									&& FwConstants.ZERO
									.equals(appInLifInsCvrgCargo
											.getCovered_indv_seq_num())) {
								appInLifInsCvrgCargo
								.setOtsd_ind(FwConstants.YES);
							} else {
								appInLifInsCvrgCargo.setOtsd_ind(null);
							}
							if (appInLifInsCvrgCargo.getFirst_name() != null
									&& appInLifInsCvrgCargo.getFirst_name()
									.isEmpty()) {
								appInLifInsCvrgCargo.setFirst_name(null);
							}
							if (appInLifInsCvrgCargo.getLast_name() != null
									&& appInLifInsCvrgCargo.getLast_name()
									.isEmpty()) {
								appInLifInsCvrgCargo.setLast_name(null);
							}

							if (appInLifInsCvrgCargo.getCovered_seq_num() == null
									|| FwConstants.ZERO
									.equals(appInLifInsCvrgCargo
											.getCovered_seq_num())) {
								appInLifInsCvrgCargo
								.setCovered_seq_num(appInLifInsCvrgBeforeCargo
										.getCovered_seq_num());
							}
							appInLifInsCvrgCargo
							.setRec_cplt_ind(completedCheck);

							appInLifInsCvrgCargo = (CP_APP_IN_LIF_INS_CVRG_Cargo) isChanged(
									appInLifInsCvrgBeforeCargo,
									appInLifInsCvrgCargo);
							appInLifInsCvrgCargo
							.setSrc_app_ind(sourceAppIndicator);

							if (appInLifInsCvrgCargo.isDirty()) {
								if (appInLifInsCvrgCargo.getIndv_seq_num()
										.equals(appInLifInsCvrgBeforeCargo
												.getIndv_seq_num())
												&& appInLifInsCvrgCargo
												.getSeq_num()
												.equals(appInLifInsCvrgBeforeCargo
														.getSeq_num())

														&& appInLifInsCvrgCargo
														.getCovered_seq_num()
														.equals(appInLifInsCvrgBeforeCargo
																.getCovered_seq_num())
																&& appInLifInsCvrgCargo
																.getSrc_app_ind() != null
																&& appInLifInsCvrgCargo
																.getSrc_app_ind()
																.equals(appInLifInsCvrgBeforeCargo
																		.getSrc_app_ind())) {
									appInLifInsCvrgCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									cvrdSeqNum = cvrdSeqNum + 1;
									appInLifInsCvrgCargo
									.setCovered_seq_num(String
											.valueOf(cvrdSeqNum));

									// EDSP RMC adding src of innd

									appInLifInsCvrgCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								cpAppInLifInsNewColl.add(appInLifInsCvrgCargo);
							}
						}
					}
				}
			}

			if (appInLifInsCvrgColl != null) {
				final int appInCvrgCollSize = appInLifInsCvrgColl.size();
				for (int i = 0; i < appInCvrgCollSize; i++) {
					appInLifInsCvrgCargo = appInLifInsCvrgColl.getCargo(i);
					appInLifInsCvrgBeforeCargo = getMatchingInsCVRGCargo(
							appInLifInsCvrgBeforeColl, appInLifInsCvrgCargo);

					if (appInLifInsCvrgBeforeCargo == null) {
						appInLifInsCvrgBeforeCargo = getCWCvrgMatchingCargo(
								appInLifecvrgBeforeCWColl, appInLifInsCvrgCargo);
					}

					if (appInLifInsCvrgBeforeCargo == null) {
						appInLifInsCvrgCargo.setApp_num(rmcInLifeInsCargo
								.getApp_num());
						appInLifInsCvrgCargo.setSeq_num(rmcInLifeInsCargo
								.getSeq_num());
						appInLifInsCvrgCargo.setIndv_seq_num(rmcInLifeInsCargo
								.getIndv_seq_num());

						if (appInLifInsCvrgCargo.getCovered_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInLifInsCvrgCargo
										.getCovered_indv_seq_num())) {
							appInLifInsCvrgCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInLifInsCvrgCargo.setOtsd_ind(null);
						}
						if (appInLifInsCvrgCargo.getFirst_name() != null
								&& appInLifInsCvrgCargo.getFirst_name()
								.isEmpty()) {
							appInLifInsCvrgCargo.setFirst_name(null);
						}
						if (appInLifInsCvrgCargo.getLast_name() != null
								&& appInLifInsCvrgCargo.getLast_name()
								.isEmpty()) {
							appInLifInsCvrgCargo.setLast_name(null);
						}
						appInLifInsCvrgCargo.setRec_cplt_ind(completedCheck);

						// EDSP RMC adding src of innd
						appInLifInsCvrgCargo.setSrc_app_ind(sourceAppIndicator);

						cvrdSeqNum = cvrdSeqNum + 1;
						appInLifInsCvrgCargo.setCovered_seq_num(String
								.valueOf(cvrdSeqNum));
						appInLifInsCvrgCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						cpAppInLifInsNewColl.add(appInLifInsCvrgCargo);

					}
				}
			}

			lifeInsuranceBO.storeLifeCoverageDetails(cpAppInLifInsNewColl);
			// End

			APP_IN_JNT_OWN_Cargo appInJntCwMatchCargo = null;
			final APP_IN_JNT_OWN_Collection appInJntBeforeCWColl = (APP_IN_JNT_OWN_Collection) beforeColl
					.get("SEC_JNT");
			final LifeInsuranceBO lifeBo = new LifeInsuranceBO();
			final RealPropertyBO aBRealPropertyDetailsBO = new RealPropertyBO();
			int jntSeqNum = aBRealPropertyDetailsBO.getMaxJntSeqNumber(
					appNumber, indvSeqNum);
			// Edsp Life Cvrg ends
			if (appInJntBeforeColl != null && !appInJntBeforeColl.isEmpty()) {
				final int appInjntBeforeCollSize = appInJntBeforeColl.size();
				for (int i = 0; i < appInjntBeforeCollSize; i++) {
					appInJntOwnBeforeCargo = appInJntBeforeColl.getCargo(i);
					if (appInJntOwnBeforeCargo.getJnt_indv_seq_num() == null) {
						appInJntCwMatchCargo = lifeBo.splitJointColl(
								appInJntBeforeCWColl,
								appInJntOwnBeforeCargo.getSeq_num(),
								AppConstants.CWW_RECORD_IND);
						appInJntOwnCargo = getCWMatchingCargo(appInJntOwnColl,
								appInJntCwMatchCargo);
						if (appInJntOwnCargo != null) {
							appInJntOwnCargo.setApp_num(rmcInLifeInsCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInLifeInsCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(rmcInLifeInsCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(rmcInLifeInsCargo
									.getLife_ins_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIFE_INSURANCE);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntCwMatchCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntCwMatchCargo, appInJntOwnCargo);
							appInJntOwnCargo
							.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
									appInJntOwnNewColl.add(appInJntOwnCargo);
								}
							} else {
								appInJntOwnBeforeCargo
								.setRowAction(FwConstants.ROWACTION_DELETE);
								appInJntOwnNewColl.add(appInJntOwnBeforeCargo);
							}
						}

					} else {

						appInJntOwnCargo = getMatchingCargo(appInJntOwnColl,
								appInJntOwnBeforeCargo);

						if (appInJntOwnCargo == null) {
							if (!AppConstants.RMC_END_RECORD_IND
									.equalsIgnoreCase(sourceAppIndicator)) {

								appInJntOwnCargo = getCWMatchingCargo(
										appInJntBeforeCWColl,
										appInJntOwnBeforeCargo);
								if (appInJntOwnCargo != null) {
									appInJntOwnCargo = new APP_IN_JNT_OWN_Cargo();
									// now we need to check the dirty indicator
									appInJntOwnCargo
									.setApp_num(rmcInLifeInsCargo
											.getApp_num());
									appInJntOwnCargo
									.setJnt_own_seq_num(rmcInLifeInsCargo
											.getSeq_num());
									appInJntOwnCargo.setJnt_indv_seq_num(null);
									appInJntOwnCargo
									.setIndv_seq_num(rmcInLifeInsCargo
											.getIndv_seq_num());
									appInJntOwnCargo
									.setAset_sub_typ(rmcInLifeInsCargo
											.getLife_ins_aset_typ());
									appInJntOwnCargo
									.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIFE_INSURANCE);
									appInJntOwnCargo.setOtsd_ind(null);
									if (appInJntOwnCargo.getJnt_own_fst_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_fst_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_fst_nam(null);
									}
									if (appInJntOwnCargo.getJnt_own_last_nam() != null
											&& appInJntOwnCargo
											.getJnt_own_last_nam()
											.isEmpty()) {
										appInJntOwnCargo
										.setJnt_own_last_nam(null);
									}

									if (appInJntOwnCargo.getSeq_num() == null) {
										appInJntOwnCargo
										.setSeq_num(appInJntOwnBeforeCargo
												.getSeq_num());
									}
									appInJntOwnCargo
									.setSrc_app_ind(sourceAppIndicator);
									if (AppConstants.CWW_RECORD_IND
											.equals(appInJntOwnBeforeCargo
													.getSrc_app_ind())) {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_INSERT);
									} else {
										appInJntOwnCargo
										.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									appInJntOwnNewColl.add(appInJntOwnCargo);

								} else {

									if (appInJntOwnBeforeCargo != null
											&& appInJntOwnBeforeCargo
											.getJnt_indv_seq_num() != null) {
										appInJntOwnBeforeCargo
										.setRowAction(FwConstants.ROWACTION_DELETE);
										appInJntOwnNewColl
										.add(appInJntOwnBeforeCargo);
									}
								}
							}
						} else {
							// now we need to check the dirty indicator
							appInJntOwnCargo.setApp_num(rmcInLifeInsCargo
									.getApp_num());
							appInJntOwnCargo
							.setJnt_own_seq_num(rmcInLifeInsCargo
									.getSeq_num());
							appInJntOwnCargo.setIndv_seq_num(rmcInLifeInsCargo
									.getIndv_seq_num());
							appInJntOwnCargo.setAset_sub_typ(rmcInLifeInsCargo
									.getLife_ins_aset_typ());
							appInJntOwnCargo
							.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIFE_INSURANCE);
							if (appInJntOwnCargo.getJnt_indv_seq_num() != null
									&& FwConstants.ZERO.equals(appInJntOwnCargo
											.getJnt_indv_seq_num())) {
								appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
							} else {
								appInJntOwnCargo.setOtsd_ind(null);
							}
							if (appInJntOwnCargo.getJnt_own_fst_nam() != null
									&& appInJntOwnCargo.getJnt_own_fst_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_fst_nam(null);
							}
							if (appInJntOwnCargo.getJnt_own_last_nam() != null
									&& appInJntOwnCargo.getJnt_own_last_nam()
									.isEmpty()) {
								appInJntOwnCargo.setJnt_own_last_nam(null);
							}

							if (appInJntOwnCargo.getSeq_num() == null) {
								appInJntOwnCargo
								.setSeq_num(appInJntOwnBeforeCargo
										.getSeq_num());
							}
							appInJntOwnCargo = (APP_IN_JNT_OWN_Cargo) isChanged(
									appInJntOwnBeforeCargo, appInJntOwnCargo);
							appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

							if (appInJntOwnCargo.isDirty()) {
								if (appInJntOwnCargo.getIndv_seq_num().equals(
										appInJntOwnBeforeCargo
										.getIndv_seq_num())
										&& appInJntOwnCargo.getSeq_num()
										.equals(appInJntOwnBeforeCargo
												.getSeq_num())
												&& appInJntOwnCargo.getAset_typ()
												.equals(appInJntOwnBeforeCargo
														.getAset_typ())
														&& appInJntOwnCargo.getAset_sub_typ()
														.equals(appInJntOwnBeforeCargo
																.getAset_sub_typ())
																&& appInJntOwnCargo
																.getJnt_own_seq_num()
																.equals(appInJntOwnBeforeCargo
																		.getJnt_own_seq_num())
																		&& appInJntOwnCargo.getSrc_app_ind() != null
																		&& appInJntOwnCargo.getSrc_app_ind()
																		.equals(appInJntOwnBeforeCargo
																				.getSrc_app_ind())) {
									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_UPDATE);
								} else {

									jntSeqNum = jntSeqNum + 1;
									appInJntOwnCargo.setSeq_num(String
											.valueOf(jntSeqNum));

									// EDSP RMC adding src of innd

									appInJntOwnCargo
									.setRowAction(FwConstants.ROWACTION_INSERT);
								}
								appInJntOwnNewColl.add(appInJntOwnCargo);
							}
						}
					}
				}
			}
			// values entered and when the user tries to save the record first
			// time
			if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
				final int appInJntCollSize = appInJntOwnColl.size();
				for (int i = 0; i < appInJntCollSize; i++) {
					appInJntOwnCargo = appInJntOwnColl.getCargo(i);
					appInJntOwnBeforeCargo = getMatchingCargo(
							appInJntBeforeColl, appInJntOwnCargo);

					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnBeforeCargo = getCWMatchingCargo(
								appInJntBeforeCWColl, appInJntOwnCargo);
					}
					if (appInJntOwnBeforeCargo == null) {
						appInJntOwnCargo.setApp_num(rmcInLifeInsCargo
								.getApp_num());
						appInJntOwnCargo.setJnt_own_seq_num(rmcInLifeInsCargo
								.getSeq_num());
						appInJntOwnCargo.setIndv_seq_num(rmcInLifeInsCargo
								.getIndv_seq_num());
						appInJntOwnCargo.setAset_sub_typ(rmcInLifeInsCargo
								.getLife_ins_aset_typ());
						appInJntOwnCargo
						.setAset_typ(AppConstants.JOINT_OWNER_TYPE_LIFE_INSURANCE);
						if (appInJntOwnCargo.getJnt_indv_seq_num() != null
								&& FwConstants.ZERO.equals(appInJntOwnCargo
										.getJnt_indv_seq_num())) {
							appInJntOwnCargo.setOtsd_ind(FwConstants.YES);
						} else {
							appInJntOwnCargo.setOtsd_ind(null);
						}
						if (appInJntOwnCargo.getJnt_own_fst_nam() != null
								&& appInJntOwnCargo.getJnt_own_fst_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_fst_nam(null);
						}
						if (appInJntOwnCargo.getJnt_own_last_nam() != null
								&& appInJntOwnCargo.getJnt_own_last_nam()
								.isEmpty()) {
							appInJntOwnCargo.setJnt_own_last_nam(null);
						}

						if (appInJntOwnCargo.getSeq_num() == null) {
							appInJntOwnCargo.setSeq_num(FwConstants.ZERO);
						}
						// EDSP RMC adding src of innd
						appInJntOwnCargo.setSrc_app_ind(sourceAppIndicator);

						jntSeqNum = jntSeqNum + 1;
						appInJntOwnCargo.setSeq_num(String.valueOf(jntSeqNum));

						appInJntOwnCargo
						.setSrc_app_ind(AppConstants.RMC_MODIFIED_RECORD_IND);
						appInJntOwnCargo
						.setRowAction(FwConstants.ROWACTION_INSERT);
						appInJntOwnNewColl.add(appInJntOwnCargo);

					}
				}
			}

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			vehicleAssetBO.storeJointOwnerDetails(appInJntOwnNewColl);

			boolean loopingQuestion = false;
			if (request.get("loopingQuestion") != null
					&& FwConstants.YES.equals(request.get("loopingQuestion"))) {
				loopingQuestion = true;
				// Insert into APP_IN_L_INS_ASET
				categorySelectionProfileManager.insertSequenceDetail(
						lifeInsProfile, null, null,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategoryType());
				driverManager.makeRequired(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			}

			//
			if (!loopingQuestion
//					&& categorySeqDetailBean.getChangeSelectionCategoryCd() == null
					) {
				final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
						.get(AppConstants.RMC_IN_PRFL_MASTER);
				final RMC_IN_PRFL_Cargo rmcInPrflCargo = rmcResponseProfileManager
						.getProfile(rmcInPrflColl, String
								.valueOf(categorySeqDetailBean
										.getIndividualSequence()));
				if (rmcInPrflCargo != null) {
					rmcResponseProfileManager
					.makeComplete(
							rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.LIFE_INSURANCE_ASSET_DETAILS,
									categorySeqDetailBean
									.getCategoryType()),
									rmcInPrflCargo, true);
					rmcResponseProfileManager
					.makeComplete(
							IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
							rmcInPrflCargo, true);

				}
			}
			// Mark complete job sequence using common methods
			if(categorySeqDetailBean.getChangeSelectionCategoryCd() == null)
			{
			categorySelectionProfileManager.makeSequenceDetailComplete(
					lifeInsProfile, null,
					categorySeqDetailBean.getIndividualSequence(),
					categorySeqDetailBean.getCategorySequence(),
					categorySeqDetailBean.getCategoryType());
			}
			else{
			categorySelectionProfileManager.makeSequenceDetailComplete(
						lifeInsProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());	
			}
			if (categorySelectionProfile != null) {
				categorySelectionProfileManager.makeSequenceDetailComplete(
						categorySelectionProfile, appNumber,
						categorySeqDetailBean.getIndividualSequence(),
						categorySeqDetailBean.getCategorySequence(),
						categorySeqDetailBean.getCategoryType());
			}
			if (categorySelectionProfileManager
					.areAllSequencesComplete(lifeInsProfile)) {
				driverManager.makeComplete(FwConstants.RMC_DRIVER,
						currentPageID, driverArray, appNumber);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNumber);
			} else {
				categorySelectionProfileManager
				.getNextSequenceDetail(lifeInsProfile);
			}

			driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAC",
					driverArray, appNumber);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeLifeInsuranceDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Load asset summary.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadAssetSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetSummary() - START");
		log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::loadAssetSummary:Start");

		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		final String appType = (String) session
				.get(FwConstants.ACCESS_APPLICATION_TYPE);
		final Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);

		// Get App Number
		final String appNum = (String) session.get(AppConstants.APP_NUMBER);
		final int[] driverArray = (int[]) session.get(FwConstants.RMC_DRIVER);
		final int driverStatus = driverManager.getAFBStatus(
				FwConstants.RMC_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray);

		SortedSet selectionProfile = (SortedSet) session
				.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
		final RMC_IN_PRFL_Collection prflColl = (RMC_IN_PRFL_Collection) session
				.get(AppConstants.RMC_IN_PRFL_MASTER);

		// Getting PeopleHandler from session
		final PeopleHandler peopleHandler = (PeopleHandler) session
				.get(AppConstants.INDIV_MASTER_HANDLER);

		// for Cash resources
		boolean loadCashCatSelProfile = false;

		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			// load selection profile form the data base
			loadCashCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			// here we need to check the session profile is liquid resources
			// session profile
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_LIQUID_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadCashCatSelProfile = false;
				} else {
					loadCashCatSelProfile = true;
				}
			}
		}
		// for Financial Account resources
		boolean loadFinancialAccCatSelProfile = false;

		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			// load selection profile form the data base
			loadFinancialAccCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			// here we need to check the session profile is liquid resources
			// session profile
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_LIQUID_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadFinancialAccCatSelProfile = false;
				} else {
					loadFinancialAccCatSelProfile = true;
				}
			}
		}
		// for other liquid resources
		boolean loadOtherLiqAsstCatSelProfile = false;

		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			// load selection profile form the data base
			loadOtherLiqAsstCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			// here we need to check the session profile is liquid resources
			// session profile
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_LIQUID_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadOtherLiqAsstCatSelProfile = false;
				} else {
					loadOtherLiqAsstCatSelProfile = true;
				}
			}
		}
		// for sold, transfer or given away resources
		boolean loadSoldTrsfGivenAwyCatSelProfile = false;

		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			// load selection profile form the data base
			loadSoldTrsfGivenAwyCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			// here we need to check the session profile is liquid resources
			// session profile
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_LIQUID_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadSoldTrsfGivenAwyCatSelProfile = false;
				} else {
					loadSoldTrsfGivenAwyCatSelProfile = true;
				}
			}
		}

		// now loading the cat selection profile form the data base
		if (loadCashCatSelProfile || loadFinancialAccCatSelProfile
				|| loadOtherLiqAsstCatSelProfile
				|| loadSoldTrsfGivenAwyCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
		}
		categorySelectionProfileManager
		.resetCurrentSeqeunceDetail(selectionProfile);
		final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

		// Getting language from http session
		final Map httpSessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
		final String language = (String) httpSessionMap
				.get(AppConstants.LANGUAGE);


		final APP_IN_LQD_ASET_Collection liquidAsstDtl = liquidAssetBO
				.loadLiquidAssetDetailsSummary(appNum);
		final APP_IN_LQD_ASET_Collection cashResourceDtl = liquidAssetBO
				.splitLiqCollByAsetType(liquidAsstDtl, "CAS");
		final APP_IN_LQD_ASET_Collection financialAccDtl = liquidAssetBO
				.splitLiqCollByAsetType(liquidAsstDtl, "FA");
		final APP_IN_LQD_ASET_Collection othrLiquidResDtl = liquidAssetBO
				.splitOtherLiqAsetType(liquidAsstDtl, "OT");
		final CP_APP_IN_ASET_XFER_Collection cpAppAsetXferCol = liquidAssetBO
				.loadAssetXferDetails(appNum);

		final int sizeCashResColl = cashResourceDtl.size();
		final int sizeFinAccColl = financialAccDtl.size();
		final int sizeOtherLiqResColl = othrLiquidResDtl.size();
		final int sizeSoldTrsfrAwyColl = cpAppAsetXferCol.size();

		String newOrModifiedCashAssetExists = FwConstants.NO;
		String newOrModifiedFinAccAssetExists = FwConstants.NO;
		String newOrModifiedOtherLiqAssetExists = FwConstants.NO;
		String newOrModifiedXferAssetExists = FwConstants.NO;

		for (int i = 0; i < sizeCashResColl; i++) {
			APP_IN_LQD_ASET_Cargo cashResAssetCargo = new APP_IN_LQD_ASET_Cargo();
			cashResAssetCargo = cashResourceDtl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedCashAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(cashResAssetCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(cashResAssetCargo.getSrc_app_ind())) {
					newOrModifiedCashAssetExists = FwConstants.YES;
				}
			}
		}
		for (int i = 0; i < sizeFinAccColl; i++) {
			APP_IN_LQD_ASET_Cargo financialAccAssetCargo = new APP_IN_LQD_ASET_Cargo();
			financialAccAssetCargo = financialAccDtl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedFinAccAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND
						.equals(financialAccAssetCargo.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(financialAccAssetCargo.getSrc_app_ind())) {
					newOrModifiedFinAccAssetExists = FwConstants.YES;
				}
			}
		}
		for (int i = 0; i < sizeOtherLiqResColl; i++) {
			APP_IN_LQD_ASET_Cargo othrLiquidAssetCargo = new APP_IN_LQD_ASET_Cargo();
			othrLiquidAssetCargo = othrLiquidResDtl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedOtherLiqAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(othrLiquidAssetCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(othrLiquidAssetCargo.getSrc_app_ind())) {
					newOrModifiedOtherLiqAssetExists = FwConstants.YES;
				}
			}
		}
		for (int i = 0; i < sizeSoldTrsfrAwyColl; i++) {
			CP_APP_IN_ASET_XFER_Cargo xferSoldCargo = new CP_APP_IN_ASET_XFER_Cargo();
			xferSoldCargo = cpAppAsetXferCol.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedXferAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(xferSoldCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(xferSoldCargo.getSrc_app_ind())) {
					newOrModifiedXferAssetExists = FwConstants.YES;
				}
			}
		}

		final ARLiquidAssetCashSummaryListView cashSummary = new ARLiquidAssetCashSummaryListView();
		final ARLiquidAssetFinancialAccountSummaryListView bankAccSummary = new ARLiquidAssetFinancialAccountSummaryListView();
		final ARLiquidAssetOtherAssetTransferSummaryListView otherAssetTrnsfrSummary = new ARLiquidAssetOtherAssetTransferSummaryListView();
		final ARLiquidAssetOtherLiquidAssetSummaryListView otherLiqAssetsSummary = new ARLiquidAssetOtherLiquidAssetSummaryListView();

		// Preparing listView for Cash Resource selection
		final List cashDataList = new ArrayList();
		cashDataList.add(cashResourceDtl);
		cashDataList.add(appType);
		cashSummary.setAppType(appType);
		cashSummary.setLanguage(language);
		cashSummary.setName("RMB_LIQUID_ASSET_CASH_LISTVIEW");
		cashSummary.setCollection(cashResourceDtl);
		cashSummary.setDisplayData(cashDataList);
		cashSummary.setPageSize(1000);

		// get list of those who have cash
		final List filterCashDropDown = new ArrayList();
		final APP_IN_LQD_ASET_Collection cashColl = filterCollByType(
				liquidAsstDtl, new String[] { "CAS" },
				IReferenceConstants.FILTER_INCLUDE_MATCH_ONE);
		if (cashColl != null) {
			final int cashCollSize = cashColl.size();
			for (int i = 0; i < cashCollSize; i++) {
				final APP_IN_LQD_ASET_Cargo cashCargo = cashColl.getCargo(i);
				filterCashDropDown.add(cashCargo.getIndv_seq_num());
			}
		}

		// Preparing listView for Financial Account selection
		final List bankDataList = new ArrayList();
		bankDataList.add(financialAccDtl);
		bankDataList.add(appType);
		bankAccSummary.setAppType(appType);
		bankAccSummary.setLanguage(language);
		bankAccSummary.setName("RMB_LIQUID_ASSET_ACCOUNT_LISTVIEW");
		bankAccSummary.setCollection(financialAccDtl);
		bankAccSummary.setDisplayData(bankDataList);
		bankAccSummary.setPageSize(1000);

		// Preparing listView for Other Liquid Assets selection
		final List otherDataList = new ArrayList();
		otherDataList.add(othrLiquidResDtl);
		otherDataList.add(appType);
		otherLiqAssetsSummary.setAppType(appType);
		otherLiqAssetsSummary.setLanguage(language);
		otherLiqAssetsSummary.setName("LIQUID_ASSET_OTHERLIQUIDASSET_LISTVIEW");
		otherLiqAssetsSummary.setCollection(othrLiquidResDtl);
		otherLiqAssetsSummary.setDisplayData(otherDataList);
		otherLiqAssetsSummary.setPageSize(1000);

		// Preparing listView for Asset Transfer selection
		final List soldDataList = new ArrayList();
		soldDataList.add(cpAppAsetXferCol);
		soldDataList.add(appType);
		otherAssetTrnsfrSummary.setAppType(appType);
		otherAssetTrnsfrSummary.setLanguage(language);
		otherAssetTrnsfrSummary.setName("RMB_LIQUID_ASSET_TRANSFER_LISTVIEW");
		otherAssetTrnsfrSummary.setCollection(cpAppAsetXferCol);
		otherAssetTrnsfrSummary.setDisplayData(soldDataList);
		otherAssetTrnsfrSummary.setPageSize(1000);

		// Put into session of these collections
		pageCollection.put("APP_IN_LQD_ASET_CASH_Collection", cashResourceDtl);
		pageCollection.put("NEW_OR_MOD_CASH_EXISTS",
				newOrModifiedCashAssetExists);
		pageCollection.put("APP_IN_LQD_ASET_ACCOUNT_Collection",
				financialAccDtl);
		pageCollection.put("NEW_OR_MOD_FIN_ACC_EXISTS",
				newOrModifiedFinAccAssetExists);
		pageCollection
		.put("APP_IN_LQD_ASET_OTHER_Collection", othrLiquidResDtl);
		pageCollection.put("NEW_OR_MOD_OTHER_LIQ_EXISTS",
				newOrModifiedOtherLiqAssetExists);
		pageCollection.put("CP_APP_IN_ASET_XFER_Collection", cpAppAsetXferCol);
		pageCollection.put("NEW_OR_MOD_ASSET_TRNSFR_EXISTS",
				newOrModifiedXferAssetExists);

		// Poupulating pageCollection with respective response maps
		pageCollection.put("RMB_LIQUID_ASSET_CASH_LISTVIEW", cashSummary);
		pageCollection.put("RMB_LIQUID_ASSET_ACCOUNT_LISTVIEW", bankAccSummary);
		pageCollection.put("LIQUID_ASSET_OTHERLIQUIDASSET_LISTVIEW",
				otherLiqAssetsSummary);
		pageCollection.put("RMB_LIQUID_ASSET_TRANSFER_LISTVIEW",
				otherAssetTrnsfrSummary);

		pageCollection.put("filterCashDropDown", filterCashDropDown);
		
		//Household resources
		final ABHouseHoldMemberBO hmbo = new ABHouseHoldMemberBO();
		APP_INDV_ADDI_INFO_Collection addiInfoColl = new APP_INDV_ADDI_INFO_Collection();
		addiInfoColl = hmbo.getMigFarmWrkrDtl(appNum);
		pageCollection.put("APP_INDV_ADDI_INFO_Collection", addiInfoColl);
		
		// run component manager
		componentManager.getComponents("ARASM", txnBean);

		final Map indvSelectedMap = new HashMap();
		for (int a = 0; a < prflColl.size(); a++) {
			final RMC_IN_PRFL_Cargo cargo = prflColl.getCargo(a);
			indvSelectedMap.put(cargo.getIndv_seq_num(),
					cargo.getOther_asset_transfer_resp());
		}

		final INDIVIDUAL_Custom_Collection indvColl = peopleHandler
				.getInHomeIndividuals();

		pageCollection.put("PEOPLE_5257", indvColl);
		txnBean.setPageCollection(pageCollection);
		final Map newAssetMap = new HashMap();
		pageCollection.put("NEW_ASSET_MAP", newAssetMap);
		final Map overrideMap = (Map) beforeColl.get("NEW_ASSET_OVERRIDE");
		pageCollection.put("NEW_ASSET_OVERRIDE", overrideMap);
		pageCollection.put("NO_ONE_Collection",
				pageCollection.get("NO_ONE_Collection"));
		session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
		txnBean.setSession(session);

		log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::loadAssetSummary:End");
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadAssetSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store asset summary.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeAssetSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeAssetSummary() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetSummary:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();

			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final NO_ONE_Collection noOneColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");

			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);
			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			final Map noOneCheckedMap = (Map) beforeColl
					.get(AppConstants.NO_ONE_CHECKED_MAP);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "ARASM",
					driverArray);
			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			final RMB_RQST_Collection sessRqstColl = (RMB_RQST_Collection) session
					.get(AppConstants.RMB_RQST_COLLECTION);
			if (sessRqstColl != null) {
				sessRqstColl.getCargo(0);
			}

			final RMC_IN_PRFL_Collection beforePrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			final RMC_IN_PRFL_Collection rmcPrflColl = (RMC_IN_PRFL_Collection) pageCollection
					.get("RMC_IN_PRFL_Collection");
			rmcResponseProfileManager.getMaxIndvSeqNumber(beforePrflColl);

			final ARASMValidator validator = new ARASMValidator();

			if (validator.hasMessages()) {
				request.put(FwConstants.MESSAGE_LIST,
						validator.getMessageList());
				pageCollection
				.put("PEOPLE_5256", beforeColl.get("PEOPLE_5256"));
				pageCollection
				.put("PEOPLE_5257", beforeColl.get("PEOPLE_5257"));
				pageCollection.put("filterCashDropDown",
						beforeColl.get("filterCashDropDown"));

				final Map indvSelectedMap = new HashMap();
				for (int a = 0; a < rmcPrflColl.size(); a++) {
					final RMC_IN_PRFL_Cargo cargo = rmcPrflColl.getCargo(a);
					if (AppConstants.YES.equalsIgnoreCase(cargo
							.getOther_asset_transfer_resp())) {
						indvSelectedMap
						.put(cargo.getIndv_seq_num(),
								String.valueOf(ICategorySelectionProfileManager.STATUS_REQUIRED));
					}
				}

				pageCollection.put("RESP_MAP_5257", indvSelectedMap);

				if (noOneColl != null && !noOneColl.isEmpty()) {
					noOneCheckedMap.put("NO_ONE_CHECKED_5257", FwConstants.YES);
				}
				pageCollection.put("NO_ONE_Collection", noOneColl);

				pageCollection.put("CP_APP_IN_ASET_XFER_Collection",
						beforeColl.get("CP_APP_IN_ASET_XFER_Collection"));
				pageCollection.put("APP_IN_LQD_ASET_Collection",
						beforeColl.get("APP_IN_LQD_ASET_Collection"));
				pageCollection.put("NEW_OR_MOD_LIQUID_EXISTS",
						beforeColl.get("NEW_OR_MOD_LIQUID_EXISTS"));
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);
				componentManager.getComponents("ARASM", txnBean);
				return;

			}

			final LiquidAssetBO liquidAssestBo = new LiquidAssetBO();
			final APP_IN_LQD_ASET_Collection modifiedFinanceAssets = liquidAssestBo
					.loadModifiedFinanceCollection(appNum);
			final APP_IN_LQD_ASET_Collection modifiedCashAssets = liquidAssestBo
					.loadModifiedCashCollection(appNum);
			final APP_IN_LQD_ASET_Collection modifiedOtherAssets = liquidAssestBo
					.loadModifiedOtherLACollection(appNum);
			final CP_APP_IN_ASET_XFER_Collection modifiedTransferedAssets = liquidAssestBo
					.loadModifiedTransferCollection(appNum);

			final APP_IN_LQD_ASET_Collection newLiquidAssets = liquidAssestBo
					.loadNewLiquidAssetCollection(appNum);
			final CP_APP_IN_ASET_XFER_Collection newTransferedAssets = liquidAssestBo
					.loadNewTransferedCollection(appNum);

			final RMC_IN_PRFL_Collection rmcInPrflSessColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			final short[] questionsIndicators = new short[6];
			questionsIndicators[0] = IRMCResponseProfileManager.LIQUID_ASSET_BANK_ACC_CHG_IND;
			questionsIndicators[1] = IRMCResponseProfileManager.LIQUID_ASSET_CASH_CHG_IND;
			questionsIndicators[2] = IRMCResponseProfileManager.LIQUID_ASSET_OTHER_CHG_IND;
			questionsIndicators[3] = IRMCResponseProfileManager.ASET_XFER_CHG_IND;
			questionsIndicators[4] = IRMCResponseProfileManager.LIQUID_ASSET_ADD_IND;
			questionsIndicators[5] = IRMCResponseProfileManager.LIQUID_ASSET_CHG_IND;

			String[] indivResponseIndForIndv = null;
			final Map indivResponseIndIndv = new HashMap();

			for (int j = 0; j < rmcInPrflSessColl.size(); j++) {
				indivResponseIndForIndv = new String[6];
				indivResponseIndForIndv[0] = AppConstants.NO;
				indivResponseIndForIndv[1] = AppConstants.NO;
				indivResponseIndForIndv[2] = AppConstants.NO;
				indivResponseIndForIndv[3] = AppConstants.NO;
				indivResponseIndForIndv[4] = AppConstants.NO;
				indivResponseIndForIndv[5] = AppConstants.NO;

				final RMC_IN_PRFL_Cargo sessionCargo = rmcInPrflSessColl
						.getCargo(j);

				boolean financeChanged = false;
				boolean cashChanged = false;
				boolean otherAssestChnaged = false;
				boolean transferedAssetChanged = false;

				if (modifiedFinanceAssets != null
						&& !modifiedFinanceAssets.isEmpty()) {
					for (int i = 0; i < modifiedFinanceAssets.size(); i++) {
						final APP_IN_LQD_ASET_Cargo modifiedCargo = (APP_IN_LQD_ASET_Cargo) modifiedFinanceAssets
								.get(i);

						if (sessionCargo.getIndv_seq_num().equals(
								modifiedCargo.getIndv_seq_num())) {
							sessionCargo
							.setLiquid_asset_bank_acc_chg_ind(AppConstants.YES);
							indivResponseIndForIndv[0] = AppConstants.YES;
							financeChanged = true;
						}
						indivResponseIndIndv.put(
								sessionCargo.getIndv_seq_num(),
								indivResponseIndForIndv);
					}

				}

				if (modifiedCashAssets != null && !modifiedCashAssets.isEmpty()) {
					for (int i = 0; i < modifiedCashAssets.size(); i++) {
						final APP_IN_LQD_ASET_Cargo modifiedCargo = (APP_IN_LQD_ASET_Cargo) modifiedCashAssets
								.get(i);

						if (sessionCargo.getIndv_seq_num().equals(
								modifiedCargo.getIndv_seq_num())) {
							sessionCargo
							.setLiquid_asset_cash_chg_ind(AppConstants.YES);
							indivResponseIndForIndv[1] = AppConstants.YES;
							cashChanged = true;
						}
						indivResponseIndIndv.put(
								sessionCargo.getIndv_seq_num(),
								indivResponseIndForIndv);
					}

				}

				if (modifiedOtherAssets != null
						&& !modifiedOtherAssets.isEmpty()) {
					for (int i = 0; i < modifiedOtherAssets.size(); i++) {
						final APP_IN_LQD_ASET_Cargo modifiedCargo = (APP_IN_LQD_ASET_Cargo) modifiedOtherAssets
								.get(i);

						if (sessionCargo.getIndv_seq_num().equals(
								modifiedCargo.getIndv_seq_num())) {
							sessionCargo
							.setLiquid_asset_other_chg_ind(AppConstants.YES);
							indivResponseIndForIndv[2] = AppConstants.YES;
							otherAssestChnaged = true;
						}
						indivResponseIndIndv.put(
								sessionCargo.getIndv_seq_num(),
								indivResponseIndForIndv);
					}

				}

				if (modifiedTransferedAssets != null
						&& !modifiedTransferedAssets.isEmpty()) {
					for (int i = 0; i < modifiedTransferedAssets.size(); i++) {
						final CP_APP_IN_ASET_XFER_Cargo modifiedCargo = (CP_APP_IN_ASET_XFER_Cargo) modifiedTransferedAssets
								.get(i);

						if (sessionCargo.getIndv_seq_num().equals(
								modifiedCargo.getIndv_seq_num())) {
							sessionCargo.setAset_xfer_chg_ind(AppConstants.YES);
							indivResponseIndForIndv[3] = AppConstants.YES;
							transferedAssetChanged = true;
						}
						indivResponseIndIndv.put(
								sessionCargo.getIndv_seq_num(),
								indivResponseIndForIndv);
					}

				}

				if (newLiquidAssets != null && !newLiquidAssets.isEmpty()
						|| newTransferedAssets != null
						&& !newTransferedAssets.isEmpty()) {

					boolean newEntryExists = false;
					if (null != newLiquidAssets) {
						for (int i = 0; i < newLiquidAssets.size(); i++) {
							final APP_IN_LQD_ASET_Cargo modifiedCargo = (APP_IN_LQD_ASET_Cargo) newLiquidAssets
									.get(i);

							if (sessionCargo.getIndv_seq_num().equals(
									modifiedCargo.getIndv_seq_num())) {
								sessionCargo
								.setLiquid_asset_add_ind(AppConstants.YES);
								indivResponseIndForIndv[4] = AppConstants.YES;
								newEntryExists = true;
							}
							indivResponseIndIndv.put(
									sessionCargo.getIndv_seq_num(),
									indivResponseIndForIndv);
						}
					}

					if (!newEntryExists && null != newTransferedAssets) {
						for (int i = 0; i < newTransferedAssets.size(); i++) {
							final CP_APP_IN_ASET_XFER_Cargo modifiedCargo = (CP_APP_IN_ASET_XFER_Cargo) newTransferedAssets
									.get(i);

							if (sessionCargo.getIndv_seq_num().equals(
									modifiedCargo.getIndv_seq_num())) {
								sessionCargo
								.setLiquid_asset_add_ind(AppConstants.YES);
								indivResponseIndForIndv[4] = AppConstants.YES;
								newEntryExists = true;
							}
							indivResponseIndIndv.put(
									sessionCargo.getIndv_seq_num(),
									indivResponseIndForIndv);
						}

					}

				}

				if (financeChanged | cashChanged | otherAssestChnaged
						| transferedAssetChanged) {
					sessionCargo.setLiquid_asset_chg_ind(AppConstants.YES);
					indivResponseIndForIndv[5] = AppConstants.YES;
					indivResponseIndIndv.put(sessionCargo.getIndv_seq_num(),
							indivResponseIndForIndv);
				}

				indivResponseIndIndv.put(sessionCargo.getIndv_seq_num(),
						indivResponseIndForIndv);
			}

			for (int i = 0; i < rmcInPrflSessColl.size(); i++) {
				final RMC_IN_PRFL_Cargo sessionCargo = rmcInPrflSessColl
						.getCargo(i);
				rmcResponseProfileManager.persist(appNum, sessionCargo
						.getIndv_seq_num(), questionsIndicators,
						(String[]) indivResponseIndIndv.get(sessionCargo
								.getIndv_seq_num()));
			}
			
			APP_INDV_ADDI_INFO_Collection additionalInfoColl = new APP_INDV_ADDI_INFO_Collection();
			APP_INDV_ADDI_INFO_Collection beforeAdditionalInfoColl = new APP_INDV_ADDI_INFO_Collection();
			additionalInfoColl = (APP_INDV_ADDI_INFO_Collection) pageCollection
					.get("APP_INDV_ADDI_INFO_Collection");
			beforeAdditionalInfoColl = (APP_INDV_ADDI_INFO_Collection) beforeColl.get("APP_INDV_ADDI_INFO_Collection");
			
			//Persist household resources.
			if ((additionalInfoColl != null) && (!additionalInfoColl.isEmpty())) {
				APP_INDV_ADDI_INFO_Cargo addiInfoCargo = (APP_INDV_ADDI_INFO_Cargo) additionalInfoColl.get(0);
				APP_INDV_ADDI_INFO_Collection persistColl = new APP_INDV_ADDI_INFO_Collection(); 
				APP_INDV_ADDI_INFO_Cargo persistCargo = new APP_INDV_ADDI_INFO_Cargo();
				if(beforeAdditionalInfoColl != null && !beforeAdditionalInfoColl.isEmpty()){
					APP_INDV_ADDI_INFO_Cargo beforeCargo = (APP_INDV_ADDI_INFO_Cargo) beforeAdditionalInfoColl.get(0);
					persistCargo = (APP_INDV_ADDI_INFO_Cargo) beforeCargo.clone();
				}
				persistCargo.setApp_num(appNum);
				persistCargo.setIndv_seq_num(FwConstants.ONE);
				persistCargo.setOwn_res_exc_mil_ind(addiInfoCargo.getOwn_res_exc_mil_ind());
				final APP_INDV_ADDI_INFO_Collection coll = (APP_INDV_ADDI_INFO_Collection) beforeColl
						.get("APP_INDV_ADDI_INFO_Collection");
				// data already exist
				if ((coll != null) && (!coll.isEmpty())) {
					persistCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				} else {
					persistCargo.setRowAction(FwConstants.ROWACTION_INSERT);
				}

				persistColl.add(persistCargo);
				persistColl.persist(FwConstants.DAO);
			}
			
			

			session.put(AppConstants.RMB_RQST_COLLECTION, sessRqstColl);
			// Set RMB page Asset Detils make required
			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);
			session.put(FwConstants.RMC_DRIVER, driverArray);

			// End

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeAssetSummary:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeAssetSummary");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeAssetSummary", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeAssetSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Gets the matching cargo.
	 *
	 * @param appInJntOwnColl the app in jnt own coll
	 * @param appInJntBeforeCargo the app in jnt before cargo
	 * @return the matching cargo
	 */
	// RMB Change for PCR#40362 -- Start changes
	public APP_IN_JNT_OWN_Cargo getMatchingCargo(
			final APP_IN_JNT_OWN_Collection appInJntOwnColl,
			final APP_IN_JNT_OWN_Cargo appInJntBeforeCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getMatchingCargo() - START");
		if (appInJntOwnColl == null || appInJntOwnColl.isEmpty()) {
			return null;
		}
		final int appInJntCollSize = appInJntOwnColl.size();
		APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
		String otsdInd = appInJntBeforeCargo.getOtsd_ind();
		String bFirstName = appInJntBeforeCargo.getJnt_own_fst_nam();
		String bLastName = appInJntBeforeCargo.getJnt_own_last_nam();
		if (bFirstName == null) {
			bFirstName = FwConstants.SPACE;
		}
		if (bLastName == null) {
			bLastName = FwConstants.SPACE;
		}
		final String jntIndvSeqNum = appInJntBeforeCargo.getJnt_indv_seq_num();
		if (otsdInd == null) {
			otsdInd = FwConstants.SPACE;
		}
		String otsdJntInd = null;

		if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
			for (int i = 0; i < appInJntCollSize; i++) {
				appInJntOwnCargo = appInJntOwnColl.getCargo(i);
				otsdJntInd = appInJntOwnCargo.getOtsd_ind();
				String firstName = appInJntOwnCargo.getJnt_own_fst_nam();
				String lastName = appInJntOwnCargo.getJnt_own_last_nam();
				if (firstName == null) {
					firstName = FwConstants.SPACE;
				}
				if (lastName == null) {
					lastName = FwConstants.SPACE;
				}
				if (otsdJntInd == null) {
					otsdJntInd = FwConstants.SPACE;
				}
				if ((appInJntOwnCargo.getJnt_indv_seq_num() == null
						&& jntIndvSeqNum == null || appInJntOwnCargo
						.getJnt_indv_seq_num() != null
						&& appInJntOwnCargo.getJnt_indv_seq_num().equals(
								jntIndvSeqNum))
								&& otsdInd.equalsIgnoreCase(otsdJntInd)) {
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 5 lines Commented
					 * Code in this block
					 */

					return appInJntOwnCargo;
				}
				/**
				 * else if(appInJntOwnCargo.getJnt_indv_seq_num() !=null &&
				 * appInJntOwnCargo
				 * .getJnt_indv_seq_num().equals(FwConstants.ZERO) &&
				 * otsdJntInd.equalsIgnoreCase(otsdInd)) {
				 * if(otsdJntInd.equalsIgnoreCase(FwConstants.YES)) {
				 *
				 * if((firstName!=null &&
				 * firstName.trim().equals(bFirstName.trim())) &&
				 * (lastName!=null &&lastName.trim().equals(bLastName.trim())) )
				 * { return appInJntOwnCargo; } } else return appInJntOwnCargo;
				 * }
				 */
			}
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getMatchingCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	/**
	 * Gets the CW matching cargo.
	 *
	 * @param appInJntOwnColl the app in jnt own coll
	 * @param appInJntCWCargo the app in jnt cw cargo
	 * @return the CW matching cargo
	 */
	public APP_IN_JNT_OWN_Cargo getCWMatchingCargo(
			final APP_IN_JNT_OWN_Collection appInJntOwnColl,
			final APP_IN_JNT_OWN_Cargo appInJntCWCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getCWMatchingCargo() - START");
		if (appInJntOwnColl == null || appInJntOwnColl.isEmpty()) {
			return null;
		}
		final int appInJntCollSize = appInJntOwnColl.size();
		APP_IN_JNT_OWN_Cargo appInJntOwnCargo = null;
		String otsdInd = appInJntCWCargo.getOtsd_ind();
		String bFirstName = appInJntCWCargo.getJnt_own_fst_nam();
		String bLastName = appInJntCWCargo.getJnt_own_last_nam();
		if (bFirstName == null) {
			bFirstName = FwConstants.SPACE;
		}
		if (bLastName == null) {
			bLastName = FwConstants.SPACE;
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */
		}

		if (otsdInd == null) {
			otsdInd = FwConstants.SPACE;
		}
		String otsdJntInd = null;

		if (appInJntOwnColl != null && !appInJntOwnColl.isEmpty()) {
			for (int i = 0; i < appInJntCollSize; i++) {
				appInJntOwnCargo = appInJntOwnColl.getCargo(i);
				otsdJntInd = appInJntOwnCargo.getOtsd_ind();
				if (otsdJntInd == null) {
					otsdJntInd = FwConstants.SPACE;
				}
				if (appInJntOwnCargo != null && appInJntCWCargo != null) {
					if (appInJntCWCargo.getJnt_indv_seq_num() != null
							&& appInJntCWCargo.getJnt_indv_seq_num().equals(
									appInJntOwnCargo.getJnt_indv_seq_num())) {
						return appInJntOwnCargo;

					}
				}
			}
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getCWMatchingCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	/**
	 * Gets the CW cvrg matching cargo.
	 *
	 * @param appInLifeCvrgColl the app in life cvrg coll
	 * @param appInCvrgCWCargo the app in cvrg cw cargo
	 * @return the CW cvrg matching cargo
	 */
	public CP_APP_IN_LIF_INS_CVRG_Cargo getCWCvrgMatchingCargo(
			final CP_APP_IN_LIF_INS_CVRG_Collection appInLifeCvrgColl,
			final CP_APP_IN_LIF_INS_CVRG_Cargo appInCvrgCWCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getCWCvrgMatchingCargo() - START");
		if (appInLifeCvrgColl == null || appInLifeCvrgColl.isEmpty()) {
			return null;
		}
		final int appInCvrgCollSize = appInLifeCvrgColl.size();
		CP_APP_IN_LIF_INS_CVRG_Cargo appInCvrgOwnCargo = null;
		String otsdInd = appInCvrgCWCargo.getOtsd_ind();
		String bFirstName = appInCvrgCWCargo.getFirst_name();
		String bLastName = appInCvrgCWCargo.getLast_name();
		if (bFirstName == null) {
			bFirstName = FwConstants.SPACE;
		}
		if (bLastName == null) {
			bLastName = FwConstants.SPACE;
		}

		if (otsdInd == null) {
			otsdInd = FwConstants.SPACE;
		}
		String otsdJntInd = null;

		if (appInLifeCvrgColl != null && !appInLifeCvrgColl.isEmpty()) {
			for (int i = 0; i < appInCvrgCollSize; i++) {
				appInCvrgOwnCargo = appInLifeCvrgColl.getCargo(i);
				otsdJntInd = appInCvrgOwnCargo.getOtsd_ind();
				if (otsdJntInd == null) {
					otsdJntInd = FwConstants.SPACE;
				}
				if (appInCvrgOwnCargo.getCovered_indv_seq_num().equals(
						appInCvrgCWCargo.getCovered_indv_seq_num())) {
					return appInCvrgOwnCargo;

				}
			}
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getCWCvrgMatchingCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLifeInsuranceDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_liquid", null);
			request.put("type_liquid", null);
			request.put("firstName_vehicle", null);
			request.put("type_vehicle", null);
			request.put("firstName_real", null);
			request.put("type_real", null);
			request.put("firstName_burial", null);
			request.put("firstName_pp", null);
			request.put("type_burial", null);
			final String assetLifeTypeSeq = request.get("firstName_life") != null ? (String) request
					.get("firstName_life") : FwConstants.EMPTY_STRING;
					final String assetLifeInsType = request.get("type_life") != null ? (String) request
							.get("type_life") : FwConstants.EMPTY_STRING;

							final ARLIDValidator lifeInsValidator = new ARLIDValidator();
							// validate selections

							if (assetLifeTypeSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetLifeTypeSeq)
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetLifeInsType)) {
								lifeInsValidator.validateAdd();
								// add validation message and return
								request.put(FwConstants.MESSAGE_LIST,
										lifeInsValidator.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);
							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(assetLifeTypeSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(assetLifeInsType);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARLID", driver,
									appNum);
							driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLIT", driver,
									appNum);
							driverManager.makeComplete(FwConstants.RMC_DRIVER, "AROAS", driver,
									appNum);

							session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editLifeInsuranceDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editLifeInsuranceDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_EMPL_Collection from pageCollection.
			final APP_IN_L_INS_ASET_Collection appInUtilcColl = (APP_IN_L_INS_ASET_Collection) pageCollection
					.get("APP_IN_L_INS_ASET_Collection");
			final APP_IN_L_INS_ASET_Cargo appInUtilcCargo = appInUtilcColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInUtilcCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInUtilcCargo.getSeq_num());
			seqBean.setType(appInUtilcCargo.getLife_ins_aset_typ());

			// setting user end indicator

			if ("RE".equals(appInUtilcCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Job Income Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLID",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editLifeInsuranceDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLifeInsuranceDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLifeInsuranceDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String lifeInsType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_L_INS_ASET_Collection from pageCollection.
			final APP_IN_L_INS_ASET_Collection assetColl = (APP_IN_L_INS_ASET_Collection) pageCollection
					.get("APP_IN_L_INS_ASET_Collection");
			if (assetColl != null && !assetColl.isEmpty()) {
				final APP_IN_L_INS_ASET_Cargo lifeInsAssetCargo = assetColl
						.getCargo(0);

				// Get the results from the APP_IN_EMPL_Collection
				final String appNum = (String) session
						.get(AppConstants.APP_NUMBER);

				// delete record from rmc selection profile
				final SortedSet rmcSelPrfl = categorySelectionProfileManager
						.loadCategoryChangeSelectionProfile(appNum);
				final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
						.loadProfile(appNum);

				indvSeqNum = lifeInsAssetCargo.getIndv_seq_num();
				seqNum = lifeInsAssetCargo.getSeq_num();
				lifeInsType = lifeInsAssetCargo.getLife_ins_aset_typ();
				srcAppInd = lifeInsAssetCargo.getSrc_app_ind();

				APP_IN_L_INS_ASET_Cargo beforeLifeInsCargo = (APP_IN_L_INS_ASET_Cargo) beforeColl
						.get("APP_IN_L_INS_ASET_Cargo");

				final LifeInsuranceBO lifeInsBO = new LifeInsuranceBO();

				if (beforeLifeInsCargo == null
						|| lifeInsBO.isDifferentAsset(lifeInsAssetCargo,
								beforeLifeInsCargo)) {
					final PeopleHandler peopleHandler = (PeopleHandler) session
							.get(AppConstants.INDIV_MASTER_HANDLER);
					final String name = peopleHandler.getFirstName(indvSeqNum);
					final String assetType = "32420";
					lifeInsBO.validateErase(name, assetType);
					request.put(FwConstants.MESSAGE_LIST,
							lifeInsBO.getMessageList());
					beforeLifeInsCargo = new APP_IN_L_INS_ASET_Cargo();
					beforeLifeInsCargo.setIndv_seq_num(indvSeqNum);
					beforeLifeInsCargo.setSeq_num(seqNum);
					beforeLifeInsCargo.setLife_ins_aset_typ(lifeInsType);
					beforeColl.put("APP_IN_L_INS_ASET_Cargo",
							beforeLifeInsCargo);
					txnBean.setPageCollection(beforeColl);
					return;

				}

				lifeInsBO.deleteLifeInsRecords(indvSeqNum, seqNum, appNum,
						lifeInsType, srcAppInd);
				lifeInsBO.deleteJointOwnerRecords("LifeInsuranceBO",
						indvSeqNum, seqNum, appNum, "LI", lifeInsType);
				
				categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
						appNum, Short.parseShort(indvSeqNum),
						Short.parseShort(seqNum), AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL, lifeInsType);

				RMC_IN_PRFL_Cargo indvProflRespCargo = null;
				for (int i = 0; i < rmcInPrflColl.size(); i++) {
					if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
							.getIndv_seq_num())) {
						indvProflRespCargo = rmcInPrflColl.getCargo(i);
					}
				}
				final APP_IN_L_INS_ASET_Collection allVehicles = lifeInsBO
						.loadLifeInsuranceDetails(appNum);
				final APP_IN_L_INS_ASET_Collection modified = lifeInsBO
						.splitLIColl(allVehicles, "RM");
				final APP_IN_L_INS_ASET_Collection ended = lifeInsBO
						.splitLIColl(allVehicles, "RE");
				final APP_IN_L_INS_ASET_Collection newVeh = lifeInsBO
						.splitLIColl(allVehicles, "RN");
				final APP_IN_L_INS_ASET_Collection indvVehDetails = lifeInsBO
						.getIndividualsDetailsInfo(newVeh, indvSeqNum);

				short[] responseArray = new short[] {
						IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE,
						rmcResponseProfileManager
						.getResponseByType(
								IRMCResponseProfileManager.LIFE_INSURANCE_ASSET_DETAILS,
								lifeInsType) };
				if ((newVeh == null || newVeh.isEmpty())
						&& ((modified == null|| modified
								.isEmpty() )&& (  ended == null || ended.isEmpty()))) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARLID", driverArray,
							appNum);
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARLIT", driverArray,
							appNum);
				} else {
					if (indvVehDetails == null || indvVehDetails.isEmpty()) {
						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					} else {
						responseArray = new short[] { rmcResponseProfileManager
								.getResponseByType(
										IRMCResponseProfileManager.LIFE_INSURANCE_ASSET_DETAILS,
										lifeInsType) };
						int typeCount = 0;
						for (int i = 0; i < indvVehDetails.size(); i++) {
							if (lifeInsType.equals(indvVehDetails.getCargo(i)
									.getLife_ins_aset_typ())) {
								typeCount++;
							}
						}
						if (typeCount == 0) {
							rmcResponseProfileManager.makeNotRequired(
									responseArray, indvProflRespCargo, true);
						}
					}

					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLID",
							driverArray, appNum);
					driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLIT",
							driverArray, appNum);
					if (newVeh == null || newVeh.isEmpty()) {
						driverManager.makeAbsoluteNotRequired(
								FwConstants.RMC_DRIVER, "ARLIT", driverArray,
								appNum);
					}
				}
				session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
				session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
						rmcSelPrfl);
				driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
						driverArray, appNum);

				log(ILog.INFO,
						"RMCLiquidAndOtherAssetsEJBBean::eraseLifeInsuranceDetails:End");
			} else {
				txnBean.setPageCollection(beforeColl);
				return;
			}
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To erase the life Insurance changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseLifeInsuranceChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLifeInsuranceChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLifeInsuranceChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String lifeInsType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_L_INS_ASET_Collection from pageCollection.
			final APP_IN_L_INS_ASET_Collection utilColl = (APP_IN_L_INS_ASET_Collection) pageCollection
					.get("APP_IN_L_INS_ASET_Collection");
			final APP_IN_L_INS_ASET_Cargo lifeInsAssetCargo = utilColl
					.getCargo(0);

			// Get the results from the APP_IN_L_INS_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = lifeInsAssetCargo.getIndv_seq_num();
			seqNum = lifeInsAssetCargo.getSeq_num();
			lifeInsType = lifeInsAssetCargo.getLife_ins_aset_typ();
			srcAppInd = lifeInsAssetCargo.getSrc_app_ind();
			APP_IN_L_INS_ASET_Cargo beforeAssetCargo = (APP_IN_L_INS_ASET_Cargo) beforeColl
					.get("APP_IN_L_INS_ASET_Cargo");

			final LifeInsuranceBO lifeInsBO = new LifeInsuranceBO();

			if (beforeAssetCargo == null
					|| lifeInsBO.isDifferentAsset(lifeInsAssetCargo,
							beforeAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32420";
				lifeInsBO.validateEraseChanges(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						lifeInsBO.getMessageList());
				beforeAssetCargo = new APP_IN_L_INS_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setLife_ins_aset_typ(lifeInsType);
				beforeColl.put("APP_IN_L_INS_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			lifeInsBO.deleteLifeInsRecords(indvSeqNum, seqNum, appNum,
					lifeInsType, srcAppInd);
			lifeInsBO.deleteJointOwnerRecords("LifeInsuranceBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_LIFE_INSURANCE, lifeInsType);

			final String catAssetType = AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);

			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, lifeInsType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					lifeInsType, (short) 2, 'N');

			boolean rmcPrflNotRequeired = false;
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.OTHR_ASET_LIFE_INSURANCE)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TLIN", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map lifeInsPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				lifeInsPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean liDetlPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, lifeInsPropertyTypeMap,
					AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);

			if (!liDetlPageReg && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLID", driverArray, appNum);
			}
			boolean removeDetailsAndType = false;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {

				final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
						.getCargo(i);
				if (rmcInPrflBeforeCargo
						.getLife_ins_asset_whole_life_resp()
						.equals(String
								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
								&& rmcInPrflBeforeCargo
								.getLife_insurance_asset_term_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getLife_ins_asset_group_term_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getLife_insurance_other_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
					removeDetailsAndType = true;
				} else {
					removeDetailsAndType = false;
				}
			}

			if (removeDetailsAndType) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLIT", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLID", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLifeInsuranceChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLifeInsuranceChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseLifeInsuranceChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLifeInsuranceChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To erase the life Insurance changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void erasePPChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.erasePPChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::erasePPChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String prsnlPropType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_L_INS_ASET_Collection from pageCollection.
			final APP_IN_P_PROP_ASET_Collection utilColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			final APP_IN_P_PROP_ASET_Cargo prsnlAssetCargo = utilColl
					.getCargo(0);

			// Get the results from the APP_IN_L_INS_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = prsnlAssetCargo.getIndv_seq_num();
			seqNum = prsnlAssetCargo.getSeq_num();
			prsnlPropType = prsnlAssetCargo.getPrsn_prop_aset_typ();
			srcAppInd = prsnlAssetCargo.getSrc_app_ind();

			APP_IN_P_PROP_ASET_Cargo beforeAssetCargo = (APP_IN_P_PROP_ASET_Cargo) beforeColl
					.get("APP_IN_P_PROP_ASET_Cargo");

			final PersonalPropertyBO ppBO = new PersonalPropertyBO();
			final LifeInsuranceBO lifeInsBO = new LifeInsuranceBO();
			if (beforeAssetCargo == null
					|| ppBO.isDifferentAsset(prsnlAssetCargo, beforeAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final IReferenceTableManager iref = ReferenceTableManager.getInstance();
				final String assetType = iref.getColumnValue("ORTY", 2835,
						prsnlPropType, (String) ((Map) session
								.get(FwConstants.HTTP_SESSION))
								.get(AppConstants.LANGUAGE));
				ppBO.validateEraseChanges(name, assetType);
				request.put(FwConstants.MESSAGE_LIST, ppBO.getMessageList());
				beforeAssetCargo = new APP_IN_P_PROP_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setPrsn_prop_aset_typ(prsnlPropType);
				beforeColl.put("APP_IN_P_PROP_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			ppBO.deletePersonalAssetRecords(indvSeqNum, seqNum, appNum,
					prsnlPropType, srcAppInd);
			lifeInsBO.deleteJointOwnerRecords("PersonalPropertyBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY,
					prsnlPropType);

			final String catAssetType = AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);

			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, prsnlPropType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					prsnlPropType, (short) 2, 'N');

			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"ORTY", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map lifeInsPropertyTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				lifeInsPropertyTypeMap.put(codeValues[i], codeValues[i]);
			}
			final boolean liDetlPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, lifeInsPropertyTypeMap,
					AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);

			if (!liDetlPageReg && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORD", driverArray, appNum);
			}
			boolean removeDetailsAndType = false;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {

				final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
						.getCargo(i);
				if (rmcInPrflBeforeCargo
						.getPers_prop_bus_eqpt()
						.equals(String
								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
								&& rmcInPrflBeforeCargo
								.getPers_prop_cemetary_lot()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getPers_prop_livestock()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getPers_prop_saf_depst_box()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getPers_prop_oth_val()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
					removeDetailsAndType = true;
				} else {
					removeDetailsAndType = false;
				}
			}

			if (removeDetailsAndType) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORT", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORD", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::erasePPChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("erasePPChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"erasePPChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.erasePPChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endLifeInsuranceDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endLifeInsuranceDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endLifeInsuranceDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_L_INS_ASET_Collection assetColl = (APP_IN_L_INS_ASET_Collection) pageCollection
					.get("APP_IN_L_INS_ASET_Collection");
			final APP_IN_L_INS_ASET_Cargo lifeInsAssetCargo = assetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(lifeInsAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(lifeInsAssetCargo.getSeq_num());
			seqBean.setType(lifeInsAssetCargo.getLife_ins_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC pages make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLID",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endLifeInsuranceDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endLifeInsuranceDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endLifeInsuranceDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endLifeInsuranceDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endPPDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean.endPPDetails() - START");
		try {
			log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::endPPDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_P_PROP_ASET_Collection assetColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			final APP_IN_P_PROP_ASET_Cargo prsnlAssetCargo = assetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(prsnlAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(prsnlAssetCargo.getSeq_num());
			seqBean.setType(prsnlAssetCargo.getPrsn_prop_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC pages make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARORD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::endPPDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endPPDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endPPDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endPPDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the real estate details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addRealEstateDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addRealEstateDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_vehicle", null);
			request.put("type_vehicle", null);
			request.put("firstName_liquid", null);
			request.put("type_liquid", null);
			request.put("firstName_burial", null);
			request.put("type_burial", null);
			request.put("firstName_lifeIns", null);
			request.put("type_lifeIns", null);
			request.put("firstName_PP", null);
			final String assetRealTypeSeq = request.get("firstName_real") != null ? (String) request
					.get("firstName_real") : FwConstants.EMPTY_STRING;
					final String assetRealType = request.get("type_real") != null ? (String) request
							.get("type_real") : FwConstants.EMPTY_STRING;

							final ARRPDValidator realEstateValidator = new ARRPDValidator();
							// validate selections

							if (assetRealTypeSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetRealTypeSeq)
									|| AppConstants.SELECT_DEFAULT_OPTION.equals(assetRealType)) {
								realEstateValidator.validateAdd();
								// add validation message and return
								request.put(FwConstants.MESSAGE_LIST,
										realEstateValidator.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);
							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(assetRealTypeSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(assetRealType);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARRPD", driver,
									appNum);
							driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPT", driver,
									appNum);
							driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS", driver,
									appNum);

							session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addRealEstateDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addRealEstateDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addRealEstateDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editRealEstateDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editRealEstateDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_R_PROP_ASET_Collection from pageCollection.
			final APP_IN_R_PROP_ASET_Collection appInAssetColl = (APP_IN_R_PROP_ASET_Collection) pageCollection
					.get("APP_IN_R_PROP_ASET_Collection");
			final APP_IN_R_PROP_ASET_Cargo appInAssetCargo = appInAssetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInAssetCargo.getSeq_num());
			seqBean.setType(appInAssetCargo.getReal_prop_aset_typ());

			// setting user end indicator

			if ("RE".equals(appInAssetCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editRealEstateDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editRealEstateDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editRealEstateDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseRealEstateDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseRealEstateDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseRealEstateDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String realEstateType = null;
			String srcAppInd = null;

			final APP_IN_R_PROP_ASET_Collection assetColl = (APP_IN_R_PROP_ASET_Collection) pageCollection
					.get("APP_IN_R_PROP_ASET_Collection");
			final APP_IN_R_PROP_ASET_Cargo realEstateAssetCargo = assetColl
					.getCargo(0);
			
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);

			indvSeqNum = realEstateAssetCargo.getIndv_seq_num();
			seqNum = realEstateAssetCargo.getSeq_num();
			realEstateType = realEstateAssetCargo.getReal_prop_aset_typ();
			srcAppInd = realEstateAssetCargo.getSrc_app_ind();

			APP_IN_R_PROP_ASET_Cargo beforeRealEstateCargo = (APP_IN_R_PROP_ASET_Cargo) beforeColl
					.get("APP_IN_R_PROP_ASET_Cargo");

			final RealPropertyBO realEstateBO = new RealPropertyBO();

			if (beforeRealEstateCargo == null
					|| realEstateBO.isDifferentAsset(realEstateAssetCargo,
							beforeRealEstateCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32417";
				realEstateBO.validateErase(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						realEstateBO.getMessageList());
				beforeRealEstateCargo = new APP_IN_R_PROP_ASET_Cargo();
				beforeRealEstateCargo.setIndv_seq_num(indvSeqNum);
				beforeRealEstateCargo.setSeq_num(seqNum);
				beforeRealEstateCargo.setReal_prop_aset_typ(realEstateType);
				beforeColl.put("APP_IN_R_PROP_ASET_Cargo",
						beforeRealEstateCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			realEstateBO.deleteRealEstateRecords(indvSeqNum, seqNum, appNum,
					realEstateType, srcAppInd);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_REAL_ASSET_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_REAL_ASSET_PRFL , realEstateType);
			}
			
			// delete record from rmc selection profile
						final SortedSet rmcSelPrfl = categorySelectionProfileManager
								.loadCategoryChangeSelectionProfile(appNum);
			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel
			.deleteJointOwnerRecords("RealPropertyBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY,
					realEstateType);

			RMC_IN_PRFL_Cargo indvProflRespCargo = null;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					indvProflRespCargo = rmcInPrflColl.getCargo(i);
				}
			}
			final APP_IN_R_PROP_ASET_Collection allVehicles = realEstateBO
					.loadRealPropertyDetails(appNum);
			final APP_IN_R_PROP_ASET_Collection modified = realEstateBO
					.splitRealColl(allVehicles, "RM");
			final APP_IN_R_PROP_ASET_Collection ended = realEstateBO
					.splitRealColl(allVehicles, "RE");
			final APP_IN_R_PROP_ASET_Collection newVeh = realEstateBO
					.splitRealColl(allVehicles, "RN");
			final APP_IN_R_PROP_ASET_Collection indvVehDetails = realEstateBO
					.getIndividualsDetailsInfo(newVeh, indvSeqNum);

			short[] responseArray = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY,
					rmcResponseProfileManager
					.getResponseByType(
							IRMCResponseProfileManager.REAL_PROPERTY_ASSET_DETAILS,
							realEstateType) };
			if ((newVeh == null || newVeh.isEmpty())
					&& (modified == null  || modified.isEmpty()) && (ended == null
					|| ended.isEmpty())) {
				rmcResponseProfileManager.makeNotRequired(responseArray,
						indvProflRespCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPD", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPT", driverArray, appNum);
			} else {
				if (indvVehDetails == null || indvVehDetails.isEmpty()) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
				} else {
					responseArray = new short[] { rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.REAL_PROPERTY_ASSET_DETAILS,
									realEstateType) };
					int typeCount = 0;
					for (int i = 0; i < indvVehDetails.size(); i++) {
						if (realEstateType.equals(indvVehDetails.getCargo(i)
								.getReal_prop_aset_typ())) {
							typeCount++;
						}
					}
					if (typeCount == 0) {
						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					}
				}

				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPD",
						driverArray, appNum);
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARRPT",
						driverArray, appNum);
				if (newVeh == null || newVeh.isEmpty()) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARRPT", driverArray,
							appNum);
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseRealEstateDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseRealEstateDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseRealEstateDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseRealEstateDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To Erase the real estate asset changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseRealEstateChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseRealEstateChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseRealEstateChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String realEstateType = null;
			String realSrcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_R_PROP_ASET_Collection from pageCollection.
			final APP_IN_R_PROP_ASET_Collection utilColl = (APP_IN_R_PROP_ASET_Collection) pageCollection
					.get("APP_IN_R_PROP_ASET_Collection");
			final APP_IN_R_PROP_ASET_Cargo realEstateAssetCargo = utilColl
					.getCargo(0);

			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = realEstateAssetCargo.getIndv_seq_num();
			seqNum = realEstateAssetCargo.getSeq_num();
			realEstateType = realEstateAssetCargo.getReal_prop_aset_typ();
			realSrcAppInd = realEstateAssetCargo.getSrc_app_ind();

			APP_IN_R_PROP_ASET_Cargo beforeAssetCargo = (APP_IN_R_PROP_ASET_Cargo) beforeColl
					.get("APP_IN_R_PROP_ASET_Cargo");

			final RealPropertyBO realEstateBO = new RealPropertyBO();

			if (beforeAssetCargo == null
					|| realEstateBO.isDifferentAsset(realEstateAssetCargo,
							beforeAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32417";
				realEstateBO.validateEraseChanges(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						realEstateBO.getMessageList());
				beforeAssetCargo = new APP_IN_R_PROP_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setReal_prop_aset_typ(realEstateType);
				beforeColl.put("APP_IN_R_PROP_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			realEstateBO.deleteRealEstateRecords(indvSeqNum, seqNum, appNum,
					realEstateType, realSrcAppInd);

			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel
			.deleteJointOwnerRecords("RealPropertyBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_REAL_PROPERTY,
					realEstateType);

			final String catAssetType = AppConstants.RMC_CAT_REAL_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, realEstateType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_REAL_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					realEstateType, (short) 2, 'N');

			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.OTHR_ASET_REAL_PROPERTY)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TROP", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map realEstateAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				realEstateAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean realDtlPageReq = checkAssetDetailsPageRequired(
					rmcSelPrfl, realEstateAssetTypeMap,
					AppConstants.RMC_CAT_REAL_ASSET_PRFL);

			if (!realDtlPageReq && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPD", driverArray, appNum);
			}
			boolean removeDetailsAndType = false;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {

				final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
						.getCargo(i);
				if (rmcInPrflBeforeCargo
						.getReal_aset_apt_resp()
						.equals(String
								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
								&& rmcInPrflBeforeCargo
								.getReal_aset_con_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getReal_aset_dup_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getReal_aset_frm_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
														&& rmcInPrflBeforeCargo
														.getReal_asset_land_resp()
														.equals(String
																.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																&& rmcInPrflBeforeCargo
																.getReal_asset_mobile_home_resp()
																.equals(String
																		.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																		&& rmcInPrflBeforeCargo
																		.getReal_asset_other_resp()
																		.equals(String
																				.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																				&& rmcInPrflBeforeCargo
																				.getReal_asset_life_estate_resp()
																				.equals(String
																						.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																						&& rmcInPrflBeforeCargo
																						.getReal_asset_rental_resp()
																						.equals(String
																								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																								&& rmcInPrflBeforeCargo
																								.getReal_asset_house_resp()
																								.equals(String
																										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
																										&& rmcInPrflBeforeCargo
																										.getReal_aset_vac_resp()
																										.equals(String
																												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))

						) {
					removeDetailsAndType = true;
				} else {
					removeDetailsAndType = false;
				}
			}

			if (removeDetailsAndType) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPT", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARRPD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseRealEstateChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseRealEstateChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseRealEstateChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseRealEstateChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endRealEstateDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endRealEstateDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endRealEstateDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_R_PROP_ASET_Collection assetColl = (APP_IN_R_PROP_ASET_Collection) pageCollection
					.get("APP_IN_R_PROP_ASET_Collection");
			final APP_IN_R_PROP_ASET_Cargo realEstateAssetCargo = assetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(realEstateAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(realEstateAssetCargo.getSeq_num());
			seqBean.setType(realEstateAssetCargo.getReal_prop_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARRPD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endRealEstateDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endRealEstateDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endRealEstateDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endRealEstateDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the burial asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addBurialAssetDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_vehicle", null);
			request.put("type_vehicle", null);
			request.put("firstName_liquid", null);
			request.put("type_liquid", null);
			request.put("firstName_real", null);
			request.put("type_real", null);
			request.put("firstName_lifeIns", null);
			request.put("firstName_PP", null);
			request.put("type_lifeIns", null);

			final String assetBurialTypeSeq = request.get("firstName_burial") != null ? (String) request
					.get("firstName_burial") : FwConstants.EMPTY_STRING;
					final String assetBurialType = "BA";

					final ARBADValidator burialAssetValidator = new ARBADValidator();
					// validate selections

					if (assetBurialTypeSeq == null
							|| AppConstants.SELECT_DEFAULT_OPTION
							.equals(assetBurialTypeSeq)
							|| assetBurialType
							.equals(AppConstants.SELECT_DEFAULT_OPTION)) {
						burialAssetValidator.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST,
								burialAssetValidator.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);
					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(assetBurialTypeSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(assetBurialType);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);


					// set driver status
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARBAD", driver,
							appNum);
					request.put("addNew", FwConstants.YES);
					driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS", driver,
							appNum);

					session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editBurialAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editBurialAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_BURY_ASET_Collection from pageCollection.
			final APP_IN_BURY_ASET_Collection appInAssetColl = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");
			final APP_IN_BURY_ASET_Cargo appInAssetCargo = appInAssetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInAssetCargo.getSeq_num());
			seqBean.setType(appInAssetCargo.getBury_aset_typ());

			// setting user end indicator

			if ("RE".equals(appInAssetCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editBurialAssetDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseBurialAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseBurialAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String burialAssetType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_BURY_ASET_Collection from pageCollection.
			final APP_IN_BURY_ASET_Collection assetColl = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");
			final APP_IN_BURY_ASET_Cargo burialAssetAssetCargo = assetColl
					.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final SortedSet rmcSessionSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = burialAssetAssetCargo.getIndv_seq_num();
			seqNum = burialAssetAssetCargo.getSeq_num();
			burialAssetType = burialAssetAssetCargo.getBury_aset_typ();
			srcAppInd = burialAssetAssetCargo.getSrc_app_ind();
			APP_IN_BURY_ASET_Cargo beforeBurialAssetCargo = (APP_IN_BURY_ASET_Cargo) beforeColl
					.get("APP_IN_BURY_ASET_Cargo");

			final BurialAssetBO burialAssetBO = new BurialAssetBO();

			if (beforeBurialAssetCargo == null
					|| burialAssetBO.isDifferentAsset(burialAssetAssetCargo,
							beforeBurialAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32419";
				burialAssetBO.validateErase(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						burialAssetBO.getMessageList());
				beforeBurialAssetCargo = new APP_IN_BURY_ASET_Cargo();
				beforeBurialAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeBurialAssetCargo.setSeq_num(seqNum);
				beforeBurialAssetCargo.setBury_aset_typ(burialAssetType);
				beforeColl
				.put("APP_IN_BURY_ASET_Cargo", beforeBurialAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			burialAssetBO.deleteBurialAssetRecords(indvSeqNum, seqNum, appNum,
					burialAssetType, srcAppInd);

			// Getting relevant Individuals
			RMC_IN_PRFL_Cargo indvProflRespCargo = null;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					indvProflRespCargo = rmcInPrflColl.getCargo(i);
				}
			}
			final APP_IN_BURY_ASET_Collection allVehicles = burialAssetBO
					.loadBurialAssetDetails(appNum);
			final APP_IN_BURY_ASET_Collection modified = burialAssetBO
					.splitBurColl(allVehicles, "RM");
			final APP_IN_BURY_ASET_Collection ended = burialAssetBO
					.splitBurColl(allVehicles, "RE");
			final APP_IN_BURY_ASET_Collection newVeh = burialAssetBO
					.splitBurColl(allVehicles, "RN");
			final APP_IN_BURY_ASET_Collection indvVehDetails = burialAssetBO
					.getIndividualsDetailsInfo(newVeh, indvSeqNum);

			short[] responseArray = new short[] { IRMCResponseProfileManager.OTHR_ASET_BURIAL };
			if ((newVeh == null || newVeh.isEmpty())
					&& (modified == null  || modified.isEmpty()) && (ended == null
					|| ended.isEmpty())) {
				rmcResponseProfileManager.makeNotRequired(responseArray,
						indvProflRespCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAD", driverArray, appNum);
			} else {
				if (indvVehDetails == null || indvVehDetails.isEmpty()) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
					final CategorySequenceDetail cat = categorySelectionProfileManager
							.getCategorySequenceDetail(rmcSelPrfl,
									Short.parseShort(indvSeqNum),
									Long.parseLong(seqNum), burialAssetType);
					if (cat != null) {
						/*
						 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines
						 * Commented Code in this block
						 */

						categorySelectionProfileManager.updateSubTypeSequence(
								rmcSelPrfl, cat);
					}
				} else {
					responseArray = new short[] { rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.BURIAL_ASSET_DETAILS,
									burialAssetType) };
					int typeCount = 0;
					for (int i = 0; i < indvVehDetails.size(); i++) {
						if (burialAssetType.equals(indvVehDetails.getCargo(i)
								.getBury_aset_typ())) {
							typeCount++;
						}
					}
					if (typeCount == 0) {

						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					}
				}
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARBAD",
						driverArray, appNum);

			}
			categorySelectionProfileManager.getCategorySequenceDetail(
					rmcSelPrfl, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum), burialAssetType);
			final CategorySequenceDetail catSession = categorySelectionProfileManager
					.getCategorySequenceDetail(rmcSessionSelPrfl,
							Short.parseShort(indvSeqNum),
							Long.parseLong(seqNum), burialAssetType);

			if (catSession != null) {
				rmcSessionSelPrfl.remove(catSession);
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER,
					rmcSessionSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseBurialAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To erase burial asset changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseBurialAssetChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseBurialAssetChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseBurialAssetChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String burialAssetType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_BURY_ASET_Collection from pageCollection.
			final APP_IN_BURY_ASET_Collection assetColl = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");
			final APP_IN_BURY_ASET_Cargo burialAssetAssetCargo = assetColl
					.getCargo(0);

			// Get the results from the APP_IN_BURY_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = burialAssetAssetCargo.getIndv_seq_num();
			seqNum = burialAssetAssetCargo.getSeq_num();
			burialAssetType = burialAssetAssetCargo.getBury_aset_typ();
			srcAppInd = burialAssetAssetCargo.getSrc_app_ind();

			APP_IN_BURY_ASET_Cargo beforeAssetCargo = (APP_IN_BURY_ASET_Cargo) beforeColl
					.get("APP_IN_BURY_ASET_Cargo");

			final BurialAssetBO burialAssetBO = new BurialAssetBO();

			if (beforeAssetCargo == null
					|| burialAssetBO.isDifferentAsset(burialAssetAssetCargo,
							beforeAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32419";
				burialAssetBO.validateEraseChanges(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						burialAssetBO.getMessageList());
				beforeAssetCargo = new APP_IN_BURY_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setBury_aset_typ(burialAssetType);
				beforeColl.put("APP_IN_BURY_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			burialAssetBO.deleteBurialAssetRecords(indvSeqNum, seqNum, appNum,
					burialAssetType, srcAppInd);
			final String catAssetType = AppConstants.RMC_CAT_BURIAL_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, burialAssetType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_BURIAL_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					burialAssetType, (short) 2, 'N');
			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.OTHR_ASET_BURIAL)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TBAS", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map burialAssetAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				burialAssetAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean burialDetailPageReg = checkAssetDetailsPageRequired(
					rmcSelPrfl, burialAssetAssetTypeMap,
					AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);

			if (!burialDetailPageReg && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAD", driverArray, appNum);
			}

			boolean removeDetailsAndType = false;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {

				final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo = rmcInPrflColl
						.getCargo(i);
				if (rmcInPrflBeforeCargo
						.getBury_aset_ins_resp()
						.equals(String
								.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
								&& rmcInPrflBeforeCargo
								.getBury_aset_plt_resp()
								.equals(String
										.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
										&& rmcInPrflBeforeCargo
										.getBury_aset_rbt_resp()
										.equals(String
												.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))
												&& rmcInPrflBeforeCargo
												.getOther_asset_burial_resp()
												.equals(String
														.valueOf(IRMCResponseProfileManager.STATUS_NOT_REQUIRED))) {
					removeDetailsAndType = true;
				} else {
					removeDetailsAndType = false;
				}
			}

			if (removeDetailsAndType) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAT", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARBAD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseBurialAssetChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseBurialAssetChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseBurialAssetChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseBurialAssetChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endBurialAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endBurialAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endBurialAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_BURY_ASET_Collection assetColl = (APP_IN_BURY_ASET_Collection) pageCollection
					.get("APP_IN_BURY_ASET_Collection");
			final APP_IN_BURY_ASET_Cargo burialAssetAssetCargo = assetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(burialAssetAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(burialAssetAssetCargo.getSeq_num());
			seqBean.setType(burialAssetAssetCargo.getBury_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC page Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARBAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endBurialAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endBurialAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endBurialAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endBurialAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the vehicle asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addVehicleAssetDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_real", null);
			request.put("type_real", null);
			request.put("firstName_liquid", null);
			request.put("type_liquid", null);
			request.put("firstName_burial", null);
			request.put("type_burial", null);
			request.put("firstName_lifeIns", null);
			request.put("type_lifeIns", null);
			request.put("firstName_PP", null);
			final String assetVehicleTypeSeq = request.get("firstName_vehicle") != null ? (String) request
					.get("firstName_vehicle") : FwConstants.EMPTY_STRING;
					final String assetVehicleType = request.get("type_vehicle") != null ? (String) request
							.get("type_vehicle") : FwConstants.EMPTY_STRING;

							final ARVADValidator vehicleAssetValidator = new ARVADValidator();
							// validate selections

							if (assetVehicleTypeSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetVehicleTypeSeq)
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetVehicleType)) {
								vehicleAssetValidator.validateAdd();
								request.put(FwConstants.MESSAGE_LIST,
										vehicleAssetValidator.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);
							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(assetVehicleTypeSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(assetVehicleType);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARVAD", driver,
									appNum);
							driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAT", driver,
									appNum);
							driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS", driver,
									appNum);


							session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the pp details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addPPDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean.addPPDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_real", null);
			request.put("type_real", null);
			request.put("firstName_liquid", null);
			request.put("type_liquid", null);
			request.put("firstName_burial", null);
			request.put("type_burial", null);
			request.put("firstName_lifeIns", null);
			request.put("type_lifeIns", null);
			request.put("firstName_vehicle", null);
			request.put("type_vehicle", null);
			final String assetVehicleTypeSeq = request.get("firstName_pp") != null ? (String) request
					.get("firstName_pp") : FwConstants.EMPTY_STRING;
					final String assetVehicleType = request.get("type_pp") != null ? (String) request
							.get("type_pp") : FwConstants.EMPTY_STRING;

							final ARVADValidator vehicleAssetValidator = new ARVADValidator();

							// validate selections

							if (assetVehicleTypeSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetVehicleTypeSeq)
									||assetVehicleType == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetVehicleType)) {
								vehicleAssetValidator.validateAdd();
								// add validation message and return
								request.put(FwConstants.MESSAGE_LIST,
										vehicleAssetValidator.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);
							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(assetVehicleTypeSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(assetVehicleType);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARORD", driver,
									appNum);
							/*
							 * VG SONAR Cleanup - 08/27/2015 Deleted 2 lines Commented Code in
							 * this block
							 */

							driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS", driver,
									appNum);

							session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addPPDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addPPDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addPPDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editVehicleAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editVehicleAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final APP_IN_VEH_ASET_Collection appInAssetColl = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");
			final APP_IN_VEH_ASET_Cargo appInAssetCargo = appInAssetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInAssetCargo.getSeq_num());
			seqBean.setType(appInAssetCargo.getVeh_aset_typ());

			// setting user end indicator

			if ("RE".equals(appInAssetCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editVehicleAssetDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editPPDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean.editPPDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editPPDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final APP_IN_P_PROP_ASET_Collection appInAssetColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			final APP_IN_P_PROP_ASET_Cargo appInAssetCargo = appInAssetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInAssetCargo.getSeq_num());
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
			 * this block
			 */

			seqBean.setType(appInAssetCargo.getPrsn_prop_aset_typ());

			// setting user end indicator

			if ("RE".equals(appInAssetCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARORD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editPPDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editPPDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editPPDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editPPDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseVehicleAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseVehicleAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
			String indvSeqNum = null;
			String seqNum = null;
			String vehicleAssetType = null;
			String srcAppInd = null;

			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final APP_IN_VEH_ASET_Collection assetColl = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");
			final APP_IN_VEH_ASET_Cargo vehicleAssetAssetCargo = assetColl
					.getCargo(0);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);
			indvSeqNum = vehicleAssetAssetCargo.getIndv_seq_num();
			seqNum = vehicleAssetAssetCargo.getSeq_num();
			vehicleAssetType = vehicleAssetAssetCargo.getVeh_aset_typ();
			srcAppInd = vehicleAssetAssetCargo.getSrc_app_ind();

			APP_IN_VEH_ASET_Cargo beforeVehicleAssetCargo = (APP_IN_VEH_ASET_Cargo) beforeColl
					.get("APP_IN_VEH_ASET_Cargo");

			if (beforeVehicleAssetCargo == null
					|| vehicleAssetBO.isDifferentAsset(vehicleAssetAssetCargo,
							beforeVehicleAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32416";
				vehicleAssetBO.validateErase(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						vehicleAssetBO.getMessageList());
				beforeVehicleAssetCargo = new APP_IN_VEH_ASET_Cargo();
				beforeVehicleAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeVehicleAssetCargo.setSeq_num(seqNum);
				beforeVehicleAssetCargo.setVeh_aset_typ(vehicleAssetType);
				beforeColl
				.put("APP_IN_VEH_ASET_Cargo", beforeVehicleAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			vehicleAssetBO.deleteVehicleAssetRecords(indvSeqNum, seqNum,
					appNum, vehicleAssetType, srcAppInd);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL , vehicleAssetType);
			}
			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel.deleteJointOwnerRecords("VehicleAssetBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET,
					vehicleAssetType);
			// Getting relevant Individuals
			RMC_IN_PRFL_Cargo indvProflRespCargo = null;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					indvProflRespCargo = rmcInPrflColl.getCargo(i);
				}
			}
			final VehicleAssetBO vehAssetBo = new VehicleAssetBO();
			final APP_IN_VEH_ASET_Collection allVehicles = vehAssetBo
					.loadVehicleAssetDetails(appNum);
			final APP_IN_VEH_ASET_Collection modified = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RM");
			final APP_IN_VEH_ASET_Collection ended = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RE");
			final APP_IN_VEH_ASET_Collection newVeh = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RN");
			final APP_IN_VEH_ASET_Collection indvVehDetails = vehAssetBo
					.getIndividualsDetailsInfo(newVeh, indvSeqNum);

			short[] responseArray = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
					rmcResponseProfileManager.getResponseByType(
							IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
							vehicleAssetType) };
			if ((newVeh == null || newVeh.isEmpty())
					&& (modified == null  || modified.isEmpty()) && (ended == null
					|| ended.isEmpty())) {
				rmcResponseProfileManager.makeNotRequired(responseArray,
						indvProflRespCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAD", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAT", driverArray, appNum);
			} else {
				if (indvVehDetails == null || indvVehDetails.isEmpty()) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
				} else {
					responseArray = new short[] { rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
									vehicleAssetType) };
					int typeCount = 0;
					for (int i = 0; i < indvVehDetails.size(); i++) {
						if (vehicleAssetType.equals(indvVehDetails.getCargo(i)
								.getVeh_aset_typ())) {
							typeCount++;
						}
					}
					if (typeCount == 0) {
						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					}
				}

				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAD",
						driverArray, appNum);
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAT",
						driverArray, appNum);
				if (newVeh == null || newVeh.isEmpty()) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARVAT", driverArray,
							appNum);
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseVehicleAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void erasePPDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.erasePPDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::erasePPDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String personalAssetType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final APP_IN_P_PROP_ASET_Collection assetColl = (APP_IN_P_PROP_ASET_Collection) pageCollection
					.get("APP_IN_P_PROP_ASET_Collection");
			final APP_IN_P_PROP_ASET_Cargo personalAssetAssetCargo = assetColl
					.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);

			indvSeqNum = personalAssetAssetCargo.getIndv_seq_num();
			seqNum = personalAssetAssetCargo.getSeq_num();
			personalAssetType = personalAssetAssetCargo.getPrsn_prop_aset_typ();
			srcAppInd = personalAssetAssetCargo.getSrc_app_ind();
			APP_IN_P_PROP_ASET_Cargo beforeVehicleAssetCargo = (APP_IN_P_PROP_ASET_Cargo) beforeColl
					.get("APP_IN_P_PROP_ASET_Cargo");

			final PersonalPropertyBO ppBO = new PersonalPropertyBO();

			if (beforeVehicleAssetCargo == null
					|| ppBO.isDifferentAsset(personalAssetAssetCargo,
							beforeVehicleAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);				
				final IReferenceTableManager iref = ReferenceTableManager.getInstance();
				final String assetType = iref.getColumnValue("ORTY", 2835,
						personalAssetType, (String) ((Map) session
								.get(FwConstants.HTTP_SESSION))
								.get(AppConstants.LANGUAGE));			
				ppBO.validateErase(name, assetType);
				request.put(FwConstants.MESSAGE_LIST, ppBO.getMessageList());
				beforeVehicleAssetCargo = new APP_IN_P_PROP_ASET_Cargo();
				beforeVehicleAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeVehicleAssetCargo.setSeq_num(seqNum);
				beforeVehicleAssetCargo
				.setPrsn_prop_aset_typ(personalAssetType);
				beforeColl.put("APP_IN_P_PROP_ASET_Cargo",
						beforeVehicleAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			ppBO.deletePersonalAssetRecords(indvSeqNum, seqNum, appNum,
					personalAssetType, srcAppInd);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL , personalAssetType);
			}
			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
								.loadCategoryChangeSelectionProfile(appNum);
			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel.deleteJointOwnerRecords("PersonalPropertyBO",
					indvSeqNum, seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_PERSONAL_PROPERTY,
					personalAssetType);
			RMC_IN_PRFL_Cargo indvProflRespCargo = null;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					indvProflRespCargo = rmcInPrflColl.getCargo(i);
				}
			}
			final APP_IN_P_PROP_ASET_Collection allVehicles = ppBO
					.loadPersonalProperty(appNum);
			final APP_IN_P_PROP_ASET_Collection modified = ppBO.splitRealColl(
					allVehicles, "RM");
			final APP_IN_P_PROP_ASET_Collection ended = ppBO.splitRealColl(
					allVehicles, "RE");
			final APP_IN_P_PROP_ASET_Collection newVeh = ppBO.splitRealColl(
					allVehicles, "RN");
			final APP_IN_P_PROP_ASET_Collection indvVehDetails = ppBO
					.getIndividualsDetailsInfo(newVeh, indvSeqNum);

			short[] responseArray = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_PERSONAL_PROPERTY,
					rmcResponseProfileManager
					.getResponseByType(
							IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS,
							personalAssetType) };
			if ((newVeh == null || newVeh.isEmpty())
					&& (modified == null || modified.isEmpty()) && (ended == null
					|| ended.isEmpty())) {
				rmcResponseProfileManager.makeNotRequired(responseArray,
						indvProflRespCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORD", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARORT", driverArray, appNum);
			} else {
				if (indvVehDetails == null || indvVehDetails.isEmpty()) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
				} else {
					responseArray = new short[] { rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.OTHER_RESOURCE_ASET_DETAILS,
									personalAssetType) };
					int typeCount = 0;
					for (int i = 0; i < indvVehDetails.size(); i++) {
						if (personalAssetType.equals(indvVehDetails.getCargo(i)
								.getPrsn_prop_aset_typ())) {
							typeCount++;
						}
					}
					if (typeCount == 0) {
						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					}
				}

				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORD",
						driverArray, appNum);
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARORT",
						driverArray, appNum);
				if (newVeh == null || newVeh.isEmpty()) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARORT", driverArray,
							appNum);
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			log(ILog.INFO, "RMCLiquidAndOtherAssetsEJBBean::erasePPDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("erasePPDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"erasePPDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.erasePPDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To erase the vehicle asset changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseVehicleAssetChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseVehicleAssetChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseVehicleAssetChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session
			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String vehicleAssetType = null;
			String srcAppInd = null;
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_VEH_ASET_Collection from pageCollection.
			final APP_IN_VEH_ASET_Collection assetColl = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");
			final APP_IN_VEH_ASET_Cargo vehicleAssetAssetCargo = assetColl
					.getCargo(0);

			// Get the results from the APP_IN_VEH_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = vehicleAssetAssetCargo.getIndv_seq_num();
			seqNum = vehicleAssetAssetCargo.getSeq_num();
			vehicleAssetType = vehicleAssetAssetCargo.getVeh_aset_typ();
			srcAppInd = vehicleAssetAssetCargo.getSrc_app_ind();

			APP_IN_VEH_ASET_Cargo beforeAssetCargo = (APP_IN_VEH_ASET_Cargo) beforeColl
					.get("APP_IN_VEH_ASET_Cargo");

			final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();

			if (beforeAssetCargo == null
					|| vehicleAssetBO.isDifferentAsset(vehicleAssetAssetCargo,
							beforeAssetCargo)) {
				final PeopleHandler peopleHandler = (PeopleHandler) session
						.get(AppConstants.INDIV_MASTER_HANDLER);
				final String name = peopleHandler.getFirstName(indvSeqNum);
				final String assetType = "32416";
				vehicleAssetBO.validateEraseChanges(name, assetType);
				request.put(FwConstants.MESSAGE_LIST,
						vehicleAssetBO.getMessageList());
				beforeAssetCargo = new APP_IN_VEH_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setVeh_aset_typ(vehicleAssetType);
				beforeColl.put("APP_IN_VEH_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			vehicleAssetBO.deleteVehicleAssetRecords(indvSeqNum, seqNum,
					appNum, vehicleAssetType, srcAppInd);

			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel.deleteJointOwnerRecords("VehicleAssetBO", indvSeqNum,
					seqNum, appNum,
					AppConstants.JOINT_OWNER_TYPE_VEHICLE_ASSET,
					vehicleAssetType);

			final String catAssetType = AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum);
			final RMC_IN_PRFL_Collection rmcInPrflColl = rmcResponseProfileManager
					.loadProfile(appNum);

			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, vehicleAssetType);
			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					vehicleAssetType, (short) 2, 'N');
			RMC_IN_PRFL_Cargo indvProflRespCargo = null;
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					indvProflRespCargo = rmcInPrflColl.getCargo(i);
				}
			}
			final VehicleAssetBO vehAssetBo = new VehicleAssetBO();
			final APP_IN_VEH_ASET_Collection allVehicles = vehAssetBo
					.loadVehicleAssetDetails(appNum);
			final APP_IN_VEH_ASET_Collection modified = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RM");
			final APP_IN_VEH_ASET_Collection ended = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RE");
			final APP_IN_VEH_ASET_Collection newVeh = vehAssetBo
					.splitNewVehicleAssetColl(allVehicles, "RN");
			final APP_IN_VEH_ASET_Collection indvVehDetails = vehAssetBo
					.getIndividualsDetailsInfo(newVeh, indvSeqNum);

			short[] responseArray = new short[] {
					IRMCResponseProfileManager.OTHR_ASET_VEHICLE,
					rmcResponseProfileManager.getResponseByType(
							IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
							vehicleAssetType) };
			if ((newVeh == null || newVeh.isEmpty())
					&& (modified == null || modified.isEmpty()) && (ended == null 
					|| ended.isEmpty())) {
				rmcResponseProfileManager.makeNotRequired(responseArray,
						indvProflRespCargo, true);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAD", driverArray, appNum);
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARVAT", driverArray, appNum);
			} else {
				if (indvVehDetails == null || indvVehDetails.isEmpty()) {
					rmcResponseProfileManager.makeNotRequired(responseArray,
							indvProflRespCargo, true);
				} else {
					responseArray = new short[] { rmcResponseProfileManager
							.getResponseByType(
									IRMCResponseProfileManager.VEHICLE_ASSET_DETAILS,
									vehicleAssetType) };
					int typeCount = 0;
					for (int i = 0; i < indvVehDetails.size(); i++) {
						if (vehicleAssetType.equals(indvVehDetails.getCargo(i)
								.getVeh_aset_typ())) {
							typeCount++;
						}
					}
					if (typeCount == 0) {
						rmcResponseProfileManager.makeNotRequired(
								responseArray, indvProflRespCargo, true);
					}
				}

				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAD",
						driverArray, appNum);
				driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARVAT",
						driverArray, appNum);
				if (newVeh == null || newVeh.isEmpty()) {
					driverManager.makeAbsoluteNotRequired(
							FwConstants.RMC_DRIVER, "ARVAT", driverArray,
							appNum);
				}
			}
			session.put(AppConstants.RMC_IN_PRFL_MASTER, rmcInPrflColl);
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseVehicleAssetChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseVehicleAssetChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseVehicleAssetChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseVehicleAssetChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endVehicleAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endVehicleAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endVehicleAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			final APP_IN_VEH_ASET_Collection assetColl = (APP_IN_VEH_ASET_Collection) pageCollection
					.get("APP_IN_VEH_ASET_Collection");
			final APP_IN_VEH_ASET_Cargo vehicleAssetAssetCargo = assetColl
					.getCargo(0);

			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(vehicleAssetAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(vehicleAssetAssetCargo.getSeq_num());
			seqBean.setType(vehicleAssetAssetCargo.getVeh_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// Set RMC pages
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARVAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "AROAS",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endVehicleAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endVehicleAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endVehicleAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endVehicleAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Adds the liquid asset details.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetDetails() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			request.put("firstName_vehicle", null);
			request.put("type_vehicle", null);
			request.put("firstName_real", null);
			request.put("type_real", null);
			request.put("firstName_burial", null);
			request.put("type_burial", null);
			request.put("firstName_lifeIns", null);
			request.put("type_lifeIns", null);

			final String assetLiquidTypeSeq = request.get("firstName_liquid") != null ? (String) request
					.get("firstName_liquid") : FwConstants.EMPTY_STRING;
					final String assetLiquidType = request.get("type_liquid") != null ? (String) request
							.get("type_liquid") : FwConstants.EMPTY_STRING;

							final ARLADValidator liquidAssetValidator = new ARLADValidator();
							// validate selections

							if (assetLiquidTypeSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetLiquidTypeSeq)
									|| AppConstants.SELECT_DEFAULT_OPTION
									.equals(assetLiquidType)) {
								liquidAssetValidator.validateAdd();
								// add validation message and return
								request.put(FwConstants.MESSAGE_LIST,
										liquidAssetValidator.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);
							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(assetLiquidTypeSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(assetLiquidType);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARLAD", driver,
									appNum);
							driverManager.makeComplete(FwConstants.RMC_DRIVER, "ARLAT", driver,
									appNum);
							driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM", driver,
									appNum);

							final RMB_RQST_Collection pageRMBRqstColl = (RMB_RQST_Collection) session
									.get(AppConstants.RMB_RQST_COLLECTION);
							final RMB_RQST_Cargo pageRMBRqstCargo = pageRMBRqstColl.getCargo(0);
							pageRMBRqstCargo.setLqd_aset_add_ind(AppConstants.YES);

							session.put(FwConstants.RMC_DRIVER, driver);

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void editLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editLiquidAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editLiquidAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final String appNumber = (String) session
					.get(AppConstants.APP_NUMBER);
			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();
			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			APP_IN_LQD_ASET_Collection appInAssetColl = (APP_IN_LQD_ASET_Collection) pageCollection
					.get("APP_IN_LQD_ASET_Collection");
			APP_IN_LQD_ASET_Cargo appInAssetCargo = appInAssetColl
					.getCargo(0);
			if(appInAssetCargo.getLiquid_asset_sub_type_cd()==null)
			{
				appInAssetColl = liquidAssetBO.loadIndividualLiquidAssetDetails(
						appNumber, appInAssetCargo.getIndv_seq_num(), appInAssetCargo.getSeq_num());
				appInAssetCargo = appInAssetColl
						.getCargo(0);
			}
			
			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(appInAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(appInAssetCargo.getSeq_num());
			seqBean.setType(appInAssetCargo.getLqd_aset_typ());			

			// setting user end indicator

			if ("RE".equals(appInAssetCargo.getSrc_app_ind())) {
				seqBean.setUserEndInd(FwConstants.ONE);
			} else {
				seqBean.setUserEndInd(FwConstants.ZERO);
			}

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			// Get App Number
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			// Set RMC page Real Estate Asset Details make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::editLiquidAssetDetails:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("editLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"editLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.editLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLiquidAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String liquidAssetType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			final APP_IN_LQD_ASET_Collection assetColl = (APP_IN_LQD_ASET_Collection) pageCollection
					.get("APP_IN_LQD_ASET_Collection");
			final APP_IN_LQD_ASET_Cargo liquidAssetCargo = assetColl
					.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			RMC_IN_PRFL_Cargo matchingRMCInP = null;

			indvSeqNum = liquidAssetCargo.getIndv_seq_num();
			seqNum = liquidAssetCargo.getSeq_num();
			liquidAssetType = liquidAssetCargo.getLqd_aset_typ();
			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				if (indvSeqNum.equals(rmcInPrflColl.getCargo(i)
						.getIndv_seq_num())) {
					matchingRMCInP = rmcInPrflColl.getCargo(i);
				}
			}
			APP_IN_LQD_ASET_Cargo beforeLiquidAssetCargo = (APP_IN_LQD_ASET_Cargo) beforeColl
					.get("APP_IN_LQD_ASET_Cargo");

			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

			if (beforeLiquidAssetCargo == null
					|| liquidAssetBO.isDifferentAsset(liquidAssetCargo,
							beforeLiquidAssetCargo)) {

				liquidAssetBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						liquidAssetBO.getMessageList());
				beforeLiquidAssetCargo = new APP_IN_LQD_ASET_Cargo();
				beforeLiquidAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeLiquidAssetCargo.setSeq_num(seqNum);
				beforeLiquidAssetCargo.setLqd_aset_typ(liquidAssetType);
				beforeColl.put("APP_IN_LQD_ASET_Cargo", beforeLiquidAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			liquidAssetBO.deleteLiquidAssetRecords(indvSeqNum, seqNum, appNum,
					liquidAssetType);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_LIQUID_ASSET_PRFL , liquidAssetType);
			}
			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel.deleteJointOwnerRecords("LiquidAssetBO", indvSeqNum,
					seqNum, appNum, AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET,
					liquidAssetType);

			final APP_IN_LQD_ASET_Collection allCollections = liquidAssetBO
					.loadLiquidAssetDetails(appNum);
			final APP_IN_LQD_ASET_Collection nonCWRecords = liquidAssetBO
					.getNonCwRecords(allCollections, "CW");
			final APP_IN_LQD_ASET_Collection currentIndvColl = liquidAssetBO
					.getMatchingIndvLiqColl(nonCWRecords, indvSeqNum);
			final APP_IN_LQD_ASET_Collection detailsCollection = liquidAssetBO
					.splitLiqColl(currentIndvColl, liquidAssetType);

			final short responseID = rmcResponseProfileManager
					.getResponseByType(
							IRMCResponseProfileManager.LIQUID_ASSET_DETAILS,
							liquidAssetType);
			final int count = liquidAssetBO.getTypeCount(nonCWRecords,
					liquidAssetType);

			if (detailsCollection == null || detailsCollection.isEmpty()) {
				rmcResponseProfileManager.makeNotRequired(responseID,
						matchingRMCInP, true);
			}
			String pageId = null;
			if ("XF".equals(liquidAssetType)) {
				pageId = "ARXFR";
			} else {
				pageId = "ARLAD";
			}
			if (nonCWRecords == null || nonCWRecords.isEmpty()) {
				rmcResponseProfileManager.makeNotRequired(
						new short[] { responseID,
								IRMCResponseProfileManager.LIQ_ASET_OTHER },
								matchingRMCInP, true);
				if (pageId != null && count == 0) {
					driverManager
					.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
							pageId, driverArray, appNum);
				}
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLiquidAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * To erase Liquid asset changes.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void eraseLiquidAssetChanges(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetChanges() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLiquidAssetChanges:Start");
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			String indvSeqNum = null;
			String seqNum = null;
			String liquidAssetType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			// Get the APP_IN_LQD_ASET_Collection from pageCollection.
			APP_IN_LQD_ASET_Collection assetColl = (APP_IN_LQD_ASET_Collection) pageCollection
					.get("APP_IN_LQD_ASET_Collection");
			APP_IN_LQD_ASET_Cargo liquidAssetCargo = assetColl
					.getCargo(0);

			// Get the results from the APP_IN_LQD_ASET_Collection
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			indvSeqNum = liquidAssetCargo.getIndv_seq_num();
			seqNum = liquidAssetCargo.getSeq_num();
			liquidAssetType = liquidAssetCargo.getLqd_aset_typ();
			APP_IN_LQD_ASET_Cargo beforeAssetCargo = (APP_IN_LQD_ASET_Cargo) beforeColl
					.get("APP_IN_LQD_ASET_Cargo");

			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();
			if(liquidAssetCargo.getLiquid_asset_sub_type_cd()==null)
			{
				assetColl = liquidAssetBO.loadIndividualLiquidAssetDetails(
						appNum, liquidAssetCargo.getIndv_seq_num(), liquidAssetCargo.getSeq_num());
				liquidAssetCargo = assetColl
						.getCargo(0);
			}
			 
			if (beforeAssetCargo == null
					|| liquidAssetBO.isDifferentAsset(liquidAssetCargo,
							beforeAssetCargo)) {
				liquidAssetBO.validateEraseChanges();
				request.put(FwConstants.MESSAGE_LIST,
						liquidAssetBO.getMessageList());
				beforeAssetCargo = new APP_IN_LQD_ASET_Cargo();
				beforeAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeAssetCargo.setSeq_num(seqNum);
				beforeAssetCargo.setLqd_aset_typ(liquidAssetType);
				beforeColl.put("APP_IN_LQD_ASET_Cargo", beforeAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;
			}

			// delete record from database
			liquidAssetBO.deleteLiquidAssetRecords(indvSeqNum, seqNum, appNum,
					liquidAssetType);

			final LifeInsuranceBO jntOwnerDel = new LifeInsuranceBO();
			jntOwnerDel.deleteJointOwnerRecords("LiquidAssetBO", indvSeqNum,
					seqNum, appNum, AppConstants.JOINT_OWNER_TYPE_LIQUID_ASSET,
					liquidAssetType);

			final String catAssetType = AppConstants.RMC_CAT_LIQUID_ASSET_PRFL;

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			categorySelectionProfileManager.removeSequenceDetail(rmcSelPrfl,
					appNum, Short.parseShort(indvSeqNum),
					Short.parseShort(seqNum), catAssetType, liquidAssetCargo.getLqd_aset_typ());

			// insert a new sequence in selection profile with No change
			categorySelectionProfileManager.insertSequenceDetail(rmcSelPrfl,
					appNum, AppConstants.RMC_CAT_LIQUID_ASSET_PRFL,
					Short.parseShort(indvSeqNum), Short.parseShort(seqNum),
					liquidAssetCargo.getLqd_aset_typ(), (short) 2, 'N');

			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			liquidAssetBO.loadLiquidAssetDetails(appNum);

			boolean rmcPrflNotRequeired = false;
			// here we need to check we have no entrys in rmcPrfl for the other
			// income detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.LIQ_ASET_OTHER)) {
					rmcPrflNotRequeired = true;
				}
			} else {
				rmcPrflNotRequeired = true;
			}

			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TLAT", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map liquidAssetAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				liquidAssetAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			final boolean lqdDetlPageReq = checkAssetDetailsPageRequired(
					rmcSelPrfl, liquidAssetAssetTypeMap,
					AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);

			if (!lqdDetlPageReq && rmcPrflNotRequeired) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARLAD", driverArray, appNum);
			}

			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLiquidAssetChanges:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLiquidAssetChanges");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseLiquidAssetChanges", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetChanges() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void endLiquidAssetDetails(final FwTransaction txnBean)
			throws javax.ejb.EJBException {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endLiquidAssetDetails() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endLiquidAssetDetails:Start");
			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();
			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			APP_IN_LQD_ASET_Collection assetColl = (APP_IN_LQD_ASET_Collection) pageCollection
					.get("APP_IN_LQD_ASET_Collection");
			APP_IN_LQD_ASET_Cargo liquidAssetCargo = assetColl
					.getCargo(0);
			// Get App Number			
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();
			if(liquidAssetCargo.getLiquid_asset_sub_type_cd()==null)
			{
				assetColl = liquidAssetBO.loadIndividualLiquidAssetDetails(
						appNum, liquidAssetCargo.getIndv_seq_num(), liquidAssetCargo.getSeq_num());
				liquidAssetCargo = assetColl
						.getCargo(0);
			}
			final IndivTypeSeqBean seqBean = new IndivTypeSeqBean();
			seqBean.setIndivSeqNum(liquidAssetCargo.getIndv_seq_num());
			seqBean.setSeqNum(liquidAssetCargo.getSeq_num());
			seqBean.setType(liquidAssetCargo.getLqd_aset_typ());
			seqBean.setUserEndInd(FwConstants.ONE);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, seqBean);
			

			final RMBRequestManager rmbRqstManager = new RMBRequestManager();
			final RMB_RQST_Cargo rmbCargo = rmbRqstManager
					.loadRMBRequest(appNum);
			final RMB_RQST_Collection pageRMBRqstColl = new RMB_RQST_Collection();

			if (rmbCargo != null) {
				rmbCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
				rmbCargo.setLqd_aset_stat_ind(AppConstants.YES);
				pageRMBRqstColl.addCargo(rmbCargo);
				rmbRqstManager.storeRMBRqst(pageRMBRqstColl);
				session.put(AppConstants.RMB_RQST_COLLECTION, pageRMBRqstColl);
			}

			// Set RMB Asset Details page - make required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARLAD",
					driverArray, appNum);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);
			// End
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::endLiquidAssetDetails:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("endLiquidAssetDetails");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"endLiquidAssetDetails", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.endLiquidAssetDetails() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Track people to persist.
	 *
	 * @param persistPeople the persist people
	 * @param indivSeqNumInt the indiv seq num int
	 * @return the boolean[]
	 */
	private boolean[] trackPeopleToPersist(final boolean[] persistPeople,
			final int indivSeqNumInt) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.trackPeopleToPersist() - START");
		try {
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::trackPeopleToPersist:Start");
			/*
			 * VG SONAR Cleanup - 08/27/2015 Deleted 1,1 lines Commented Code in
			 * this block
			 */

			persistPeople[IRMCResponseProfileManager.ARE_PEOPLE_DIRTY] = true;

			persistPeople[indivSeqNumInt] = true;
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::trackPeopleToPersist:End");
			// Returning the Boolean array
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.trackPeopleToPersist() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return persistPeople;
		} catch (final FwException fe) {
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"trackPeopleToPersist", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * This is to verify whether change selection page is required.
	 *
	 * @param rmcSelPrfl the rmc sel prfl
	 * @param rmcInPrflColl the rmc in prfl coll
	 * @return true, if successful
	 */
	public boolean checkChangeSelectionPageReq(final SortedSet rmcSelPrfl,
			final RMC_IN_PRFL_Collection rmcInPrflColl) {

		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.checkChangeSelectionPageReq() - START");
		try {
			boolean isChgSelPageReq = false;

			if (!categorySelectionProfileManager.isEmpty(rmcSelPrfl)) {
				return true;
			}

			for (int i = 0; i < rmcInPrflColl.size(); i++) {
				final RMC_IN_PRFL_Cargo rmcInPrfl = rmcInPrflColl.getCargo(0);

				if (!isChgSelPageReq
						&& (AppConstants.YES.equalsIgnoreCase(rmcInPrfl
								.getLqd_aset_othr_resp())
								|| AppConstants.YES.equalsIgnoreCase(rmcInPrfl
										.getOther_asset_vehicle_resp())
										|| AppConstants.YES.equalsIgnoreCase(rmcInPrfl
												.getOther_asset_real_property_resp())
												|| AppConstants.YES.equalsIgnoreCase(rmcInPrfl
														.getOther_asset_burial_resp()) || AppConstants.YES
														.equalsIgnoreCase(rmcInPrfl
																.getOther_aset_life_insurance_resp()))) {
					isChgSelPageReq = true;
				}
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.checkChangeSelectionPageReq() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isChgSelPageReq;
		} catch (final FwException fe) {
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkChangeSelectionPageNotRequired", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * This is to verify whether change selection page is required.
	 *
	 * @param rmcSelPrfl the rmc sel prfl
	 * @param rmcInPrflColl the rmc in prfl coll
	 * @param rmbRqstColl the rmb rqst coll
	 * @return true, if successful
	 */
	public boolean checkChangeSelectionPageRequired(final SortedSet rmcSelPrfl,
			final RMC_IN_PRFL_Collection rmcInPrflColl,
			final RMB_RQST_Collection rmbRqstColl) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.checkChangeSelectionPageRequired() - START");
		try {

			final RMB_RQST_Cargo rmbRqstCargo = rmbRqstColl.getCargo(0);
			if (
			/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 4 lines Commented Code in
					 * this block
					 */

			AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
							.getVeh_aset_stat_ind())
							|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
									.getVeh_aset_add_ind())
									|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
											.getReal_aset_stat_ind())
											|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
													.getReal_aset_add_ind())
													|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
															.getBury_aset_stat_ind())
															|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
																	.getBury_aset_add_ind())
																	|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
																			.getLi_aset_stat_ind())
																			|| AppConstants.YES.equalsIgnoreCase(rmbRqstCargo
																					.getLi_aset_add_ind())) {
				return true;
			}

			final boolean isChgSelPageReq = false;

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.checkChangeSelectionPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isChgSelPageReq;
		} catch (final FwException fe) {
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkChangeSelectionPageNotRequired", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Check asset details page required.
	 *
	 * @param categorySelectionProfile the category selection profile
	 * @param catType the cat type
	 * @param catCd the cat cd
	 * @return true, if successful
	 */
	public boolean checkAssetDetailsPageRequired(
			final SortedSet categorySelectionProfile, final Map catType,
			final String catCd) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.checkAssetDetailsPageRequired() - START");
		try {
			boolean isAssetDetailPageRequired = false;
			if (categorySelectionProfile != null) {
				// this one form the category selection profile
				final Iterator iter = categorySelectionProfile.iterator();
				CategorySequenceDetail categorySeqDtl = null;
				while (iter.hasNext()) {
					categorySeqDtl = (CategorySequenceDetail) iter.next();
					if (catType != null
							&& catType.get(categorySeqDtl.getCategoryType()) != null
							&& categorySeqDtl.getUserEndSelectionInd() != AppConstants.RMB_NO_CHANGE_SEL_IND
							&& categorySeqDtl.getChangeSelectionCategoryCd()
							.equals(catCd)) {
						isAssetDetailPageRequired = true;
						break;
					}
				}
			}

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean.checkAssetDetailsPageRequired() - END , Time Taken : "
							+ (System.currentTimeMillis() - startTime)
							+ " milliseconds");
			return isAssetDetailPageRequired;
		} catch (final FwException fe) {
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			final FwException fe = createFwException(this.getClass().getName(),
					"checkAssetDetailsPageRequired", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
	}

	/**
	 * Checks if is liquid asset detail page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is liquid asset detail page required
	 */
	private boolean isLiquidAssetDetailPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isLiquidAssetDetailPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getLiquid_asset_other_response().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getLiquid_aset_disable_blind_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getLiquid_asset_ira_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLiquid_asset_irs_retirmnt_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLiquid_asset_savings_acc_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLiquid_asset_pension_plan_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getLiquid_asset_promissory_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getLiquid_asset_retirement_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLiquid_asset_stocks_bonds_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getLiquid_asset_trust_fund_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
						.getLiquid_asset_other_type_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isLiquidAssetDetailPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is vehicle asset page required.
	 *
	 * @param rmcInPrflBeforeCargo the rmc in prfl before cargo
	 * @return true, if is vehicle asset page required
	 */
	private boolean isVehicleAssetPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflBeforeCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isVehicleAssetPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflBeforeCargo.getOther_asset_vehicle_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflBeforeCargo.getVeh_aset_arpl_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVehicle_asset_camper_resp()
				.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVehicle_asset_auto_resp()
				.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVeh_aset_fmeq_resp().charAt(
						0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVehicle_asset_boat_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo
						.getVehicle_asset_motorcycle_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVeh_aset_nm_b_resp().charAt(
								0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo
								.getVehicle_asset_recreation_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVeh_aset_trlr_resp().charAt(
										0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVeh_aset_trk_resp()
										.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflBeforeCargo.getVeh_aset_unlic_resp()
										.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflBeforeCargo
						.getVeh_aset_van_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED

				)) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isVehicleAssetPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is burial asset page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is burial asset page required
	 */
	private boolean isBurialAssetPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isBurialAssetPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getOther_asset_burial_resp().charAt(0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getBury_aset_ins_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getBury_aset_plt_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
				||

						rmcInPrflSessCargo.getBury_aset_oth_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
				.getBury_aset_rbt_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isBurialAssetPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is real asset page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is real asset page required
	 */
	private boolean isRealAssetPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isRealAssetPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getOther_asset_real_property_resp().charAt(
				0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getReal_aset_apt_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_aset_con_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_aset_dup_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_aset_frm_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_land_resp().charAt(
						0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_mobile_home_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_other_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_life_estate_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_rental_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo.getReal_asset_house_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getReal_asset_unoccupy_home_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
						.getReal_aset_vac_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isRealAssetPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Checks if is LI asset page required.
	 *
	 * @param rmcInPrflSessCargo the rmc in prfl sess cargo
	 * @return true, if is LI asset page required
	 */
	private boolean isLIAssetPageRequired(
			final RMC_IN_PRFL_Cargo rmcInPrflSessCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isLIAssetPageRequired() - START");
		boolean isRequired = false;
		char status = IRMCResponseProfileManager.STATUS_NOT_REQUIRED;
		status = rmcInPrflSessCargo.getOther_aset_life_insurance_resp().charAt(
				0);
		if (status == IRMCResponseProfileManager.STATUS_ADD_NEW
				|| status == IRMCResponseProfileManager.STATUS_VISIT_AGAIN
				|| status == IRMCResponseProfileManager.STATUS_REQUIRED) {
			isRequired = true;
		}

		if (status == IRMCResponseProfileManager.STATUS_COMPLETE
				&& (rmcInPrflSessCargo.getLife_insurance_asset_term_resp()
						.charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLife_ins_asest_group_life_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLife_ins_asset_group_term_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLife_ins_asset_universal_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED
						|| rmcInPrflSessCargo
						.getLife_ins_asset_whole_life_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED || rmcInPrflSessCargo
						.getLife_insurance_other_resp().charAt(0) == IRMCResponseProfileManager.STATUS_REQUIRED)) {
			isRequired = true;
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.isLIAssetPageRequired() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return isRequired;
	}

	/**
	 * Gets the matching ins cvrg cargo.
	 *
	 * @param appInLifInsColl the app in lif ins coll
	 * @param appInLifInsBeforeCargo the app in lif ins before cargo
	 * @return the matching ins cvrg cargo
	 */
	// EDSP RMC - get Matching cargo value from insured person
	public CP_APP_IN_LIF_INS_CVRG_Cargo getMatchingInsCVRGCargo(
			final CP_APP_IN_LIF_INS_CVRG_Collection appInLifInsColl,
			final CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsBeforeCargo) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getMatchingInsCVRGCargo() - START");
		if (appInLifInsColl == null || appInLifInsColl.isEmpty()) {
			return null;
		}
		final int appInLifInsCollSize = appInLifInsColl.size();
		CP_APP_IN_LIF_INS_CVRG_Cargo appInLifInsCargo = null;
		String otsdInd = appInLifInsBeforeCargo.getOtsd_ind();
		final String coveredIndvSeqNum = appInLifInsBeforeCargo
				.getCovered_indv_seq_num();
		if (otsdInd == null) {
			otsdInd = AppConstants.EMPTY_STRING;
		}
		String otsdJntInd = null;
		if (appInLifInsColl != null && !appInLifInsColl.isEmpty()) {
			for (int i = 0; i < appInLifInsCollSize; i++) {
				appInLifInsCargo = appInLifInsColl.getCargo(i);
				otsdJntInd = appInLifInsCargo.getOtsd_ind();
				if (otsdJntInd == null) {
					otsdJntInd = AppConstants.EMPTY_STRING;
				}
				if ((appInLifInsCargo.getCovered_indv_seq_num() == null
						&& coveredIndvSeqNum == null || appInLifInsCargo
						.getCovered_indv_seq_num() != null
						&& appInLifInsCargo.getCovered_indv_seq_num().equals(
								coveredIndvSeqNum))
								&& otsdInd.equals(otsdJntInd)) {
					return appInLifInsCargo;
				}
			}
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.getMatchingInsCVRGCargo() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return null;
	}

	// RMB Change for PCR#40362 -- End changes
	/**
	 * Load other asset summary.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void loadOtherAssetSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetSummary:Start");
		final long startTime = System.currentTimeMillis();

		// Declarations
		APP_IN_L_INS_ASET_Collection rmbLifeInsColl = null;
		APP_IN_VEH_ASET_Collection vehicleAssetColl = null;
		APP_IN_R_PROP_ASET_Collection realPropertyColl = null;
		APP_IN_BURY_ASET_Collection burialAssetColl = null;
		APP_IN_LQD_ASET_Collection liquidAssetColl = null;
		APP_IN_P_PROP_ASET_Collection prsnlAssetColl = null;

		// Getting session and request utilities
		final Map session = txnBean.getSession();
		final Map pageCollection = txnBean.getPageCollection();
		final Map request = txnBean.getRequest();
		final String appType = (String) session
				.get(FwConstants.ACCESS_APPLICATION_TYPE);
		final Map beforeColl = (Map) session.get(FwConstants.BEFORE_COLLECTION);
		final String appNum = (String) session.get(AppConstants.APP_NUMBER);
		final int[] driverArray = (int[]) session.get(FwConstants.RMC_DRIVER);
		final int driverStatus = driverManager.getAFBStatus(
				FwConstants.RMC_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray);
		SortedSet selectionProfile = (SortedSet) session
				.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
		final Map httpSessionMap = (Map) session.get(FwConstants.HTTP_SESSION);
		final String language = (String) httpSessionMap
				.get(AppConstants.LANGUAGE);

		// Category sequence Indicators
		boolean loadLifeInsCatSelProfile = false;
		boolean loadVehicleAstCatSelProfile = false;
		boolean loadRealPropCatSelProfile = false;
		boolean loadBurialAstCatSelProfile = false;
		boolean loadPPCatSelProfile = false;

		// If the current page has any other status other than required and the
		// selections from the current session is not null or empty.
		// Set the flag to Load selections from the database to true
		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			loadLifeInsCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			// Else if the selections from the session are required get the
			// current category sequence detail from session selection
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				// If current selection detail is not found , find the next
				// selectin detail
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);
				// If next is not null and the category CD is life Insurance,
				// set the flag that load the life insurance selections details
				// to false else set it to true.
				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadLifeInsCatSelProfile = false;
				} else {
					loadLifeInsCatSelProfile = true;
				}
			}
		}
		// Based on the indicator load the category sequence detail of the Life
		// Insurance selections.
		// This is loaded if the selection from session is not null and the
		// current page is complete, required, visit again or any other thing
		// except not required
		// The selection details for life will also load if the life category
		// sequence is neither current sequence nor next.
		if (loadLifeInsCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_LIFE_INS_ASSET_PRFL);
		}

		// Do the same thing for vehicle details
		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			loadVehicleAstCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadVehicleAstCatSelProfile = false;
				} else {
					loadVehicleAstCatSelProfile = true;
				}
			}
		}
		if (loadVehicleAstCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_VEHICLE_ASSET_PRFL);
		}

		// Do the same for Real Estate
		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			loadRealPropCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);
				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_REAL_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadRealPropCatSelProfile = false;
				} else {
					loadRealPropCatSelProfile = true;
				}
			}
		}
		if (loadRealPropCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_REAL_ASSET_PRFL);
		}

		// Do the same for the Burial Resource
		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			loadBurialAstCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);

				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_BURIAL_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadBurialAstCatSelProfile = false;
				} else {
					loadBurialAstCatSelProfile = true;
				}
			}
		}
		if (loadBurialAstCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_BURIAL_ASSET_PRFL);
		}

		// Do the same for Personal Profil=Other Resources
		if ((selectionProfile == null || selectionProfile.isEmpty())
				&& driverStatus != FwConstants.DRIVER_NOT_REQUIRED) {
			loadPPCatSelProfile = true;
		} else if (selectionProfile != null && !selectionProfile.isEmpty()) {
			CategorySequenceDetail catSeqDetail = categorySelectionProfileManager
					.getCurrentSequenceDetail(selectionProfile);
			if (catSeqDetail == null) {
				catSeqDetail = categorySelectionProfileManager
						.getNextSequenceDetail(selectionProfile);
				if (catSeqDetail != null
						&& AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL
						.equals(catSeqDetail
								.getChangeSelectionCategoryCd())) {
					loadPPCatSelProfile = false;
				} else {
					loadPPCatSelProfile = true;
				}
			}
		}
		if (loadPPCatSelProfile) {
			selectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_PERSONAL_ASSET_PRFL);
		}

		// Update the selection Profile from the session, if changed all changes
		// will be synced otherwise session's selection profile is maintained.
		categorySelectionProfileManager
		.resetCurrentSeqeunceDetail(selectionProfile);

		// Instantiate BO
		final LifeInsuranceBO lifeInsuranceTypeBO = new LifeInsuranceBO();
		final BurialAssetBO burialAsetBO = new BurialAssetBO();
		final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();
		final RealPropertyBO realPropertyDetailsBO = new RealPropertyBO();
		final VehicleAssetBO vehicleAssetBO = new VehicleAssetBO();
		final PersonalPropertyBO ppBO = new PersonalPropertyBO();

		// load the all details gathered in the details page for the current
		// application number.
		rmbLifeInsColl = lifeInsuranceTypeBO.loadLifeInsuranceDetails(appNum);
		vehicleAssetColl = vehicleAssetBO
				.loadVehicleAssetDetailsSummary(appNum);
		realPropertyColl = realPropertyDetailsBO
				.loadRealPropertyDetailsSummary(appNum);
		burialAssetColl = burialAsetBO.loadBurialAssetDetails(appNum);
		liquidAssetColl = liquidAssetBO.loadLiquidAssetDetailsSummary(appNum);
		prsnlAssetColl = ppBO.loadPersonalProperty(appNum);
		// Getting the size loaded collection for each type of other asset
		final int sizeLifeInsColl = rmbLifeInsColl.size();
		final int sizeVehicleAssetColl = vehicleAssetColl.size();
		final int sizeRealPropertyColl = realPropertyColl.size();
		final int sizeBurialAssetColl = burialAssetColl.size();
		liquidAssetColl.size();
		final int sizePersonalAssetColl = prsnlAssetColl.size();

		// Creating flags for User actions from previous page
		String newOrModifiedLifeInsExists = FwConstants.NO;
		String newOrModifiedVehicleAssetExists = FwConstants.NO;
		String newOrModifiedRealPropertyExists = FwConstants.NO;
		String newOrModifiedBurialAssetExists = FwConstants.NO;
		final String newOrModifiedLiquidAssetExists = FwConstants.NO;
		String newOrModifiedPersonalAssetExists = FwConstants.NO;
		for (int i = 0; i < sizeLifeInsColl; i++) {
			APP_IN_L_INS_ASET_Cargo lifeInsCargo = new APP_IN_L_INS_ASET_Cargo();
			lifeInsCargo = rmbLifeInsColl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedLifeInsExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(lifeInsCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_END_RECORD_IND.equals(lifeInsCargo
								.getSrc_app_ind())
								|| AppConstants.RMC_MODIFIED_RECORD_IND
								.equals(lifeInsCargo.getSrc_app_ind())) {
					newOrModifiedLifeInsExists = FwConstants.YES;
				}
			}
		}

		for (int i = 0; i < sizeVehicleAssetColl; i++) {
			APP_IN_VEH_ASET_Cargo vehicleAstCargo = new APP_IN_VEH_ASET_Cargo();
			vehicleAstCargo = vehicleAssetColl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedVehicleAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(vehicleAstCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(vehicleAstCargo.getSrc_app_ind())
						|| AppConstants.RMC_END_RECORD_IND
						.equals(vehicleAstCargo.getSrc_app_ind())) {
					newOrModifiedVehicleAssetExists = FwConstants.YES;
				}
			}
		}

		for (int i = 0; i < sizeRealPropertyColl; i++) {
			APP_IN_R_PROP_ASET_Cargo realPropertyCargo = new APP_IN_R_PROP_ASET_Cargo();
			realPropertyCargo = realPropertyColl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedRealPropertyExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(realPropertyCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(realPropertyCargo.getSrc_app_ind())
						|| AppConstants.RMC_END_RECORD_IND
						.equals(realPropertyCargo.getSrc_app_ind())) {
					newOrModifiedRealPropertyExists = FwConstants.YES;
				}
			}
		}

		for (int i = 0; i < sizeBurialAssetColl; i++) {
			APP_IN_BURY_ASET_Cargo burialAssetCargo = new APP_IN_BURY_ASET_Cargo();
			burialAssetCargo = burialAssetColl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedBurialAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(burialAssetCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(burialAssetCargo.getSrc_app_ind())
						|| AppConstants.RMC_END_RECORD_IND
						.equals(burialAssetCargo.getSrc_app_ind())) {
					newOrModifiedBurialAssetExists = FwConstants.YES;
				}
			}
		}

		for (int i = 0; i < sizePersonalAssetColl; i++) {
			APP_IN_P_PROP_ASET_Cargo prsnlAssetCargo = new APP_IN_P_PROP_ASET_Cargo();
			prsnlAssetCargo = prsnlAssetColl.getCargo(i);
			if (FwConstants.NO.equals(newOrModifiedPersonalAssetExists)) {
				if (AppConstants.RMC_NEW_RECORD_IND.equals(prsnlAssetCargo
						.getSrc_app_ind())
						|| AppConstants.RMC_MODIFIED_RECORD_IND
						.equals(prsnlAssetCargo.getSrc_app_ind())
						|| AppConstants.RMC_END_RECORD_IND
						.equals(prsnlAssetCargo.getSrc_app_ind())) {
					newOrModifiedPersonalAssetExists = FwConstants.YES;
				}
			}
		}

		// Preparing list views
		final RMBVehicleAssetsSummaryListView rmbVehicleAssetsSummary = new RMBVehicleAssetsSummaryListView();
		final RMBRealEstateAssetsSummaryListView rmbRealEstateAssetsSummary = new RMBRealEstateAssetsSummaryListView();
		final RMBBurialAssetsSummaryListView rmbBurialAssetsSummary = new RMBBurialAssetsSummaryListView();
		final RMBLifeInsuranceAssetsSummaryListView rmbLifeInsuranceSummary = new RMBLifeInsuranceAssetsSummaryListView();
		final RMBPersonalPropertySummaryListview rmbPrsnlAssetSummary = new RMBPersonalPropertySummaryListview();
		// Setting list views collections
		rmbVehicleAssetsSummary.setVehicleAssetCollection(vehicleAssetColl);
		rmbRealEstateAssetsSummary.setRealEstateCollection(realPropertyColl);
		rmbBurialAssetsSummary.setBurialDtsCollection(burialAssetColl);
		rmbLifeInsuranceSummary.setLifeInsCollection(rmbLifeInsColl);
		rmbPrsnlAssetSummary.setPrsnlPropertyCollection(prsnlAssetColl);

		rmbVehicleAssetsSummary.setApplicationType(appType);
		rmbRealEstateAssetsSummary.setApplicationType(appType);
		rmbBurialAssetsSummary.setApplicationType(appType);
		rmbLifeInsuranceSummary.setApplicationType(appType);
		rmbPrsnlAssetSummary.setApplicationType(appType);

		// Adding collections to page collection
		pageCollection.put("APP_IN_VEH_ASET_Collection", vehicleAssetColl);
		pageCollection.put("APP_IN_R_PROP_ASET_Collection", realPropertyColl);
		pageCollection.put("APP_IN_L_INS_ASET_Collection", rmbLifeInsColl);
		pageCollection.put("APP_IN_BURY_ASET_Collection", burialAssetColl);
		pageCollection.put("APP_IN_P_PROP_ASET_Collection", prsnlAssetColl);
		pageCollection.put("NEW_OR_MOD_LIQUID_EXISTS",
				newOrModifiedLiquidAssetExists);
		pageCollection.put("NEW_OR_MOD_VEHICLE_EXISTS",
				newOrModifiedVehicleAssetExists);
		pageCollection.put("NEW_OR_MOD_REAL_EXISTS",
				newOrModifiedRealPropertyExists);
		pageCollection.put("NEW_OR_MOD_BURIAL_EXISTS",
				newOrModifiedBurialAssetExists);
		pageCollection
		.put("NEW_OR_MOD_LIFE_EXISTS", newOrModifiedLifeInsExists);
		pageCollection.put("NEW_OR_MOD_PP_EXISTS",
				newOrModifiedPersonalAssetExists);

		final PeopleHandler peopleHandler = (PeopleHandler) session
				.get(AppConstants.INDIV_MASTER_HANDLER);
		final List vehicleList = new ArrayList();
		vehicleList.add(vehicleAssetColl);
		vehicleList.add(peopleHandler);

		// Preparing list views
		rmbVehicleAssetsSummary.setLanguage(language);
		rmbVehicleAssetsSummary.setName("RMB_VEHICLE_ASSET_SUMMARY_LISTVIEW");
		rmbVehicleAssetsSummary.setDisplayData(vehicleList);
		rmbVehicleAssetsSummary.setPageSize(1000);

		// Preparing listView for RealEstate Assets selection
		rmbRealEstateAssetsSummary.setLanguage(language);
		rmbRealEstateAssetsSummary.setName("RMB_REAL_ESTATE_SUMMARY_LISTVIEW");
		rmbRealEstateAssetsSummary.setDisplayData(realPropertyColl);
		rmbRealEstateAssetsSummary.setPageSize(1000);

		// Preparing listView for LifeInsurance Assets selection
		rmbLifeInsuranceSummary.setLanguage(language);
		rmbLifeInsuranceSummary.setName("RMB_LIFE_INS_SUMMARY_LISTVIEW");
		rmbLifeInsuranceSummary.setDisplayData(rmbLifeInsColl);
		rmbLifeInsuranceSummary.setPageSize(1000);

		// Preparing listView for RealEstate Assets selection
		rmbBurialAssetsSummary.setLanguage(language);
		rmbBurialAssetsSummary.setName("RMB_BURIAL_SUMMARY_LISTVIEW");
		rmbBurialAssetsSummary.setDisplayData(burialAssetColl);
		rmbBurialAssetsSummary.setPageSize(1000);

		rmbPrsnlAssetSummary.setLanguage(language);
		rmbPrsnlAssetSummary.setName("RMB_PERSONAL_SUMMARY_LISTVIEW");
		rmbPrsnlAssetSummary.setDisplayData(prsnlAssetColl);
		rmbPrsnlAssetSummary.setPageSize(1000);

		// Poupulating pageCollection with respective response maps
		pageCollection.put("RMB_VEHICLE_ASSET_SUMMARY_LISTVIEW",
				rmbVehicleAssetsSummary);
		pageCollection.put("RMB_REAL_ESTATE_SUMMARY_LISTVIEW",
				rmbRealEstateAssetsSummary);
		pageCollection.put("RMB_LIFE_INS_SUMMARY_LISTVIEW",
				rmbLifeInsuranceSummary);
		pageCollection.put("RMB_BURIAL_SUMMARY_LISTVIEW",
				rmbBurialAssetsSummary);
		pageCollection.put("RMB_PERSONAL_SUMMARY_LISTVIEW",
				rmbPrsnlAssetSummary);

		// Run component manager
		componentManager.getComponents((String) request.get(FwConstants.CURRENT_PAGE_ID), txnBean);
		final Map indvSelectedMap = new HashMap();

		pageCollection.put("RESP_MAP_5257", indvSelectedMap);

		// Set pageCollection into transaction Bean
		txnBean.setPageCollection(pageCollection);

		final Map newAssetMap = new HashMap();
		pageCollection.put("NEW_ASSET_MAP", newAssetMap);
		final Map overrideMap = (Map) beforeColl.get("NEW_ASSET_OVERRIDE");
		pageCollection.put("NEW_ASSET_OVERRIDE", overrideMap);
		pageCollection.put("NO_ONE_Collection",
				pageCollection.get("NO_ONE_Collection"));
		session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
		txnBean.setSession(session);

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean::loadOtherAssetSummary:End");

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.loadOtherAssetSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Store other asset summary.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 * @throws javax.ejb.EJBException the javax.ejb. ejb exception
	 */
	public void storeOtherAssetSummary(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetSummary() - START");
		try {

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final String currentPageID = (String) request
					.get(FwConstants.CURRENT_PAGE_ID);
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);
			final NO_ONE_Collection noOneColl = (NO_ONE_Collection) pageCollection
					.get("NO_ONE_Collection");
			final Map noOneCheckedMap = (Map) beforeColl
					.get(AppConstants.NO_ONE_CHECKED_MAP);
			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "AROAS",
					driverArray);
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final String backToMyAccess = (String) request
					.get(AppConstants.BACK_TO_MY_ACCESS_BUTTON);

			if (backToMyAccess != null) {
				if (checkBackToMyAccessSelected(request)) {
					request.get(FwConstants.WARNING_MSG_DETAILS);
					txnBean.setPageCollection((Map) session
							.get(FwConstants.BEFORE_COLLECTION));
					return;
				}
			}

			beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			final RMC_IN_PRFL_Collection beforePrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);
			pageCollection.get("RMC_IN_PRFL_Collection");
			rmcResponseProfileManager.getMaxIndvSeqNumber(beforePrflColl);

			final ARASMValidator validator = new ARASMValidator();


			if (validator.hasMessages()) {

				request.put(FwConstants.MESSAGE_LIST,
						validator.getMessageList());
				pageCollection
				.put("PEOPLE_5256", beforeColl.get("PEOPLE_5256"));
				pageCollection
				.put("PEOPLE_5257", beforeColl.get("PEOPLE_5257"));

				final Map indvSelectedMap = new HashMap();

				pageCollection.put("RESP_MAP_5257", indvSelectedMap);

				if (noOneColl != null && !noOneColl.isEmpty()) {
					noOneCheckedMap.put("NO_ONE_CHECKED_5257", FwConstants.YES);
				}
				pageCollection.put("NO_ONE_Collection", noOneColl);

				pageCollection.put("RMB_LIQUID_ASSET_SUMMARY_LISTVIEW",
						beforeColl.get("RMB_LIQUID_ASSET_SUMMARY_LISTVIEW"));
				pageCollection.put("RMB_VEHICLE_ASSET_SUMMARY_LISTVIEW",
						beforeColl.get("RMB_VEHICLE_ASSET_SUMMARY_LISTVIEW"));
				pageCollection.put("RMB_REAL_ESTATE_SUMMARY_LISTVIEW",
						beforeColl.get("RMB_REAL_ESTATE_SUMMARY_LISTVIEW"));
				pageCollection.put("RMB_LIFE_INS_SUMMARY_LISTVIEW",
						beforeColl.get("RMB_LIFE_INS_SUMMARY_LISTVIEW"));
				pageCollection.put("RMB_BURIAL_SUMMARY_LISTVIEW",
						beforeColl.get("RMB_BURIAL_SUMMARY_LISTVIEW"));
				pageCollection.put("APP_IN_LQD_ASET_Collection",
						beforeColl.get("APP_IN_LQD_ASET_Collection"));
				pageCollection.put("APP_IN_VEH_ASET_Collection",
						beforeColl.get("APP_IN_VEH_ASET_Collection"));
				pageCollection.put("APP_IN_R_PROP_ASET_Collection",
						beforeColl.get("APP_IN_R_PROP_ASET_Collection"));
				pageCollection.put("APP_IN_L_INS_ASET_Collection",
						beforeColl.get("APP_IN_L_INS_ASET_Collection"));
				pageCollection.put("APP_IN_BURY_ASET_Collection",
						beforeColl.get("APP_IN_BURY_ASET_Collection"));
				pageCollection.put("NEW_OR_MOD_LIQUID_EXISTS",
						beforeColl.get("NEW_OR_MOD_LIQUID_EXISTS"));
				pageCollection.put("NEW_OR_MOD_VEHICLE_EXISTS",
						beforeColl.get("NEW_OR_MOD_VEHICLE_EXISTS"));
				pageCollection.put("NEW_OR_MOD_REAL_EXISTS",
						beforeColl.get("NEW_OR_MOD_REAL_EXISTS"));
				pageCollection.put("NEW_OR_MOD_LIFE_EXISTS",
						beforeColl.get("NEW_OR_MOD_LIFE_EXISTS"));
				pageCollection.put("NEW_OR_MOD_BURIAL_EXISTS",
						beforeColl.get("NEW_OR_MOD_BURIAL_EXISTS"));
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP,
						noOneCheckedMap);
				componentManager.getComponents("ARASM", txnBean);
				return;

			}

			// Update pre-pop indicators

			final ChangingValidation cv = new ChangingValidation();
			cv.setVehicleAssetInd(txnBean);
			cv.setRealAssetInd(txnBean);
			cv.setBurialAssetInd(txnBean);
			cv.setLifeInsuranceAssetInd(txnBean);
			cv.setOtherLiquidAssetsInd(txnBean);

			driverManager.makeComplete(FwConstants.RMC_DRIVER, currentPageID,
					driverArray, appNum);
			session.put(FwConstants.RMC_DRIVER, driverArray);

			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::storeOtherAssetSummary:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeOtherAssetSummary");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"storeOtherAssetSummary", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.storeOtherAssetSummary() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Filter coll by type.
	 *
	 * @param coll the coll
	 * @param types the types
	 * @param matchCriteria the match criteria
	 * @return the AP p_ i n_ lq d_ ase t_ collection
	 */
	private APP_IN_LQD_ASET_Collection filterCollByType(
			final APP_IN_LQD_ASET_Collection coll, final String[] types,
			final int matchCriteria) {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.filterCollByType() - START");
		final APP_IN_LQD_ASET_Collection collFilter = new APP_IN_LQD_ASET_Collection();

		collFilter.setResults(coll.cloneResults());

		if (collFilter != null && !collFilter.isEmpty()) {
			int rows = collFilter.size();

			for (int i = 0; i < rows; i++) {
				final APP_IN_LQD_ASET_Cargo liqCargo = collFilter.getCargo(i);

				boolean remove = false;

				for (int j = 0; j < types.length; j++) {

					if (matchCriteria == IReferenceConstants.FILTER_EXCLUDE_MATCH_ONE) {
						if (liqCargo.getLqd_aset_typ().equals(types[j])) {
							remove = true;
						}
					} else if (matchCriteria == IReferenceConstants.FILTER_INCLUDE_MATCH_ONE) {
						if (liqCargo.getLqd_aset_typ().equals(types[j])) {
							remove = false;
							break;
						}

						remove = true;
					}
				}

				if (remove) {
					collFilter.remove(i);
					i--;
					rows--;
				}

			}

		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.filterCollByType() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
		return collFilter;
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLiquidAssetCash(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetCash() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String cashIndvSeq = request.get("firstName_cash") != null ? (String) request
					.get("firstName_cash") : FwConstants.EMPTY_STRING;

					final LiquidAssetBO lqdAstBo = new LiquidAssetBO();
					// validate selections
					if (cashIndvSeq == null
							|| AppConstants.SELECT_DEFAULT_OPTION.equals(cashIndvSeq)) {
						lqdAstBo.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST, lqdAstBo.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);

					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(cashIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType("CAS");
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					
					final RMC_IN_PRFL_Collection rmcInPrflMstr = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					RMC_IN_PRFL_Cargo prflCargo = rmcResponseProfileManager.getProfile(rmcInPrflMstr, cashIndvSeq);
					rmcResponseProfileManager.makeAddNew(IRMCResponseProfileManager.LIQ_ASET_CASH, prflCargo, true);
					
					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARLAD", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLiquidAssetCash");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLiquidAssetCash", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetCash() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLiquidAssetFinancialAccount(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetFinancialAccount() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String cashIndvSeq = request.get("firstName_account") != null ? (String) request
					.get("firstName_account") : FwConstants.EMPTY_STRING;
					/*
					 * VG SONAR Cleanup - 08/27/2015 Deleted 1 lines Commented Code in
					 * this block
					 */

					final LiquidAssetBO lqdAstBo = new LiquidAssetBO();
					// validate selections
					if (cashIndvSeq == null
							|| AppConstants.SELECT_DEFAULT_OPTION.equals(cashIndvSeq)) {
						lqdAstBo.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST, lqdAstBo.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);

					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(cashIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType("FA");
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					
					final RMC_IN_PRFL_Collection rmcInPrflMstr = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					RMC_IN_PRFL_Cargo prflCargo = rmcResponseProfileManager.getProfile(rmcInPrflMstr, cashIndvSeq);
					rmcResponseProfileManager.makeAddNew(IRMCResponseProfileManager.LIQUID_ASET_BANK, prflCargo, true);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARLAD", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLiquidAssetFinancialAccount");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLiquidAssetFinancialAccount", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetFinancialAccount() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLiquidAssetOtherLiqAsset(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetOtherLiqAsset() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String cashIndvSeq = request.get("firstName_otherAsset") != null ? (String) request
					.get("firstName_otherAsset") : FwConstants.EMPTY_STRING;
					final String type = request.get("type_otherAsset") != null ? (String) request
							.get("type_otherAsset") : FwConstants.EMPTY_STRING;
							final LiquidAssetBO lqdAstBo = new LiquidAssetBO();
							// validate selections
							if (cashIndvSeq == null
									|| AppConstants.SELECT_DEFAULT_OPTION.equals(cashIndvSeq)
									|| AppConstants.SELECT_DEFAULT_OPTION.equals(type)) {
								lqdAstBo.validateAdd();
								// add validation message and return
								request.put(FwConstants.MESSAGE_LIST, lqdAstBo.getMessageList());
								txnBean.setPageCollection((Map) session
										.get(FwConstants.BEFORE_COLLECTION));
								return;
							}
							final String appNum = (String) session.get(AppConstants.APP_NUMBER);

							final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
							indivSeqBean.setIndivSeqNum(cashIndvSeq);
							indivSeqBean.setSeqNum(FwConstants.ZERO);
							indivSeqBean.setType(type);
							indivSeqBean.setUserEndInd(FwConstants.ZERO);
							pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
							
							final RMC_IN_PRFL_Collection rmcInPrflMstr = (RMC_IN_PRFL_Collection) session
									.get(AppConstants.RMC_IN_PRFL_MASTER);
							RMC_IN_PRFL_Cargo prflCargo = rmcResponseProfileManager.getProfile(rmcInPrflMstr, cashIndvSeq);
							rmcResponseProfileManager.makeAddNew(rmcResponseProfileManager.getResponseByType(IRMCResponseProfileManager.LIQUID_ASSET_DETAILS, type), prflCargo, true);

							// set driver status
							final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
							driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARLAD", driver,
									appNum);
							session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLiquidAssetOtherLiqAsset");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLiquidAssetOtherLiqAsset", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetOtherLiqAsset() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void addLiquidAssetTransferAsset(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetTransferAsset() - START");
		try {
			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			// get cargo determining user selection
			final String cashIndvSeq = request.get("firstName_soldXfer") != null ? (String) request
					.get("firstName_soldXfer") : FwConstants.EMPTY_STRING;

					final LiquidAssetBO lqdAstBo = new LiquidAssetBO();
					// validate selections
					if (cashIndvSeq == null
							|| AppConstants.SELECT_DEFAULT_OPTION.equals(cashIndvSeq)) {
						lqdAstBo.validateAdd();
						// add validation message and return
						request.put(FwConstants.MESSAGE_LIST, lqdAstBo.getMessageList());
						txnBean.setPageCollection((Map) session
								.get(FwConstants.BEFORE_COLLECTION));
						return;
					}
					final String appNum = (String) session.get(AppConstants.APP_NUMBER);

					final IndivTypeSeqBean indivSeqBean = new IndivTypeSeqBean();
					indivSeqBean.setIndivSeqNum(cashIndvSeq);
					indivSeqBean.setSeqNum(FwConstants.ZERO);
					indivSeqBean.setType(AppConstants.RMC_CAT_XFER_LIQUID_ASSET_PRFL);
					indivSeqBean.setUserEndInd(FwConstants.ZERO);
					pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivSeqBean);
					
					final RMC_IN_PRFL_Collection rmcInPrflMstr = (RMC_IN_PRFL_Collection) session
							.get(AppConstants.RMC_IN_PRFL_MASTER);
					RMC_IN_PRFL_Cargo prflCargo = rmcResponseProfileManager.getProfile(rmcInPrflMstr, cashIndvSeq);
					rmcResponseProfileManager.makeAddNew(IRMCResponseProfileManager.LIQUID_ASSET_XFER, prflCargo, true);

					// set driver status
					final int[] driver = (int[]) session.get(FwConstants.RMC_DRIVER);
					driverManager.makeAddNew(FwConstants.RMC_DRIVER, "ARXFR", driver,
							appNum);
					session.put(FwConstants.RMC_DRIVER, driver);
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addLiquidAssetTransferAsset");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"addLiquidAssetTransferAsset", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.addLiquidAssetTransferAsset() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Change liquid asset other asset transfer.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void changeLiquidAssetOtherAssetTransfer(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.changeLiquidAssetOtherAssetTransfer() - START");
		try {
			log(ILog.INFO,
					"LiquidAssetEJBBean::changeLiquidAssetOtherAssetTransfer:Start");

			final Map session = txnBean.getSession();
			final Map pageCollection = txnBean.getPageCollection();

			// Getting request parameters for the row thats been selected to
			// change
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);
			final CP_APP_IN_ASET_XFER_Collection appInAsetXfer = (CP_APP_IN_ASET_XFER_Collection) pageCollection
					.get("CP_APP_IN_ASET_XFER_Collection");
			final CP_APP_IN_ASET_XFER_Cargo appInAsetXferCargo = appInAsetXfer
					.getCargo(0);
			final String indvSeqNum = appInAsetXferCargo.getIndv_seq_num();
			final String type = "XR";

			// Setting IndivSeqTypeBean
			final IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean(
					indvSeqNum, type, appInAsetXferCargo.getSeq_num());
			indivTypeSeqBean.setUserEndInd(FwConstants.ZERO);
			// put the indivTypeSeqBean in pageCollection
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);

			/**
			 * if ("RE".equals(appInAsetXferCargo.getSrc_app_ind())) {
			 * indivTypeSeqBean.setUserEndInd(FwConstants.ONE); } else {
			 * indivTypeSeqBean.setUserEndInd(FwConstants.ZERO); }
			 */
			// Get driver Array and appNum from session
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);

			driverManager.getAFBStatus(FwConstants.RMC_DRIVER, "ARXFR",
					driverArray);

			// Setting summary page staus to required
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);

			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);

			// Setting pageCollection to transaction bean
			txnBean.setPageCollection(pageCollection);

			log(ILog.INFO,
					"LiquidAssetEJBBean::changeLiquidAssetOtherAssetTransfer:End");

		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeLiquidAssetOtherAssetTransfer");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"changeLiquidAssetOtherAssetTransfer", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}

		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.changeLiquidAssetOtherAssetTransfer() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}

	/**
	 * Comment here.
	 *
	 * @param txnBean the txn bean
	 * @throws javax.ejb.EJBException the EJB exception
	 */
	public void eraseLiquidAssetOtherAssetTransfer(final FwTransaction txnBean)
			throws javax.ejb.EJBException {
		final long startTime = System.currentTimeMillis();
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetOtherAssetTransfer() - START");
		try {
			log(ILog.INFO,
					"LiquidAssetEJBBean::eraseLiquidAssetOtherAssetTransfer:Start");

			final Map session = txnBean.getSession();
			final Map request = txnBean.getRequest();
			final Map pageCollection = txnBean.getPageCollection();
			final Map beforeColl = (Map) session
					.get(FwConstants.BEFORE_COLLECTION);

			// Get RMCSessionBean from the session

			// Define IndvSeqNum and the SeqNum and Type and RowNum
			String indvSeqNum = null;
			String seqNum = null;
			String liquidAssetType = null;

			// Get driver info.
			final int[] driverArray = (int[]) session
					.get(FwConstants.RMC_DRIVER);
			final CP_APP_IN_ASET_XFER_Collection assetColl = (CP_APP_IN_ASET_XFER_Collection) pageCollection
					.get("CP_APP_IN_ASET_XFER_Collection");
			final CP_APP_IN_ASET_XFER_Cargo liquidAssetCargo = assetColl
					.getCargo(0);

			// Get the Appnumber from session
			final String appNum = (String) session.get(AppConstants.APP_NUMBER);

			// delete record from rmc selection profile
			final SortedSet rmcSelPrfl = (SortedSet) session
					.get(AppConstants.RMC_CATEGORY_PROFILE_MASTER);
			final RMC_IN_PRFL_Collection rmcInPrflColl = (RMC_IN_PRFL_Collection) session
					.get(AppConstants.RMC_IN_PRFL_MASTER);

			indvSeqNum = liquidAssetCargo.getIndv_seq_num();
			seqNum = liquidAssetCargo.getSeq_num();
			liquidAssetType = liquidAssetCargo.getAsset_type();

			CP_APP_IN_ASET_XFER_Cargo beforeLiquidAssetCargo = (CP_APP_IN_ASET_XFER_Cargo) beforeColl
					.get("CP_APP_IN_ASET_XFER_Cargo");

			final LiquidAssetBO liquidAssetBO = new LiquidAssetBO();

			if (beforeLiquidAssetCargo == null
					|| liquidAssetBO.isDifferentAssetXfer(liquidAssetCargo,
							beforeLiquidAssetCargo)) {

				liquidAssetBO.validateErase();
				request.put(FwConstants.MESSAGE_LIST,
						liquidAssetBO.getMessageList());
				beforeLiquidAssetCargo = new CP_APP_IN_ASET_XFER_Cargo();
				beforeLiquidAssetCargo.setIndv_seq_num(indvSeqNum);
				beforeLiquidAssetCargo.setSeq_num(seqNum);
				beforeLiquidAssetCargo.setAsset_type(liquidAssetType);
				beforeColl.put("CP_APP_IN_ASET_XFER_Cargo",
						beforeLiquidAssetCargo);
				txnBean.setPageCollection(beforeColl);
				return;

			}

			liquidAssetBO.deleteLiquidXfrRecords(indvSeqNum, seqNum, appNum);
			final SortedSet categorySelectionProfile = categorySelectionProfileManager
					.loadCategoryChangeSelectionProfile(appNum,
							AppConstants.RMC_CAT_LIQUID_ASSET_PRFL);
			if(categorySelectionProfile!=null && categorySelectionProfile.size()>0)
			{
			categorySelectionProfileManager.removeSequenceDetail(categorySelectionProfile,
					appNum, Short.parseShort(indvSeqNum),
					Long.parseLong(seqNum),AppConstants.RMC_CAT_LIQUID_ASSET_PRFL , AppConstants.RMC_CAT_XFER_LIQUID_ASSET_PRFL);
			}
			if (beforeColl != null) {
				int count = 0;
				CP_APP_IN_ASET_XFER_Collection asset1Col = null;
				CP_APP_IN_ASET_XFER_Cargo asset1Cargo = null;
				asset1Col = (CP_APP_IN_ASET_XFER_Collection) beforeColl
						.get("CP_APP_IN_ASET_XFER_Collection");

				if (asset1Col != null && !asset1Col.isEmpty()) {
					final int utilityCollSize = asset1Col.size();
					for (int i = 0; i < utilityCollSize; i++) {
						asset1Cargo = asset1Col.getCargo(i);
						if (asset1Cargo.getIndv_seq_num().equals(indvSeqNum)
								&& asset1Cargo.getAsset_type().equals(
										liquidAssetType)
										&& AppConstants.RMC_NEW_RECORD_IND
										.equals(asset1Cargo.getSrc_app_ind())) {
							count++;
						}
					}
				}
				if (count == 1) {
					rmcResponseProfileManager.getProfile(rmcInPrflColl,
							indvSeqNum);

				}
			}

			boolean rmcPrflLiqAstNotReq = false;
			// here we need to check we have no entrys in rmcPrfl for the Life
			// Insurance detail
			// as well as we need to check
			if (rmcInPrflColl != null && !rmcInPrflColl.isEmpty()) {
				if (rmcResponseProfileManager.isAppResponseNotRequired(
						rmcInPrflColl,
						IRMCResponseProfileManager.LIQ_ASET_OTHER)) {
					rmcPrflLiqAstNotReq = true;
				}
			} else {

				rmcPrflLiqAstNotReq = true;
			}
			final IReferenceTableManager iref = ReferenceTableManager
					.getInstance();
			final IReferenceTableData refData = iref.getReferenceTableData(
					"TLAS", (String) ((Map) session
							.get(FwConstants.HTTP_SESSION))
							.get(AppConstants.LANGUAGE));
			final String[] codeValues = refData.getCodeValues();
			final Map liquidAssetAssetTypeMap = new HashMap();
			for (int i = 0; i < codeValues.length; i++) {
				liquidAssetAssetTypeMap.put(codeValues[i], codeValues[i]);
			}

			if (categorySelectionProfileManager.isEmpty(rmcSelPrfl,
					liquidAssetAssetTypeMap) && rmcPrflLiqAstNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXFR", driverArray, appNum);
			}
			if (!checkAssetDetailsPageRequired(rmcSelPrfl,
					liquidAssetAssetTypeMap,
					AppConstants.RMC_CAT_LIQUID_ASSET_PRFL)
					&& rmcPrflLiqAstNotReq) {
				driverManager.makeAbsoluteNotRequired(FwConstants.RMC_DRIVER,
						"ARXFR", driverArray, appNum);
			}
			session.put(AppConstants.RMC_CATEGORY_PROFILE_MASTER, rmcSelPrfl);
			driverManager.makeRequired(FwConstants.RMC_DRIVER, "ARASM",
					driverArray, appNum);
			log(ILog.INFO,
					"RMCLiquidAndOtherAssetsEJBBean::eraseLiquidAssetOtherAssetTransfer:End");
		} catch (final FwException fe) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwWrappedException we = new FwWrappedException(fe);
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseLiquidAssetOtherAssetTransfer");
			we.setFwException(fe);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		} catch (final Exception e) {
			if (ctx != null) {
				ctx.setRollbackOnly();
			}
			final FwException fe = createFwException(this.getClass().getName(),
					"eraseLiquidAssetOtherAssetTransfer", e);
			throw rmcLiquidAndOtherAssetsEJBBean.exceptionManagerLog(fe, getClass().getName(), Thread.currentThread().getStackTrace()[2].getMethodName());
		}
		log(ILog.INFO,
				"RMCLiquidAndOtherAssetsEJBBean.eraseLiquidAssetOtherAssetTransfer() - END , Time Taken : "
						+ (System.currentTimeMillis() - startTime)
						+ " milliseconds");
	}
    
    public void setSessionContext(SessionContext sessionContext){
    	ctx=sessionContext;
    }   
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public FwException exceptionManagerLog(Exception e, String className,
			String methodName) {
		return super.exceptionManagerLog(e, className, methodName);
	}
}
